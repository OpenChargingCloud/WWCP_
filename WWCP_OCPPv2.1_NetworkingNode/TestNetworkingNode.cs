/*
 * Copyright (c) 2014-2023 GraphDefined GmbH
 * This file is part of WWCP OCPP <https://github.com/OpenChargingCloud/WWCP_OCPP>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#region Usings

using System.Reflection;
using System.Security.Cryptography;
using System.Collections.Concurrent;
using System.Collections.ObjectModel;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;

using Newtonsoft.Json.Linq;

using org.GraphDefined.Vanaheimr.Illias;
using org.GraphDefined.Vanaheimr.Hermod;
using org.GraphDefined.Vanaheimr.Hermod.DNS;
using org.GraphDefined.Vanaheimr.Hermod.Mail;
using org.GraphDefined.Vanaheimr.Hermod.SMTP;
using org.GraphDefined.Vanaheimr.Hermod.HTTP;
using org.GraphDefined.Vanaheimr.Hermod.WebSocket;
using org.GraphDefined.Vanaheimr.Hermod.Logging;

using cloud.charging.open.protocols.OCPPv2_1.NetworkingNode.CS.Extensions;
using cloud.charging.open.protocols.OCPPv2_1.NetworkingNode.CS;

#endregion

namespace cloud.charging.open.protocols.OCPPv2_1.NetworkingNode
{

    #region (class) ChargingStationConnector

    /// <summary>
    /// A connector at a charging station.
    /// </summary>
    public class ChargingStationConnector
    {

        #region Properties

        public Connector_Id    Id               { get; }
        public ConnectorType  ConnectorType    { get; }

        #endregion

        #region ChargingStationConnector(Id, ConnectorType)

        public ChargingStationConnector(Connector_Id    Id,
                                        ConnectorType  ConnectorType)
        {

            this.Id             = Id;
            this.ConnectorType  = ConnectorType;

        }

        #endregion

    }

    #endregion

    #region (class) ChargingStationEVSE

    /// <summary>
    /// An EVSE at a charging station.
    /// </summary>
    public class ChargingStationEVSE
    {

        #region Properties

        public EVSE_Id            Id                       { get; }

        public Reservation_Id?    ReservationId            { get; set; }

        public OperationalStatus  AdminStatus              { get; set; }

        public ConnectorStatus    Status                   { get; set; }


        public String?            MeterType                { get; set; }
        public String?            MeterSerialNumber        { get; set; }
        public String?            MeterPublicKey           { get; set; }


        public Boolean            IsReserved               { get; set; }

        public Boolean            IsCharging               { get; set; }

        public IdToken?           IdToken                  { get; set; }

        public IdToken?           GroupIdToken             { get; set; }

        public Transaction_Id?    TransactionId            { get; set; }

        public RemoteStart_Id?    RemoteStartId            { get; set; }

        public ChargingProfile?   ChargingProfile          { get; set; }


        public DateTime?          StartTimestamp           { get; set; }

        public Decimal?           MeterStartValue          { get; set; }

        public String?            SignedStartMeterValue    { get; set; }

        public DateTime?          StopTimestamp            { get; set; }

        public Decimal?           MeterStopValue           { get; set; }

        public String?            SignedStopMeterValue     { get; set; }


        public ChargingTariff?    DefaultChargingTariff    { get; set; }

        #endregion

        #region ChargingStationEVSE(Id, AdminStatus, ...)

        public ChargingStationEVSE(EVSE_Id                                 Id,
                                   OperationalStatus                       AdminStatus,
                                   String?                                 MeterType           = null,
                                   String?                                 MeterSerialNumber   = null,
                                   String?                                 MeterPublicKey      = null,
                                   IEnumerable<ChargingStationConnector>?  Connectors          = null)
        {

            this.Id                 = Id;
            this.AdminStatus        = AdminStatus;
            this.MeterType          = MeterType;
            this.MeterSerialNumber  = MeterSerialNumber;
            this.MeterPublicKey     = MeterPublicKey;
            this.connectors         = Connectors is not null && Connectors.Any()
                                          ? new HashSet<ChargingStationConnector>(Connectors)
                                          : new HashSet<ChargingStationConnector>();

        }

        #endregion


        #region Connectors

        private readonly HashSet<ChargingStationConnector> connectors;

        public IEnumerable<ChargingStationConnector> Connectors
            => connectors;

        public Boolean TryGetConnector(Connector_Id ConnectorId, out ChargingStationConnector? Connector)
        {

            Connector = connectors.FirstOrDefault(connector => connector.Id == ConnectorId);

            return Connector is not null;

        }

        #endregion


    }

    #endregion


    /// <summary>
    /// A networking node for testing.
    /// </summary>
    public class TestNetworkingNode : IEventSender
                                   //  INetworkingNode
    {

        public class ActingAsCS : CS.INetworkingNode,
                                       //  IChargingStationClientEvents,
                                       IEventSender
        {

            #region Data

            private readonly            HashSet<SignaturePolicy>    signaturePolicies           = new();


            /// <summary>
            /// The default time span between heartbeat requests.
            /// </summary>
            public readonly             TimeSpan                    DefaultSendHeartbeatEvery   = TimeSpan.FromSeconds(30);

            protected static readonly   TimeSpan                    SemaphoreSlimTimeout        = TimeSpan.FromSeconds(5);

            /// <summary>
            /// The default maintenance interval.
            /// </summary>
            public readonly             TimeSpan                    DefaultMaintenanceEvery     = TimeSpan.FromSeconds(1);
            private static readonly     SemaphoreSlim               MaintenanceSemaphore        = new (1, 1);
            private readonly            Timer                       MaintenanceTimer;

            private readonly            Timer                       SendHeartbeatTimer;


            private readonly            List<EnqueuedRequest>       EnqueuedRequests;

            public                      IHTTPAuthentication?        HTTPAuthentication          { get; }
            public                      DNSClient?                  DNSClient                   { get; }

            private                     Int64                       internalRequestId           = 100000;

            #endregion

            #region Properties

            /// <summary>
            /// The client connected to a CSMS.
            /// </summary>
            public CS.INetworkingNodeClient?   CSClient                    { get; private set; }


            public String? ClientCloseMessage
                => CSClient?.ClientCloseMessage;


            /// <summary>
            /// The sender identification.
            /// </summary>
            String IEventSender.Id
                => Id.ToString();



            /// <summary>
            /// The charging station identification.
            /// </summary>
            public NetworkingNode_Id        Id                          { get; }

            public TestNetworkingNode       NetworkingNodeRef           { get; }

            /// <summary>
            /// The charging station vendor identification.
            /// </summary>
            [Mandatory]
            public String                   VendorName                  { get; }

            /// <summary>
            ///  The charging station model identification.
            /// </summary>
            [Mandatory]
            public String                   Model                       { get; }


            /// <summary>
            /// The optional multi-language charging station description.
            /// </summary>
            [Optional]
            public I18NString?              Description                 { get; }

            /// <summary>
            /// The optional serial number of the charging station.
            /// </summary>
            [Optional]
            public String?                  SerialNumber                { get; }

            /// <summary>
            /// The optional firmware version of the charging station.
            /// </summary>
            [Optional]
            public String?                  FirmwareVersion             { get; }

            /// <summary>
            /// The modem of the charging station.
            /// </summary>
            [Optional]
            public Modem?                   Modem                       { get; }

            /// <summary>
            /// The optional meter type of the main power meter of the charging station.
            /// </summary>
            [Optional]


            public CustomData?              CustomData                  { get; set; }


            /// <summary>
            /// The time span between heartbeat requests.
            /// </summary>
            public TimeSpan                 SendHeartbeatEvery          { get; set; }

            /// <summary>
            /// The time at the CSMS.
            /// </summary>
            public DateTime?                CSMSTime                    { get; private set; }

            /// <summary>
            /// The default request timeout for all requests.
            /// </summary>
            public TimeSpan                 DefaultRequestTimeout       { get; }




            /// <summary>
            /// The maintenance interval.
            /// </summary>
            public TimeSpan                 MaintenanceEvery            { get; }

            /// <summary>
            /// Disable all maintenance tasks.
            /// </summary>
            public Boolean                  DisableMaintenanceTasks     { get; set; }

            /// <summary>
            /// Disable all heartbeats.
            /// </summary>
            public Boolean                  DisableSendHeartbeats       { get; set; }


            #region ToDo's

            public URL RemoteURL => throw new NotImplementedException();

            public HTTPHostname? VirtualHostname => throw new NotImplementedException();

            string? IHTTPClient.Description { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

            public RemoteCertificateValidationHandler? RemoteCertificateValidator => throw new NotImplementedException();

            public X509Certificate? ClientCert => throw new NotImplementedException();

            public SslProtocols TLSProtocol => throw new NotImplementedException();

            public bool PreferIPv4 => throw new NotImplementedException();

            public string HTTPUserAgent => throw new NotImplementedException();

            public TimeSpan RequestTimeout { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

            public TransmissionRetryDelayDelegate TransmissionRetryDelay => throw new NotImplementedException();

            public ushort MaxNumberOfRetries => throw new NotImplementedException();

            public bool UseHTTPPipelining => throw new NotImplementedException();

            public HTTPClientLogger? HTTPLogger => throw new NotImplementedException();

            #endregion


            /// <summary>
            /// The enumeration of all signature policies.
            /// </summary>
            public IEnumerable<SignaturePolicy>  SignaturePolicies
                => signaturePolicies;

            /// <summary>
            /// The currently active signature policy.
            /// </summary>
            public SignaturePolicy               SignaturePolicy
                => SignaturePolicies.First();

            #endregion

            #region Custom JSON serializer delegates

            #region CSMS Request  Messages
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ResetRequest>?                                   CustomResetRequestSerializer                                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UpdateFirmwareRequest>?                          CustomUpdateFirmwareRequestSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.PublishFirmwareRequest>?                         CustomPublishFirmwareRequestSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UnpublishFirmwareRequest>?                       CustomUnpublishFirmwareRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetBaseReportRequest>?                           CustomGetBaseReportRequestSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetReportRequest>?                               CustomGetReportRequestSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetLogRequest>?                                  CustomGetLogRequestSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetVariablesRequest>?                            CustomSetVariablesRequestSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetVariablesRequest>?                            CustomGetVariablesRequestSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetMonitoringBaseRequest>?                       CustomSetMonitoringBaseRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetMonitoringReportRequest>?                     CustomGetMonitoringReportRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetMonitoringLevelRequest>?                      CustomSetMonitoringLevelRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetVariableMonitoringRequest>?                   CustomSetVariableMonitoringRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearVariableMonitoringRequest>?                 CustomClearVariableMonitoringRequestSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetNetworkProfileRequest>?                       CustomSetNetworkProfileRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ChangeAvailabilityRequest>?                      CustomChangeAvailabilityRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.TriggerMessageRequest>?                          CustomTriggerMessageRequestSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DataTransferRequest>?                            CustomIncomingDataTransferRequestSerializer                  { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.CertificateSignedRequest>?                       CustomCertificateSignedRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.InstallCertificateRequest>?                      CustomInstallCertificateRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetInstalledCertificateIdsRequest>?              CustomGetInstalledCertificateIdsRequestSerializer            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DeleteCertificateRequest>?                       CustomDeleteCertificateRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyCRLRequest>?                               CustomNotifyCRLRequestSerializer                             { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetLocalListVersionRequest>?                     CustomGetLocalListVersionRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SendLocalListRequest>?                           CustomSendLocalListRequestSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearCacheRequest>?                              CustomClearCacheRequestSerializer                            { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ReserveNowRequest>?                              CustomReserveNowRequestSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.CancelReservationRequest>?                       CustomCancelReservationRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.RequestStartTransactionRequest>?                 CustomRequestStartTransactionRequestSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.RequestStopTransactionRequest>?                  CustomRequestStopTransactionRequestSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetTransactionStatusRequest>?                    CustomGetTransactionStatusRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetChargingProfileRequest>?                      CustomSetChargingProfileRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetChargingProfilesRequest>?                     CustomGetChargingProfilesRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearChargingProfileRequest>?                    CustomClearChargingProfileRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetCompositeScheduleRequest>?                    CustomGetCompositeScheduleRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UpdateDynamicScheduleRequest>?                   CustomUpdateDynamicScheduleRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyAllowedEnergyTransferRequest>?             CustomNotifyAllowedEnergyTransferRequestSerializer           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UsePriorityChargingRequest>?                     CustomUsePriorityChargingRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UnlockConnectorRequest>?                         CustomUnlockConnectorRequestSerializer                       { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.AFRRSignalRequest>?                              CustomAFRRSignalRequestSerializer                            { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetDisplayMessageRequest>?                       CustomSetDisplayMessageRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetDisplayMessagesRequest>?                      CustomGetDisplayMessagesRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearDisplayMessageRequest>?                     CustomClearDisplayMessageRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.CostUpdatedRequest>?                             CustomCostUpdatedRequestSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.CustomerInformationRequest>?                     CustomCustomerInformationRequestSerializer                   { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate <OCPPv2_1.CSMS.BinaryDataTransferRequest>?                      CustomIncomingBinaryDataTransferRequestSerializer            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetFileRequest>?                                 CustomGetFileRequestSerializer                               { get; set; }
            public CustomBinarySerializerDelegate <OCPPv2_1.CSMS.SendFileRequest>?                                CustomSendFileRequestSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DeleteFileRequest>?                              CustomDeleteFileRequestSerializer                            { get; set; }


            // E2E Security Extensions
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.AddSignaturePolicyRequest>?                      CustomAddSignaturePolicyRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UpdateSignaturePolicyRequest>?                   CustomUpdateSignaturePolicyRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DeleteSignaturePolicyRequest>?                   CustomDeleteSignaturePolicyRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.AddUserRoleRequest>?                             CustomAddUserRoleRequestSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UpdateUserRoleRequest>?                          CustomUpdateUserRoleRequestSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DeleteUserRoleRequest>?                          CustomDeleteUserRoleRequestSerializer                        { get; set; }


            // E2E Charging Tariffs Extensions
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetDefaultChargingTariffRequest>?                CustomSetDefaultChargingTariffRequestSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetDefaultChargingTariffRequest>?                CustomGetDefaultChargingTariffRequestSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.RemoveDefaultChargingTariffRequest>?             CustomRemoveDefaultChargingTariffRequestSerializer           { get; set; }

            #endregion

            #region CSMS Response Messages
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.BootNotificationResponse>?                       CustomBootNotificationResponseSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.FirmwareStatusNotificationResponse>?             CustomFirmwareStatusNotificationResponseSerializer           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.PublishFirmwareStatusNotificationResponse>?      CustomPublishFirmwareStatusNotificationResponseSerializer    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.HeartbeatResponse>?                              CustomHeartbeatResponseSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyEventResponse>?                            CustomNotifyEventResponseSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SecurityEventNotificationResponse>?              CustomSecurityEventNotificationResponseSerializer            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyReportResponse>?                           CustomNotifyReportResponseSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyMonitoringReportResponse>?                 CustomNotifyMonitoringReportResponseSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.LogStatusNotificationResponse>?                  CustomLogStatusNotificationResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DataTransferResponse>?                           CustomDataTransferResponseSerializer                         { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SignCertificateResponse>?                        CustomSignCertificateResponseSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.Get15118EVCertificateResponse>?                  CustomGet15118EVCertificateResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetCertificateStatusResponse>?                   CustomGetCertificateStatusResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetCRLResponse>?                                 CustomGetCRLResponseSerializer                               { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ReservationStatusUpdateResponse>?                CustomReservationStatusUpdateResponseSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.AuthorizeResponse>?                              CustomAuthorizeResponseSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyEVChargingNeedsResponse>?                  CustomNotifyEVChargingNeedsResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.TransactionEventResponse>?                       CustomTransactionEventResponseSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.StatusNotificationResponse>?                     CustomStatusNotificationResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.MeterValuesResponse>?                            CustomMeterValuesResponseSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyChargingLimitResponse>?                    CustomNotifyChargingLimitResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearedChargingLimitResponse>?                   CustomClearedChargingLimitResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ReportChargingProfilesResponse>?                 CustomReportChargingProfilesResponseSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyEVChargingScheduleResponse>?               CustomNotifyEVChargingScheduleResponseSerializer             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyPriorityChargingResponse>?                 CustomNotifyPriorityChargingResponseSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.PullDynamicScheduleUpdateResponse>?              CustomPullDynamicScheduleUpdateResponseSerializer            { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyDisplayMessagesResponse>?                  CustomNotifyDisplayMessagesResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyCustomerInformationResponse>?              CustomNotifyCustomerInformationResponseSerializer            { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate<OCPPv2_1.CSMS.BinaryDataTransferResponse>?                      CustomBinaryDataTransferResponseSerializer                   { get; set; }

            #endregion


            #region Charging Station Request  Messages
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.BootNotificationRequest>?                             CustomBootNotificationRequestSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.FirmwareStatusNotificationRequest>?                   CustomFirmwareStatusNotificationRequestSerializer            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.PublishFirmwareStatusNotificationRequest>?            CustomPublishFirmwareStatusNotificationRequestSerializer     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.HeartbeatRequest>?                                    CustomHeartbeatRequestSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyEventRequest>?                                  CustomNotifyEventRequestSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SecurityEventNotificationRequest>?                    CustomSecurityEventNotificationRequestSerializer             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyReportRequest>?                                 CustomNotifyReportRequestSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyMonitoringReportRequest>?                       CustomNotifyMonitoringReportRequestSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.LogStatusNotificationRequest>?                        CustomLogStatusNotificationRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DataTransferRequest>?                                 CustomDataTransferRequestSerializer                          { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SignCertificateRequest>?                              CustomSignCertificateRequestSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.Get15118EVCertificateRequest>?                        CustomGet15118EVCertificateRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetCertificateStatusRequest>?                         CustomGetCertificateStatusRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetCRLRequest>?                                       CustomGetCRLRequestSerializer                                { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ReservationStatusUpdateRequest>?                      CustomReservationStatusUpdateRequestSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.AuthorizeRequest>?                                    CustomAuthorizeRequestSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyEVChargingNeedsRequest>?                        CustomNotifyEVChargingNeedsRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.TransactionEventRequest>?                             CustomTransactionEventRequestSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.StatusNotificationRequest>?                           CustomStatusNotificationRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.MeterValuesRequest>?                                  CustomMeterValuesRequestSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyChargingLimitRequest>?                          CustomNotifyChargingLimitRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearedChargingLimitRequest>?                         CustomClearedChargingLimitRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ReportChargingProfilesRequest>?                       CustomReportChargingProfilesRequestSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyEVChargingScheduleRequest>?                     CustomNotifyEVChargingScheduleRequestSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyPriorityChargingRequest>?                       CustomNotifyPriorityChargingRequestSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.PullDynamicScheduleUpdateRequest>?                    CustomPullDynamicScheduleUpdateRequestSerializer             { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyDisplayMessagesRequest>?                        CustomNotifyDisplayMessagesRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyCustomerInformationRequest>?                    CustomNotifyCustomerInformationRequestSerializer             { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate<OCPPv2_1.CS.BinaryDataTransferRequest>?                            CustomBinaryDataTransferRequestSerializer                    { get; set; }

            #endregion

            #region Charging Station Response Messages
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ResetResponse>?                                       CustomResetResponseSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UpdateFirmwareResponse>?                              CustomUpdateFirmwareResponseSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.PublishFirmwareResponse>?                             CustomPublishFirmwareResponseSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UnpublishFirmwareResponse>?                           CustomUnpublishFirmwareResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetBaseReportResponse>?                               CustomGetBaseReportResponseSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetReportResponse>?                                   CustomGetReportResponseSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetLogResponse>?                                      CustomGetLogResponseSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetVariablesResponse>?                                CustomSetVariablesResponseSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetVariablesResponse>?                                CustomGetVariablesResponseSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetMonitoringBaseResponse>?                           CustomSetMonitoringBaseResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetMonitoringReportResponse>?                         CustomGetMonitoringReportResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetMonitoringLevelResponse>?                          CustomSetMonitoringLevelResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetVariableMonitoringResponse>?                       CustomSetVariableMonitoringResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearVariableMonitoringResponse>?                     CustomClearVariableMonitoringResponseSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetNetworkProfileResponse>?                           CustomSetNetworkProfileResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ChangeAvailabilityResponse>?                          CustomChangeAvailabilityResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.TriggerMessageResponse>?                              CustomTriggerMessageResponseSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DataTransferResponse>?                                CustomIncomingDataTransferResponseSerializer                 { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.CertificateSignedResponse>?                           CustomCertificateSignedResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.InstallCertificateResponse>?                          CustomInstallCertificateResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetInstalledCertificateIdsResponse>?                  CustomGetInstalledCertificateIdsResponseSerializer           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DeleteCertificateResponse>?                           CustomDeleteCertificateResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyCRLResponse>?                                   CustomNotifyCRLResponseSerializer                            { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetLocalListVersionResponse>?                         CustomGetLocalListVersionResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SendLocalListResponse>?                               CustomSendLocalListResponseSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearCacheResponse>?                                  CustomClearCacheResponseSerializer                           { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ReserveNowResponse>?                                  CustomReserveNowResponseSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.CancelReservationResponse>?                           CustomCancelReservationResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.RequestStartTransactionResponse>?                     CustomRequestStartTransactionResponseSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.RequestStopTransactionResponse>?                      CustomRequestStopTransactionResponseSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetTransactionStatusResponse>?                        CustomGetTransactionStatusResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetChargingProfileResponse>?                          CustomSetChargingProfileResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetChargingProfilesResponse>?                         CustomGetChargingProfilesResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearChargingProfileResponse>?                        CustomClearChargingProfileResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetCompositeScheduleResponse>?                        CustomGetCompositeScheduleResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UpdateDynamicScheduleResponse>?                       CustomUpdateDynamicScheduleResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse>?                 CustomNotifyAllowedEnergyTransferResponseSerializer          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UsePriorityChargingResponse>?                         CustomUsePriorityChargingResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UnlockConnectorResponse>?                             CustomUnlockConnectorResponseSerializer                      { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.AFRRSignalResponse>?                                  CustomAFRRSignalResponseSerializer                           { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetDisplayMessageResponse>?                           CustomSetDisplayMessageResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetDisplayMessagesResponse>?                          CustomGetDisplayMessagesResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearDisplayMessageResponse>?                         CustomClearDisplayMessageResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.CostUpdatedResponse>?                                 CustomCostUpdatedResponseSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.CustomerInformationResponse>?                         CustomCustomerInformationResponseSerializer                  { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate <OCPPv2_1.CS.BinaryDataTransferResponse>?                          CustomIncomingBinaryDataTransferResponseSerializer           { get; set; }
            public CustomBinarySerializerDelegate <OCPPv2_1.CS.GetFileResponse>?                                     CustomGetFileResponseSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SendFileResponse>?                                    CustomSendFileResponseSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DeleteFileResponse>?                                  CustomDeleteFileResponseSerializer                           { get; set; }


            // E2E Security Extensions
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.AddSignaturePolicyResponse>?                          CustomAddSignaturePolicyResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UpdateSignaturePolicyResponse>?                       CustomUpdateSignaturePolicyResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DeleteSignaturePolicyResponse>?                       CustomDeleteSignaturePolicyResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.AddUserRoleResponse>?                                 CustomAddUserRoleResponseSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UpdateUserRoleResponse>?                              CustomUpdateUserRoleResponseSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DeleteUserRoleResponse>?                              CustomDeleteUserRoleResponseSerializer                       { get; set; }


            // E2E Charging Tariff Extensions
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetDefaultChargingTariffResponse>?                    CustomSetDefaultChargingTariffResponseSerializer             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetDefaultChargingTariffResponse>?                    CustomGetDefaultChargingTariffResponseSerializer             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.RemoveDefaultChargingTariffResponse>?                 CustomRemoveDefaultChargingTariffResponseSerializer          { get; set; }

            #endregion


            #region Data Structures

            public CustomJObjectSerializerDelegate<StatusInfo>?                                          CustomStatusInfoSerializer                                   { get; set; }
            public CustomJObjectSerializerDelegate<EVSEStatusInfo<SetDefaultChargingTariffStatus>>?      CustomEVSEStatusInfoSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<EVSEStatusInfo<RemoveDefaultChargingTariffStatus>>?   CustomEVSEStatusInfoSerializer2                              { get; set; }
            public CustomJObjectSerializerDelegate<Signature>?                                           CustomSignatureSerializer                                    { get; set; }
            public CustomJObjectSerializerDelegate<CustomData>?                                          CustomCustomDataSerializer                                   { get; set; }
            public CustomJObjectSerializerDelegate<Firmware>?                                            CustomFirmwareSerializer                                     { get; set; }
            public CustomJObjectSerializerDelegate<ComponentVariable>?                                   CustomComponentVariableSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<Component>?                                           CustomComponentSerializer                                    { get; set; }
            public CustomJObjectSerializerDelegate<EVSE>?                                                CustomEVSESerializer                                         { get; set; }
            public CustomJObjectSerializerDelegate<Variable>?                                            CustomVariableSerializer                                     { get; set; }
            public CustomJObjectSerializerDelegate<PeriodicEventStreamParameters>?                       CustomPeriodicEventStreamParametersSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<LogParameters>?                                       CustomLogParametersSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<SetVariableData>?                                     CustomSetVariableDataSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<GetVariableData>?                                     CustomGetVariableDataSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<SetMonitoringData>?                                   CustomSetMonitoringDataSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<NetworkConnectionProfile>?                            CustomNetworkConnectionProfileSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<VPNConfiguration>?                                    CustomVPNConfigurationSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<APNConfiguration>?                                    CustomAPNConfigurationSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<CertificateHashData>?                                 CustomCertificateHashDataSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<AuthorizationData>?                                   CustomAuthorizationDataSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<IdToken>?                                             CustomIdTokenSerializer                                      { get; set; }
            public CustomJObjectSerializerDelegate<AdditionalInfo>?                                      CustomAdditionalInfoSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<IdTokenInfo>?                                         CustomIdTokenInfoSerializer                                  { get; set; }
            public CustomJObjectSerializerDelegate<MessageContent>?                                      CustomMessageContentSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<ChargingProfile>?                                     CustomChargingProfileSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<LimitBeyondSoC>?                                      CustomLimitBeyondSoCSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<ChargingSchedule>?                                    CustomChargingScheduleSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<ChargingSchedulePeriod>?                              CustomChargingSchedulePeriodSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<V2XFreqWattEntry>?                                    CustomV2XFreqWattEntrySerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<V2XSignalWattEntry>?                                  CustomV2XSignalWattEntrySerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<SalesTariff>?                                         CustomSalesTariffSerializer                                  { get; set; }
            public CustomJObjectSerializerDelegate<SalesTariffEntry>?                                    CustomSalesTariffEntrySerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<RelativeTimeInterval>?                                CustomRelativeTimeIntervalSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<ConsumptionCost>?                                     CustomConsumptionCostSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<Cost>?                                                CustomCostSerializer                                         { get; set; }

            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.AbsolutePriceSchedule>?    CustomAbsolutePriceScheduleSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.PriceRuleStack>?           CustomPriceRuleStackSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.PriceRule>?                CustomPriceRuleSerializer                                    { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.TaxRule>?                  CustomTaxRuleSerializer                                      { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.OverstayRuleList>?         CustomOverstayRuleListSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.OverstayRule>?             CustomOverstayRuleSerializer                                 { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.AdditionalService>?        CustomAdditionalServiceSerializer                            { get; set; }

            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.PriceLevelSchedule>?       CustomPriceLevelScheduleSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.PriceLevelScheduleEntry>?  CustomPriceLevelScheduleEntrySerializer                      { get; set; }

            public CustomJObjectSerializerDelegate<TransactionLimits>?                                   CustomTransactionLimitsSerializer                            { get; set; }

            public CustomJObjectSerializerDelegate<ChargingProfileCriterion>?                            CustomChargingProfileCriterionSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<ClearChargingProfile>?                                CustomClearChargingProfileSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<MessageInfo>?                                         CustomMessageInfoSerializer                                  { get; set; }



            public CustomJObjectSerializerDelegate<ChargingStation>?                                     CustomChargingStationSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<EventData>?                                           CustomEventDataSerializer                                    { get; set; }
            public CustomJObjectSerializerDelegate<ReportData>?                                          CustomReportDataSerializer                                   { get; set; }
            public CustomJObjectSerializerDelegate<VariableAttribute>?                                   CustomVariableAttributeSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<VariableCharacteristics>?                             CustomVariableCharacteristicsSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<MonitoringData>?                                      CustomMonitoringDataSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<VariableMonitoring>?                                  CustomVariableMonitoringSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCSPRequestData>?                                     CustomOCSPRequestDataSerializer                              { get; set; }

            public CustomJObjectSerializerDelegate<ChargingNeeds>?                                       CustomChargingNeedsSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<ACChargingParameters>?                                CustomACChargingParametersSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<DCChargingParameters>?                                CustomDCChargingParametersSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<V2XChargingParameters>?                               CustomV2XChargingParametersSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<EVEnergyOffer>?                                       CustomEVEnergyOfferSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<EVPowerSchedule>?                                     CustomEVPowerScheduleSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<EVPowerScheduleEntry>?                                CustomEVPowerScheduleEntrySerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<EVAbsolutePriceSchedule>?                             CustomEVAbsolutePriceScheduleSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<EVAbsolutePriceScheduleEntry>?                        CustomEVAbsolutePriceScheduleEntrySerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<EVPriceRule>?                                         CustomEVPriceRuleSerializer                                  { get; set; }

            public CustomJObjectSerializerDelegate<Transaction>?                                         CustomTransactionSerializer                                  { get; set; }
            public CustomJObjectSerializerDelegate<MeterValue>?                                          CustomMeterValueSerializer                                   { get; set; }
            public CustomJObjectSerializerDelegate<SampledValue>?                                        CustomSampledValueSerializer                                 { get; set; }
            public CustomJObjectSerializerDelegate<SignedMeterValue>?                                    CustomSignedMeterValueSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<UnitsOfMeasure>?                                      CustomUnitsOfMeasureSerializer                               { get; set; }

            public CustomJObjectSerializerDelegate<SetVariableResult>?                                   CustomSetVariableResultSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<GetVariableResult>?                                   CustomGetVariableResultSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<SetMonitoringResult>?                                 CustomSetMonitoringResultSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<ClearMonitoringResult>?                               CustomClearMonitoringResultSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<CompositeSchedule>?                                   CustomCompositeScheduleSerializer                            { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate<Signature>?                                            CustomBinarySignatureSerializer                              { get; set; }


            // E2E Security Extensions



            // E2E Charging Tariff Extensions

            public CustomJObjectSerializerDelegate<ChargingTariff>?                                      CustomChargingTariffSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<Price>?                                               CustomPriceSerializer                                        { get; set; }
            public CustomJObjectSerializerDelegate<TariffElement>?                                       CustomTariffElementSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<PriceComponent>?                                      CustomPriceComponentSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<TaxRate>?                                             CustomTaxRateSerializer                                      { get; set; }
            public CustomJObjectSerializerDelegate<TariffRestrictions>?                                  CustomTariffRestrictionsSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<EnergyMix>?                                           CustomEnergyMixSerializer                                    { get; set; }
            public CustomJObjectSerializerDelegate<EnergySource>?                                        CustomEnergySourceSerializer                                 { get; set; }
            public CustomJObjectSerializerDelegate<EnvironmentalImpact>?                                 CustomEnvironmentalImpactSerializer                          { get; set; }

            #endregion

            #endregion

            #region Events

            #region Charging Station -> CSMS

            #region SendBootNotification

            /// <summary>
            /// An event fired whenever a BootNotification request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnBootNotificationRequestDelegate?   OnBootNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a BootNotification request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnBootNotificationResponseDelegate?  OnBootNotificationResponse;

            #endregion

            #region SendFirmwareStatusNotification

            /// <summary>
            /// An event fired whenever a FirmwareStatusNotification request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnFirmwareStatusNotificationRequestDelegate?   OnFirmwareStatusNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a FirmwareStatusNotification request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnFirmwareStatusNotificationResponseDelegate?  OnFirmwareStatusNotificationResponse;

            #endregion

            #region SendPublishFirmwareStatusNotification

            /// <summary>
            /// An event fired whenever a PublishFirmwareStatusNotification request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnPublishFirmwareStatusNotificationRequestDelegate?   OnPublishFirmwareStatusNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a PublishFirmwareStatusNotification request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnPublishFirmwareStatusNotificationResponseDelegate?  OnPublishFirmwareStatusNotificationResponse;

            #endregion

            #region SendHeartbeat

            /// <summary>
            /// An event fired whenever a Heartbeat request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnHeartbeatRequestDelegate?   OnHeartbeatRequest;

            /// <summary>
            /// An event fired whenever a response to a Heartbeat request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnHeartbeatResponseDelegate?  OnHeartbeatResponse;

            #endregion

            #region NotifyEvent

            /// <summary>
            /// An event fired whenever a NotifyEvent request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyEventRequestDelegate?   OnNotifyEventRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyEvent request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyEventResponseDelegate?  OnNotifyEventResponse;

            #endregion

            #region SendSecurityEventNotification

            /// <summary>
            /// An event fired whenever a SecurityEventNotification request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnSecurityEventNotificationRequestDelegate?   OnSecurityEventNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a SecurityEventNotification request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnSecurityEventNotificationResponseDelegate?  OnSecurityEventNotificationResponse;

            #endregion

            #region NotifyReport

            /// <summary>
            /// An event fired whenever a NotifyReport request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyReportRequestDelegate?   OnNotifyReportRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyReport request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyReportResponseDelegate?  OnNotifyReportResponse;

            #endregion

            #region NotifyMonitoringReport

            /// <summary>
            /// An event fired whenever a NotifyMonitoringReport request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyMonitoringReportRequestDelegate?   OnNotifyMonitoringReportRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyMonitoringReport request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyMonitoringReportResponseDelegate?  OnNotifyMonitoringReportResponse;

            #endregion

            #region SendLogStatusNotification

            /// <summary>
            /// An event fired whenever a LogStatusNotification request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnLogStatusNotificationRequestDelegate?   OnLogStatusNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a LogStatusNotification request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnLogStatusNotificationResponseDelegate?  OnLogStatusNotificationResponse;

            #endregion

            #region TransferData

            /// <summary>
            /// An event fired whenever a DataTransfer request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnDataTransferRequestDelegate?   OnDataTransferRequest;

            /// <summary>
            /// An event fired whenever a response to a DataTransfer request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnDataTransferResponseDelegate?  OnDataTransferResponse;

            #endregion


            #region SignCertificate

            /// <summary>
            /// An event fired whenever a SignCertificate request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnSignCertificateRequestDelegate?   OnSignCertificateRequest;

            /// <summary>
            /// An event fired whenever a response to a SignCertificate request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnSignCertificateResponseDelegate?  OnSignCertificateResponse;

            #endregion

            #region Get15118EVCertificate

            /// <summary>
            /// An event fired whenever a Get15118EVCertificate request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnGet15118EVCertificateRequestDelegate?   OnGet15118EVCertificateRequest;

            /// <summary>
            /// An event fired whenever a response to a Get15118EVCertificate request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnGet15118EVCertificateResponseDelegate?  OnGet15118EVCertificateResponse;

            #endregion

            #region GetCertificateStatus

            /// <summary>
            /// An event fired whenever a GetCertificateStatus request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnGetCertificateStatusRequestDelegate?   OnGetCertificateStatusRequest;

            /// <summary>
            /// An event fired whenever a response to a GetCertificateStatus request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnGetCertificateStatusResponseDelegate?  OnGetCertificateStatusResponse;

            #endregion

            #region GetCRL

            /// <summary>
            /// An event fired whenever a GetCRL request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnGetCRLRequestDelegate?   OnGetCRLRequest;

            /// <summary>
            /// An event fired whenever a response to a GetCRL request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnGetCRLResponseDelegate?  OnGetCRLResponse;

            #endregion


            #region SendReservationStatusUpdate

            /// <summary>
            /// An event fired whenever a ReservationStatusUpdate request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnReservationStatusUpdateRequestDelegate?   OnReservationStatusUpdateRequest;

            /// <summary>
            /// An event fired whenever a response to a ReservationStatusUpdate request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnReservationStatusUpdateResponseDelegate?  OnReservationStatusUpdateResponse;

            #endregion

            #region Authorize

            /// <summary>
            /// An event fired whenever an Authorize request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnAuthorizeRequestDelegate?   OnAuthorizeRequest;

            /// <summary>
            /// An event fired whenever a response to an Authorize request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnAuthorizeResponseDelegate?  OnAuthorizeResponse;

            #endregion

            #region NotifyEVChargingNeeds

            /// <summary>
            /// An event fired whenever a NotifyEVChargingNeeds request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyEVChargingNeedsRequestDelegate?   OnNotifyEVChargingNeedsRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyEVChargingNeeds request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyEVChargingNeedsResponseDelegate?  OnNotifyEVChargingNeedsResponse;

            #endregion

            #region SendTransactionEvent

            /// <summary>
            /// An event fired whenever a TransactionEvent will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnTransactionEventRequestDelegate?   OnTransactionEventRequest;

            /// <summary>
            /// An event fired whenever a response to a TransactionEvent request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnTransactionEventResponseDelegate?  OnTransactionEventResponse;

            #endregion

            #region SendStatusNotification

            /// <summary>
            /// An event fired whenever a StatusNotification request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnStatusNotificationRequestDelegate?   OnStatusNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a StatusNotification request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnStatusNotificationResponseDelegate?  OnStatusNotificationResponse;

            #endregion

            #region SendMeterValues

            /// <summary>
            /// An event fired whenever a MeterValues request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnMeterValuesRequestDelegate?   OnMeterValuesRequest;

            /// <summary>
            /// An event fired whenever a response to a MeterValues request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnMeterValuesResponseDelegate?  OnMeterValuesResponse;

            #endregion

            #region NotifyChargingLimit

            /// <summary>
            /// An event fired whenever a NotifyChargingLimit request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyChargingLimitRequestDelegate?   OnNotifyChargingLimitRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyChargingLimit request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyChargingLimitResponseDelegate?  OnNotifyChargingLimitResponse;

            #endregion

            #region SendClearedChargingLimit

            /// <summary>
            /// An event fired whenever a ClearedChargingLimit request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnClearedChargingLimitRequestDelegate?   OnClearedChargingLimitRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearedChargingLimit request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnClearedChargingLimitResponseDelegate?  OnClearedChargingLimitResponse;

            #endregion

            #region ReportChargingProfiles

            /// <summary>
            /// An event fired whenever a ReportChargingProfiles request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnReportChargingProfilesRequestDelegate?   OnReportChargingProfilesRequest;

            /// <summary>
            /// An event fired whenever a response to a ReportChargingProfiles request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnReportChargingProfilesResponseDelegate?  OnReportChargingProfilesResponse;

            #endregion

            #region NotifyEVChargingSchedule

            /// <summary>
            /// An event fired whenever a NotifyEVChargingSchedule request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyEVChargingScheduleRequestDelegate?   OnNotifyEVChargingScheduleRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyEVChargingSchedule request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyEVChargingScheduleResponseDelegate?  OnNotifyEVChargingScheduleResponse;

            #endregion

            #region NotifyPriorityCharging

            /// <summary>
            /// An event fired whenever a NotifyPriorityCharging request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyPriorityChargingRequestDelegate?   OnNotifyPriorityChargingRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyPriorityCharging request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyPriorityChargingResponseDelegate?  OnNotifyPriorityChargingResponse;

            #endregion

            #region PullDynamicScheduleUpdate

            /// <summary>
            /// An event fired whenever a PullDynamicScheduleUpdate request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnPullDynamicScheduleUpdateRequestDelegate?   OnPullDynamicScheduleUpdateRequest;

            /// <summary>
            /// An event fired whenever a response to a PullDynamicScheduleUpdate request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnPullDynamicScheduleUpdateResponseDelegate?  OnPullDynamicScheduleUpdateResponse;

            #endregion


            #region NotifyDisplayMessages

            /// <summary>
            /// An event fired whenever a NotifyDisplayMessages request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyDisplayMessagesRequestDelegate?   OnNotifyDisplayMessagesRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyDisplayMessages request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyDisplayMessagesResponseDelegate?  OnNotifyDisplayMessagesResponse;

            #endregion

            #region NotifyCustomerInformation

            /// <summary>
            /// An event fired whenever a NotifyCustomerInformation request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyCustomerInformationRequestDelegate?   OnNotifyCustomerInformationRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyCustomerInformation request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnNotifyCustomerInformationResponseDelegate?  OnNotifyCustomerInformationResponse;

            #endregion


            // Binary Data Streams Extensions

            #region TransferBinaryData

            /// <summary>
            /// An event fired whenever a BinaryDataTransfer request will be sent to the CSMS.
            /// </summary>
            public event OCPPv2_1.CS.OnBinaryDataTransferRequestDelegate?   OnBinaryDataTransferRequest;

            /// <summary>
            /// An event fired whenever a response to a BinaryDataTransfer request was received.
            /// </summary>
            public event OCPPv2_1.CS.OnBinaryDataTransferResponseDelegate?  OnBinaryDataTransferResponse;

            #endregion

            #endregion

            #region Charging Station <- CSMS

            //ToDo: Are those events really required here?
            public event CS.OnResetDelegate?                           OnReset;
            public event CS.OnUpdateFirmwareDelegate?                  OnUpdateFirmware;
            public event CS.OnPublishFirmwareDelegate?                 OnPublishFirmware;
            public event CS.OnUnpublishFirmwareDelegate?               OnUnpublishFirmware;
            public event CS.OnGetBaseReportDelegate?                   OnGetBaseReport;
            public event CS.OnGetReportDelegate?                       OnGetReport;
            public event CS.OnGetLogDelegate?                          OnGetLog;
            public event CS.OnSetVariablesDelegate?                    OnSetVariables;
            public event CS.OnGetVariablesDelegate?                    OnGetVariables;
            public event CS.OnSetMonitoringBaseDelegate?               OnSetMonitoringBase;
            public event CS.OnGetMonitoringReportDelegate?             OnGetMonitoringReport;
            public event CS.OnSetMonitoringLevelDelegate?              OnSetMonitoringLevel;
            public event CS.OnSetVariableMonitoringDelegate?           OnSetVariableMonitoring;
            public event CS.OnClearVariableMonitoringDelegate?         OnClearVariableMonitoring;
            public event CS.OnSetNetworkProfileDelegate?               OnSetNetworkProfile;
            public event CS.OnChangeAvailabilityDelegate?              OnChangeAvailability;
            public event CS.OnTriggerMessageDelegate?                  OnTriggerMessage;
            public event CS.OnIncomingDataTransferDelegate?            OnIncomingDataTransfer;

            public event CS.OnCertificateSignedDelegate?               OnCertificateSigned;
            public event CS.OnInstallCertificateDelegate?              OnInstallCertificate;
            public event CS.OnGetInstalledCertificateIdsDelegate?      OnGetInstalledCertificateIds;
            public event CS.OnDeleteCertificateDelegate?               OnDeleteCertificate;
            public event CS.OnNotifyCRLDelegate?                       OnNotifyCRL;

            public event CS.OnGetLocalListVersionDelegate?             OnGetLocalListVersion;
            public event CS.OnSendLocalListDelegate?                   OnSendLocalList;
            public event CS.OnClearCacheDelegate?                      OnClearCache;

            public event CS.OnReserveNowDelegate?                      OnReserveNow;
            public event CS.OnCancelReservationDelegate?               OnCancelReservation;
            public event CS.OnRequestStartTransactionDelegate?         OnRequestStartTransaction;
            public event CS.OnRequestStopTransactionDelegate?          OnRequestStopTransaction;
            public event CS.OnGetTransactionStatusDelegate?            OnGetTransactionStatus;
            public event CS.OnSetChargingProfileDelegate?              OnSetChargingProfile;
            public event CS.OnGetChargingProfilesDelegate?             OnGetChargingProfiles;
            public event CS.OnClearChargingProfileDelegate?            OnClearChargingProfile;
            public event CS.OnGetCompositeScheduleDelegate?            OnGetCompositeSchedule;
            public event CS.OnUpdateDynamicScheduleDelegate?           OnUpdateDynamicSchedule;
            public event CS.OnNotifyAllowedEnergyTransferDelegate?     OnNotifyAllowedEnergyTransfer;
            public event CS.OnUsePriorityChargingDelegate?             OnUsePriorityCharging;
            public event CS.OnUnlockConnectorDelegate?                 OnUnlockConnector;

            public event CS.OnAFRRSignalDelegate?                      OnAFRRSignal;

            public event CS.OnSetDisplayMessageDelegate?               OnSetDisplayMessage;
            public event CS.OnGetDisplayMessagesDelegate?              OnGetDisplayMessages;
            public event CS.OnClearDisplayMessageDelegate?             OnClearDisplayMessage;
            public event CS.OnCostUpdatedDelegate?                     OnCostUpdated;
            public event CS.OnCustomerInformationDelegate?             OnCustomerInformation;

            // Binary Data Streams Extensions
            public event CS.OnIncomingBinaryDataTransferDelegate?      OnIncomingBinaryDataTransfer;
            public event CS.OnGetFileDelegate?                         OnGetFile;
            public event CS.OnSendFileDelegate?                        OnSendFile;
            public event CS.OnDeleteFileDelegate?                      OnDeleteFile;

            // E2E Security Extensions
            public event CS.OnAddSignaturePolicyDelegate?              OnAddSignaturePolicy;
            public event CS.OnUpdateSignaturePolicyDelegate?           OnUpdateSignaturePolicy;
            public event CS.OnDeleteSignaturePolicyDelegate?           OnDeleteSignaturePolicy;
            public event CS.OnAddUserRoleDelegate?                     OnAddUserRole;
            public event CS.OnUpdateUserRoleDelegate?                  OnUpdateUserRole;
            public event CS.OnDeleteUserRoleDelegate?                  OnDeleteUserRole;


            #region Reset

            /// <summary>
            /// An event fired whenever a Reset request was received from the CSMS.
            /// </summary>
            public event CS.OnResetRequestDelegate?   OnResetRequest;

            /// <summary>
            /// An event fired whenever a response to a Reset request was sent.
            /// </summary>
            public event CS.OnResetResponseDelegate?  OnResetResponse;

            #endregion

            #region UpdateFirmware

            /// <summary>
            /// An event fired whenever an UpdateFirmware request was received from the CSMS.
            /// </summary>
            public event CS.OnUpdateFirmwareRequestDelegate?   OnUpdateFirmwareRequest;

            /// <summary>
            /// An event fired whenever a response to an UpdateFirmware request was sent.
            /// </summary>
            public event CS.OnUpdateFirmwareResponseDelegate?  OnUpdateFirmwareResponse;

            #endregion

            #region PublishFirmware

            /// <summary>
            /// An event fired whenever a PublishFirmware request was received from the CSMS.
            /// </summary>
            public event CS.OnPublishFirmwareRequestDelegate?   OnPublishFirmwareRequest;

            /// <summary>
            /// An event fired whenever a response to a PublishFirmware request was sent.
            /// </summary>
            public event CS.OnPublishFirmwareResponseDelegate?  OnPublishFirmwareResponse;

            #endregion

            #region UnpublishFirmware

            /// <summary>
            /// An event fired whenever an UnpublishFirmware request was received from the CSMS.
            /// </summary>
            public event CS.OnUnpublishFirmwareRequestDelegate?   OnUnpublishFirmwareRequest;

            /// <summary>
            /// An event fired whenever a response to an UnpublishFirmware request was sent.
            /// </summary>
            public event CS.OnUnpublishFirmwareResponseDelegate?  OnUnpublishFirmwareResponse;

            #endregion

            #region GetBaseReport

            /// <summary>
            /// An event fired whenever a GetBaseReport request was received from the CSMS.
            /// </summary>
            public event CS.OnGetBaseReportRequestDelegate?   OnGetBaseReportRequest;

            /// <summary>
            /// An event fired whenever a response to a GetBaseReport request was sent.
            /// </summary>
            public event CS.OnGetBaseReportResponseDelegate?  OnGetBaseReportResponse;

            #endregion

            #region GetReport

            /// <summary>
            /// An event fired whenever a GetReport request was received from the CSMS.
            /// </summary>
            public event CS.OnGetReportRequestDelegate?   OnGetReportRequest;

            /// <summary>
            /// An event fired whenever a response to a GetReport request was sent.
            /// </summary>
            public event CS.OnGetReportResponseDelegate?  OnGetReportResponse;

            #endregion

            #region GetLog

            /// <summary>
            /// An event fired whenever a GetLog request was received from the CSMS.
            /// </summary>
            public event CS.OnGetLogRequestDelegate?   OnGetLogRequest;

            /// <summary>
            /// An event fired whenever a response to a GetLog request was sent.
            /// </summary>
            public event CS.OnGetLogResponseDelegate?  OnGetLogResponse;

            #endregion

            #region SetVariables

            /// <summary>
            /// An event fired whenever a SetVariables request was received from the CSMS.
            /// </summary>
            public event CS.OnSetVariablesRequestDelegate?   OnSetVariablesRequest;

            /// <summary>
            /// An event fired whenever a response to a SetVariables request was sent.
            /// </summary>
            public event CS.OnSetVariablesResponseDelegate?  OnSetVariablesResponse;

            #endregion

            #region GetVariables

            /// <summary>
            /// An event fired whenever a GetVariables request was received from the CSMS.
            /// </summary>
            public event CS.OnGetVariablesRequestDelegate?   OnGetVariablesRequest;

            /// <summary>
            /// An event fired whenever a response to a GetVariables request was sent.
            /// </summary>
            public event CS.OnGetVariablesResponseDelegate?  OnGetVariablesResponse;

            #endregion

            #region SetMonitoringBase

            /// <summary>
            /// An event fired whenever a SetMonitoringBase request was received from the CSMS.
            /// </summary>
            public event CS.OnSetMonitoringBaseRequestDelegate?   OnSetMonitoringBaseRequest;

            /// <summary>
            /// An event fired whenever a response to a SetMonitoringBase request was sent.
            /// </summary>
            public event CS.OnSetMonitoringBaseResponseDelegate?  OnSetMonitoringBaseResponse;

            #endregion

            #region GetMonitoringReport

            /// <summary>
            /// An event fired whenever a GetMonitoringReport request was received from the CSMS.
            /// </summary>
            public event CS.OnGetMonitoringReportRequestDelegate?   OnGetMonitoringReportRequest;

            /// <summary>
            /// An event fired whenever a response to a GetMonitoringReport request was sent.
            /// </summary>
            public event CS.OnGetMonitoringReportResponseDelegate?  OnGetMonitoringReportResponse;

            #endregion

            #region SetMonitoringLevel

            /// <summary>
            /// An event fired whenever a SetMonitoringLevel request was received from the CSMS.
            /// </summary>
            public event CS.OnSetMonitoringLevelRequestDelegate?   OnSetMonitoringLevelRequest;

            /// <summary>
            /// An event fired whenever a response to a SetMonitoringLevel request was sent.
            /// </summary>
            public event CS.OnSetMonitoringLevelResponseDelegate?  OnSetMonitoringLevelResponse;

            #endregion

            #region SetVariableMonitoring

            /// <summary>
            /// An event fired whenever a SetVariableMonitoring request was received from the CSMS.
            /// </summary>
            public event CS.OnSetVariableMonitoringRequestDelegate?   OnSetVariableMonitoringRequest;

            /// <summary>
            /// An event fired whenever a response to a SetVariableMonitoring request was sent.
            /// </summary>
            public event CS.OnSetVariableMonitoringResponseDelegate?  OnSetVariableMonitoringResponse;

            #endregion

            #region ClearVariableMonitoring

            /// <summary>
            /// An event fired whenever a ClearVariableMonitoring request was received from the CSMS.
            /// </summary>
            public event CS.OnClearVariableMonitoringRequestDelegate?   OnClearVariableMonitoringRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearVariableMonitoring request was sent.
            /// </summary>
            public event CS.OnClearVariableMonitoringResponseDelegate?  OnClearVariableMonitoringResponse;

            #endregion

            #region SetNetworkProfile

            /// <summary>
            /// An event fired whenever a SetNetworkProfile request was received from the CSMS.
            /// </summary>
            public event CS.OnSetNetworkProfileRequestDelegate?   OnSetNetworkProfileRequest;

            /// <summary>
            /// An event fired whenever a response to a SetNetworkProfile request was sent.
            /// </summary>
            public event CS.OnSetNetworkProfileResponseDelegate?  OnSetNetworkProfileResponse;

            #endregion

            #region ChangeAvailability

            /// <summary>
            /// An event fired whenever a ChangeAvailability request was received from the CSMS.
            /// </summary>
            public event CS.OnChangeAvailabilityRequestDelegate?   OnChangeAvailabilityRequest;

            /// <summary>
            /// An event fired whenever a response to a ChangeAvailability request was sent.
            /// </summary>
            public event CS.OnChangeAvailabilityResponseDelegate?  OnChangeAvailabilityResponse;

            #endregion

            #region TriggerMessage

            /// <summary>
            /// An event fired whenever a TriggerMessage request was received from the CSMS.
            /// </summary>
            public event CS.OnTriggerMessageRequestDelegate?   OnTriggerMessageRequest;

            /// <summary>
            /// An event fired whenever a response to a TriggerMessage request was sent.
            /// </summary>
            public event CS.OnTriggerMessageResponseDelegate?  OnTriggerMessageResponse;

            #endregion

            #region OnIncomingDataTransferRequest/-Response

            /// <summary>
            /// An event sent whenever a data transfer request was sent.
            /// </summary>
            public event CS.OnIncomingDataTransferRequestDelegate?   OnIncomingDataTransferRequest;

            /// <summary>
            /// An event sent whenever a response to a data transfer request was sent.
            /// </summary>
            public event CS.OnIncomingDataTransferResponseDelegate?  OnIncomingDataTransferResponse;

            #endregion


            #region SendSignedCertificate

            /// <summary>
            /// An event fired whenever a SignedCertificate request was received from the CSMS.
            /// </summary>
            public event CS.OnCertificateSignedRequestDelegate?   OnCertificateSignedRequest;

            /// <summary>
            /// An event fired whenever a response to a SignedCertificate request was sent.
            /// </summary>
            public event CS.OnCertificateSignedResponseDelegate?  OnCertificateSignedResponse;

            #endregion

            #region InstallCertificate

            /// <summary>
            /// An event fired whenever an InstallCertificate request was received from the CSMS.
            /// </summary>
            public event CS.OnInstallCertificateRequestDelegate?   OnInstallCertificateRequest;

            /// <summary>
            /// An event fired whenever a response to an InstallCertificate request was sent.
            /// </summary>
            public event CS.OnInstallCertificateResponseDelegate?  OnInstallCertificateResponse;

            #endregion

            #region GetInstalledCertificateIds

            /// <summary>
            /// An event fired whenever a GetInstalledCertificateIds request was received from the CSMS.
            /// </summary>
            public event CS.OnGetInstalledCertificateIdsRequestDelegate?   OnGetInstalledCertificateIdsRequest;

            /// <summary>
            /// An event fired whenever a response to a GetInstalledCertificateIds request was sent.
            /// </summary>
            public event CS.OnGetInstalledCertificateIdsResponseDelegate?  OnGetInstalledCertificateIdsResponse;

            #endregion

            #region DeleteCertificate

            /// <summary>
            /// An event fired whenever a DeleteCertificate request was received from the CSMS.
            /// </summary>
            public event CS.OnDeleteCertificateRequestDelegate?   OnDeleteCertificateRequest;

            /// <summary>
            /// An event fired whenever a response to a DeleteCertificate request was sent.
            /// </summary>
            public event CS.OnDeleteCertificateResponseDelegate?  OnDeleteCertificateResponse;

            #endregion

            #region NotifyCRL

            /// <summary>
            /// An event fired whenever a NotifyCRL request was received from the CSMS.
            /// </summary>
            public event CS.OnNotifyCRLRequestDelegate?   OnNotifyCRLRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyCRL request was sent.
            /// </summary>
            public event CS.OnNotifyCRLResponseDelegate?  OnNotifyCRLResponse;

            #endregion


            #region GetLocalListVersion

            /// <summary>
            /// An event fired whenever a GetLocalListVersion request was received from the CSMS.
            /// </summary>
            public event CS.OnGetLocalListVersionRequestDelegate?   OnGetLocalListVersionRequest;

            /// <summary>
            /// An event fired whenever a response to a GetLocalListVersion request was sent.
            /// </summary>
            public event CS.OnGetLocalListVersionResponseDelegate?  OnGetLocalListVersionResponse;

            #endregion

            #region SendLocalList

            /// <summary>
            /// An event fired whenever a SendLocalList request was received from the CSMS.
            /// </summary>
            public event CS.OnSendLocalListRequestDelegate?   OnSendLocalListRequest;

            /// <summary>
            /// An event fired whenever a response to a SendLocalList request was sent.
            /// </summary>
            public event CS.OnSendLocalListResponseDelegate?  OnSendLocalListResponse;

            #endregion

            #region ClearCache

            /// <summary>
            /// An event fired whenever a ClearCache request was received from the CSMS.
            /// </summary>
            public event CS.OnClearCacheRequestDelegate?   OnClearCacheRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearCache request was sent.
            /// </summary>
            public event CS.OnClearCacheResponseDelegate?  OnClearCacheResponse;

            #endregion


            #region ReserveNow

            /// <summary>
            /// An event fired whenever a ReserveNow request was received from the CSMS.
            /// </summary>
            public event CS.OnReserveNowRequestDelegate?   OnReserveNowRequest;

            /// <summary>
            /// An event fired whenever a response to a ReserveNow request was sent.
            /// </summary>
            public event CS.OnReserveNowResponseDelegate?  OnReserveNowResponse;

            #endregion

            #region CancelReservation

            /// <summary>
            /// An event fired whenever a CancelReservation request was received from the CSMS.
            /// </summary>
            public event CS.OnCancelReservationRequestDelegate?   OnCancelReservationRequest;

            /// <summary>
            /// An event fired whenever a response to a CancelReservation request was sent.
            /// </summary>
            public event CS.OnCancelReservationResponseDelegate?  OnCancelReservationResponse;

            #endregion

            #region StartCharging

            /// <summary>
            /// An event fired whenever a RequestStartTransaction request was received from the CSMS.
            /// </summary>
            public event CS.OnRequestStartTransactionRequestDelegate?   OnRequestStartTransactionRequest;

            /// <summary>
            /// An event fired whenever a response to a RequestStartTransaction request was sent.
            /// </summary>
            public event CS.OnRequestStartTransactionResponseDelegate?  OnRequestStartTransactionResponse;

            #endregion

            #region StopCharging

            /// <summary>
            /// An event fired whenever a RequestStopTransaction request was received from the CSMS.
            /// </summary>
            public event CS.OnRequestStopTransactionRequestDelegate?   OnRequestStopTransactionRequest;

            /// <summary>
            /// An event fired whenever a response to a RequestStopTransaction request was sent.
            /// </summary>
            public event CS.OnRequestStopTransactionResponseDelegate?  OnRequestStopTransactionResponse;

            #endregion

            #region GetTransactionStatus

            /// <summary>
            /// An event fired whenever a GetTransactionStatus request was received from the CSMS.
            /// </summary>
            public event CS.OnGetTransactionStatusRequestDelegate?   OnGetTransactionStatusRequest;

            /// <summary>
            /// An event fired whenever a response to a GetTransactionStatus request was sent.
            /// </summary>
            public event CS.OnGetTransactionStatusResponseDelegate?  OnGetTransactionStatusResponse;

            #endregion

            #region SetChargingProfile

            /// <summary>
            /// An event fired whenever a SetChargingProfile request was received from the CSMS.
            /// </summary>
            public event CS.OnSetChargingProfileRequestDelegate?   OnSetChargingProfileRequest;

            /// <summary>
            /// An event fired whenever a response to a SetChargingProfile request was sent.
            /// </summary>
            public event CS.OnSetChargingProfileResponseDelegate?  OnSetChargingProfileResponse;

            #endregion

            #region GetChargingProfiles

            /// <summary>
            /// An event fired whenever a GetChargingProfiles request was received from the CSMS.
            /// </summary>
            public event CS.OnGetChargingProfilesRequestDelegate?   OnGetChargingProfilesRequest;

            /// <summary>
            /// An event fired whenever a response to a GetChargingProfiles request was sent.
            /// </summary>
            public event CS.OnGetChargingProfilesResponseDelegate?  OnGetChargingProfilesResponse;

            #endregion

            #region ClearChargingProfile

            /// <summary>
            /// An event fired whenever a ClearChargingProfile request was received from the CSMS.
            /// </summary>
            public event CS.OnClearChargingProfileRequestDelegate?   OnClearChargingProfileRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearChargingProfile request was sent.
            /// </summary>
            public event CS.OnClearChargingProfileResponseDelegate?  OnClearChargingProfileResponse;

            #endregion

            #region GetCompositeSchedule

            /// <summary>
            /// An event fired whenever a GetCompositeSchedule request was received from the CSMS.
            /// </summary>
            public event CS.OnGetCompositeScheduleRequestDelegate?   OnGetCompositeScheduleRequest;

            /// <summary>
            /// An event fired whenever a response to a GetCompositeSchedule request was sent.
            /// </summary>
            public event CS.OnGetCompositeScheduleResponseDelegate?  OnGetCompositeScheduleResponse;

            #endregion

            #region UpdateDynamicSchedule

            /// <summary>
            /// An event fired whenever an UpdateDynamicSchedule request was received from the CSMS.
            /// </summary>
            public event CS.OnUpdateDynamicScheduleRequestDelegate?   OnUpdateDynamicScheduleRequest;

            /// <summary>
            /// An event fired whenever a response to an UpdateDynamicSchedule request was sent.
            /// </summary>
            public event CS.OnUpdateDynamicScheduleResponseDelegate?  OnUpdateDynamicScheduleResponse;

            #endregion

            #region NotifyAllowedEnergyTransfer

            /// <summary>
            /// An event fired whenever a NotifyAllowedEnergyTransfer request was received from the CSMS.
            /// </summary>
            public event CS.OnNotifyAllowedEnergyTransferRequestDelegate?   OnNotifyAllowedEnergyTransferRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyAllowedEnergyTransfer request was sent.
            /// </summary>
            public event CS.OnNotifyAllowedEnergyTransferResponseDelegate?  OnNotifyAllowedEnergyTransferResponse;

            #endregion

            #region UsePriorityCharging

            /// <summary>
            /// An event fired whenever a UsePriorityCharging request was received from the CSMS.
            /// </summary>
            public event CS.OnUsePriorityChargingRequestDelegate?   OnUsePriorityChargingRequest;

            /// <summary>
            /// An event fired whenever a response to a UsePriorityCharging request was sent.
            /// </summary>
            public event CS.OnUsePriorityChargingResponseDelegate?  OnUsePriorityChargingResponse;

            #endregion

            #region UnlockConnector

            /// <summary>
            /// An event fired whenever an UnlockConnector request was received from the CSMS.
            /// </summary>
            public event CS.OnUnlockConnectorRequestDelegate?   OnUnlockConnectorRequest;

            /// <summary>
            /// An event fired whenever a response to an UnlockConnector request was sent.
            /// </summary>
            public event CS.OnUnlockConnectorResponseDelegate?  OnUnlockConnectorResponse;

            #endregion


            #region AFRRSignal

            /// <summary>
            /// An event fired whenever an AFRR signal request was received from the CSMS.
            /// </summary>
            public event CS.OnAFRRSignalRequestDelegate?   OnAFRRSignalRequest;

            /// <summary>
            /// An event fired whenever a response to an AFRR signal request was sent.
            /// </summary>
            public event CS.OnAFRRSignalResponseDelegate?  OnAFRRSignalResponse;

            #endregion


            #region SetDisplayMessage

            /// <summary>
            /// An event fired whenever a SetDisplayMessage request was received from the CSMS.
            /// </summary>
            public event CS.OnSetDisplayMessageRequestDelegate?   OnSetDisplayMessageRequest;

            /// <summary>
            /// An event fired whenever a response to a SetDisplayMessage request was sent.
            /// </summary>
            public event CS.OnSetDisplayMessageResponseDelegate?  OnSetDisplayMessageResponse;

            #endregion

            #region GetDisplayMessages

            /// <summary>
            /// An event fired whenever a GetDisplayMessages request was received from the CSMS.
            /// </summary>
            public event CS.OnGetDisplayMessagesRequestDelegate?   OnGetDisplayMessagesRequest;

            /// <summary>
            /// An event fired whenever a response to a GetDisplayMessages request was sent.
            /// </summary>
            public event CS.OnGetDisplayMessagesResponseDelegate?  OnGetDisplayMessagesResponse;

            #endregion

            #region ClearDisplayMessage

            /// <summary>
            /// An event fired whenever a ClearDisplayMessage request was received from the CSMS.
            /// </summary>
            public event CS.OnClearDisplayMessageRequestDelegate?   OnClearDisplayMessageRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearDisplayMessage request was sent.
            /// </summary>
            public event CS.OnClearDisplayMessageResponseDelegate?  OnClearDisplayMessageResponse;

            #endregion

            #region SendCostUpdated

            /// <summary>
            /// An event fired whenever a CostUpdated request was received from the CSMS.
            /// </summary>
            public event CS.OnCostUpdatedRequestDelegate?   OnCostUpdatedRequest;

            /// <summary>
            /// An event fired whenever a response to a CostUpdated request was sent.
            /// </summary>
            public event CS.OnCostUpdatedResponseDelegate?  OnCostUpdatedResponse;

            #endregion

            #region RequestCustomerInformation

            /// <summary>
            /// An event fired whenever a CustomerInformation request was received from the CSMS.
            /// </summary>
            public event CS.OnCustomerInformationRequestDelegate?   OnCustomerInformationRequest;

            /// <summary>
            /// An event fired whenever a response to a CustomerInformation request was sent.
            /// </summary>
            public event CS.OnCustomerInformationResponseDelegate?  OnCustomerInformationResponse;

            #endregion


            // Binary Data Streams Extensions

            #region OnIncomingBinaryDataTransferRequest/-Response

            /// <summary>
            /// An event sent whenever a binary data transfer request was sent.
            /// </summary>
            public event CS.OnIncomingBinaryDataTransferRequestDelegate?   OnIncomingBinaryDataTransferRequest;

            /// <summary>
            /// An event sent whenever a response to a binary data transfer request was sent.
            /// </summary>
            public event CS.OnIncomingBinaryDataTransferResponseDelegate?  OnIncomingBinaryDataTransferResponse;

            #endregion

            #region OnGetFileRequest/-Response

            /// <summary>
            /// An event sent whenever a GetFile request was sent.
            /// </summary>
            public event CS.OnGetFileRequestDelegate?   OnGetFileRequest;

            /// <summary>
            /// An event sent whenever a response to a GetFile request was sent.
            /// </summary>
            public event CS.OnGetFileResponseDelegate?  OnGetFileResponse;

            #endregion

            #region OnSendFileRequest/-Response

            /// <summary>
            /// An event sent whenever a SendFile request was sent.
            /// </summary>
            public event CS.OnSendFileRequestDelegate?   OnSendFileRequest;

            /// <summary>
            /// An event sent whenever a response to a SendFile request was sent.
            /// </summary>
            public event CS.OnSendFileResponseDelegate?  OnSendFileResponse;

            #endregion

            #region OnDeleteFileRequest/-Response

            /// <summary>
            /// An event sent whenever a DeleteFile request was sent.
            /// </summary>
            public event CS.OnDeleteFileRequestDelegate?   OnDeleteFileRequest;

            /// <summary>
            /// An event sent whenever a response to a DeleteFile request was sent.
            /// </summary>
            public event CS.OnDeleteFileResponseDelegate?  OnDeleteFileResponse;

            #endregion


            // E2E Security Extensions

            #region AddSignaturePolicy

            /// <summary>
            /// An event fired whenever a AddSignaturePolicy request was received from the CSMS.
            /// </summary>
            public event CS.OnAddSignaturePolicyRequestDelegate?   OnAddSignaturePolicyRequest;

            /// <summary>
            /// An event fired whenever a response to a AddSignaturePolicy request was sent.
            /// </summary>
            public event CS.OnAddSignaturePolicyResponseDelegate?  OnAddSignaturePolicyResponse;

            #endregion

            #region UpdateSignaturePolicy

            /// <summary>
            /// An event fired whenever a UpdateSignaturePolicy request was received from the CSMS.
            /// </summary>
            public event CS.OnUpdateSignaturePolicyRequestDelegate?   OnUpdateSignaturePolicyRequest;

            /// <summary>
            /// An event fired whenever a response to a UpdateSignaturePolicy request was sent.
            /// </summary>
            public event CS.OnUpdateSignaturePolicyResponseDelegate?  OnUpdateSignaturePolicyResponse;

            #endregion

            #region DeleteSignaturePolicy

            /// <summary>
            /// An event fired whenever a DeleteSignaturePolicy request was received from the CSMS.
            /// </summary>
            public event CS.OnDeleteSignaturePolicyRequestDelegate?   OnDeleteSignaturePolicyRequest;

            /// <summary>
            /// An event fired whenever a response to a DeleteSignaturePolicy request was sent.
            /// </summary>
            public event CS.OnDeleteSignaturePolicyResponseDelegate?  OnDeleteSignaturePolicyResponse;

            #endregion

            #region AddUserRole

            /// <summary>
            /// An event fired whenever a AddUserRole request was received from the CSMS.
            /// </summary>
            public event CS.OnAddUserRoleRequestDelegate?   OnAddUserRoleRequest;

            /// <summary>
            /// An event fired whenever a response to a AddUserRole request was sent.
            /// </summary>
            public event CS.OnAddUserRoleResponseDelegate?  OnAddUserRoleResponse;

            #endregion

            #region UpdateUserRole

            /// <summary>
            /// An event fired whenever a UpdateUserRole request was received from the CSMS.
            /// </summary>
            public event CS.OnUpdateUserRoleRequestDelegate?   OnUpdateUserRoleRequest;

            /// <summary>
            /// An event fired whenever a response to a UpdateUserRole request was sent.
            /// </summary>
            public event CS.OnUpdateUserRoleResponseDelegate?  OnUpdateUserRoleResponse;

            #endregion

            #region DeleteUserRole

            /// <summary>
            /// An event fired whenever a DeleteUserRole request was received from the CSMS.
            /// </summary>
            public event CS.OnDeleteUserRoleRequestDelegate?   OnDeleteUserRoleRequest;

            /// <summary>
            /// An event fired whenever a response to a DeleteUserRole request was sent.
            /// </summary>
            public event CS.OnDeleteUserRoleResponseDelegate?  OnDeleteUserRoleResponse;

            #endregion


            // E2E Charging Tariffs Extensions

            #region SetDefaultChargingTariff

            /// <summary>
            /// An event fired whenever a SetDefaultChargingTariff request was received from the CSMS.
            /// </summary>
            public event CS.OnSetDefaultChargingTariffRequestDelegate?   OnSetDefaultChargingTariffRequest;

            public event CS.OnSetDefaultChargingTariffDelegate?          OnSetDefaultChargingTariff;

            /// <summary>
            /// An event fired whenever a response to a SetDefaultChargingTariff request was sent.
            /// </summary>
            public event CS.OnSetDefaultChargingTariffResponseDelegate?  OnSetDefaultChargingTariffResponse;

            #endregion

            #region GetDefaultChargingTariff

            /// <summary>
            /// An event fired whenever a GetDefaultChargingTariff request was received from the CSMS.
            /// </summary>
            public event CS.OnGetDefaultChargingTariffRequestDelegate?   OnGetDefaultChargingTariffRequest;

            public event CS.OnGetDefaultChargingTariffDelegate?          OnGetDefaultChargingTariff;

            /// <summary>
            /// An event fired whenever a response to a GetDefaultChargingTariff request was sent.
            /// </summary>
            public event CS.OnGetDefaultChargingTariffResponseDelegate?  OnGetDefaultChargingTariffResponse;

            #endregion

            #region RemoveDefaultChargingTariff

            /// <summary>
            /// An event fired whenever a RemoveDefaultChargingTariff request was received from the CSMS.
            /// </summary>
            public event CS.OnRemoveDefaultChargingTariffRequestDelegate?   OnRemoveDefaultChargingTariffRequest;

            public event CS.OnRemoveDefaultChargingTariffDelegate?          OnRemoveDefaultChargingTariff;

            /// <summary>
            /// An event fired whenever a response to a RemoveDefaultChargingTariff request was sent.
            /// </summary>
            public event CS.OnRemoveDefaultChargingTariffResponseDelegate?  OnRemoveDefaultChargingTariffResponse;

            #endregion

            #endregion

            #endregion

            #region Constructor(s)

            /// <summary>
            /// Create a new charging station for testing.
            /// </summary>
            /// <param name="Id">The charging station identification.</param>
            /// <param name="VendorName">The charging station vendor identification.</param>
            /// <param name="Model">The charging station model identification.</param>
            /// 
            /// <param name="Description">An optional multi-language charging station description.</param>
            /// <param name="SerialNumber">An optional serial number of the charging station.</param>
            /// <param name="FirmwareVersion">An optional firmware version of the charging station.</param>
            /// <param name="MeterType">An optional meter type of the main power meter of the charging station.</param>
            /// <param name="MeterSerialNumber">An optional serial number of the main power meter of the charging station.</param>
            /// <param name="MeterPublicKey">An optional public key of the main power meter of the charging station.</param>
            /// 
            /// <param name="SendHeartbeatEvery">The time span between heartbeat requests.</param>
            /// 
            /// <param name="DefaultRequestTimeout">The default request timeout for all requests.</param>
            public ActingAsCS(TestNetworkingNode                 NetworkingNode,
                              String                             VendorName,
                              String                             Model,

                              I18NString?                        Description               = null,
                              String?                            SerialNumber              = null,
                              String?                            FirmwareVersion           = null,
                              Modem?                             Modem                     = null,

                              Boolean                            DisableSendHeartbeats     = false,
                              TimeSpan?                          SendHeartbeatEvery        = null,

                              Boolean                            DisableMaintenanceTasks   = false,
                              TimeSpan?                          MaintenanceEvery          = null,

                              TimeSpan?                          DefaultRequestTimeout     = null,
                              IHTTPAuthentication?               HTTPAuthentication        = null,
                              DNSClient?                         DNSClient                 = null,

                              SignaturePolicy?                   SignaturePolicy           = null)

            {

                if (VendorName.IsNullOrEmpty())
                    throw new ArgumentNullException(nameof(VendorName),  "The given charging station vendor must not be null or empty!");

                if (Model.     IsNullOrEmpty())
                    throw new ArgumentNullException(nameof(Model),       "The given charging station model must not be null or empty!");


                this.Id                       = NetworkingNode.Id;
                this.NetworkingNodeRef        = NetworkingNode;

                //this.Configuration = new Dictionary<String, ConfigurationData> {
                //    { "hello",          new ConfigurationData("world",    AccessRights.ReadOnly,  false) },
                //    { "changeMe",       new ConfigurationData("now",      AccessRights.ReadWrite, false) },
                //    { "doNotChangeMe",  new ConfigurationData("never",    AccessRights.ReadOnly,  false) },
                //    { "password",       new ConfigurationData("12345678", AccessRights.WriteOnly, false) }
                //};
                this.EnqueuedRequests         = new List<EnqueuedRequest>();

                this.VendorName               = VendorName;
                this.Model                    = Model;
                this.Description              = Description;
                this.SerialNumber             = SerialNumber;
                this.FirmwareVersion          = FirmwareVersion;
                this.Modem                    = Modem;

                this.DefaultRequestTimeout    = DefaultRequestTimeout ?? TimeSpan.FromMinutes(1);

                this.DisableSendHeartbeats    = DisableSendHeartbeats;
                this.SendHeartbeatEvery       = SendHeartbeatEvery    ?? DefaultSendHeartbeatEvery;
                this.SendHeartbeatTimer       = new Timer(
                                                    DoSendHeartbeatSync,
                                                    null,
                                                    this.SendHeartbeatEvery,
                                                    this.SendHeartbeatEvery
                                                );

                this.DisableMaintenanceTasks  = DisableMaintenanceTasks;
                this.MaintenanceEvery         = MaintenanceEvery      ?? DefaultMaintenanceEvery;
                //this.MaintenanceTimer         = new Timer(
                //                                    DoMaintenanceSync,
                //                                    null,
                //                                    this.MaintenanceEvery,
                //                                    this.MaintenanceEvery
                //                                );

                this.HTTPAuthentication       = HTTPAuthentication;
                this.DNSClient                = DNSClient;

                this.signaturePolicies.Add(SignaturePolicy ?? new SignaturePolicy());

            }

            #endregion


            private Task HandleErrors(String     Module,
                                      String     Caller,
                                      Exception  ExceptionOccured)
            {

                DebugX.LogException(ExceptionOccured, $"{Module}.{Caller}");

                return Task.CompletedTask;

            }


            #region ConnectWebSocket(...)

            public async Task<HTTPResponse?> ConnectWebSocket(String                               From,
                                                              String                               To,

                                                              URL                                  RemoteURL,
                                                              HTTPHostname?                        VirtualHostname              = null,
                                                              String?                              Description                  = null,
                                                              RemoteCertificateValidationHandler?  RemoteCertificateValidator   = null,
                                                              LocalCertificateSelectionHandler?    ClientCertificateSelector    = null,
                                                              X509Certificate?                     ClientCert                   = null,
                                                              SslProtocols?                        TLSProtocol                  = null,
                                                              Boolean?                             PreferIPv4                   = null,
                                                              String?                              HTTPUserAgent                = null,
                                                              IHTTPAuthentication?                 HTTPAuthentication           = null,
                                                              TimeSpan?                            RequestTimeout               = null,
                                                              TransmissionRetryDelayDelegate?      TransmissionRetryDelay       = null,
                                                              UInt16?                              MaxNumberOfRetries           = null,
                                                              UInt32?                              InternalBufferSize           = null,

                                                              IEnumerable<String>?                 SecWebSocketProtocols        = null,

                                                              Boolean                              DisableMaintenanceTasks      = false,
                                                              TimeSpan?                            MaintenanceEvery             = null,
                                                              Boolean                              DisableWebSocketPings        = false,
                                                              TimeSpan?                            WebSocketPingEvery           = null,
                                                              TimeSpan?                            SlowNetworkSimulationDelay   = null,

                                                              String?                              LoggingPath                  = null,
                                                              String?                              LoggingContext               = null,
                                                              LogfileCreatorDelegate?              LogfileCreator               = null,
                                                              HTTPClientLogger?                    HTTPLogger                   = null,
                                                              DNSClient?                           DNSClient                    = null)

            {

                var chargingStationWSClient = new CS.NetworkingNodeWSClient(
                                                  Id,
                                                  From,
                                                  To,

                                                  RemoteURL,
                                                  VirtualHostname,
                                                  Description,
                                                  PreferIPv4,
                                                  RemoteCertificateValidator,
                                                  ClientCertificateSelector,
                                                  ClientCert,
                                                  TLSProtocol,
                                                  HTTPUserAgent,
                                                  HTTPAuthentication ?? this.HTTPAuthentication,
                                                  RequestTimeout,
                                                  TransmissionRetryDelay,
                                                  MaxNumberOfRetries,
                                                  InternalBufferSize,

                                                  SecWebSocketProtocols ?? new[] { Version.WebSocketSubProtocolId },

                                                  DisableWebSocketPings,
                                                  WebSocketPingEvery,
                                                  SlowNetworkSimulationDelay,

                                                  DisableMaintenanceTasks,
                                                  MaintenanceEvery,

                                                  LoggingPath,
                                                  LoggingContext,
                                                  LogfileCreator,
                                                  HTTPLogger,
                                                  DNSClient ?? this.DNSClient
                                              );

                this.CSClient  = chargingStationWSClient;

                WireEvents(chargingStationWSClient);

                var response = await chargingStationWSClient.Connect();

                return response;

            }

            #endregion

            #region WireEvents(ChargingStationServer)


            private readonly ConcurrentDictionary<DisplayMessage_Id,     MessageInfo>     displayMessages   = new ();
            private readonly ConcurrentDictionary<Reservation_Id,        Reservation_Id>  reservations      = new ();
            private readonly ConcurrentDictionary<Transaction_Id,        Transaction>     transactions      = new ();
            private readonly ConcurrentDictionary<Transaction_Id,        Decimal>         totalCosts        = new ();
            private readonly ConcurrentDictionary<InstallCertificateUse, Certificate>     certificates      = new ();

            public void WireEvents(CS.INetworkingNodeServer ChargingStationServer)
            {

                #region OnReset

                ChargingStationServer.OnReset += async (timestamp,
                                                        sender,
                                                        connection,
                                                        request,
                                                        cancellationToken) => {

                    #region Send OnResetRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnResetRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnResetRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnResetRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.ResetResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.ResetResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid reset request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomResetRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.ResetResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming '{request.ResetType}' reset request{(request.EVSEId.HasValue ? $" for EVSE '{request.EVSEId}" : "")}'!");

                            // ResetType

                            // Reset entire charging station
                            if (!request.EVSEId.HasValue)
                            {

                                response = new OCPPv2_1.CS.ResetResponse(
                                               Request:      request,
                                               Status:       ResetStatus.Accepted,
                                               StatusInfo:   null,
                                               CustomData:   null
                                           );

                            }

                            // Unknown EVSE
                            else
                            {

                                response = new OCPPv2_1.CS.ResetResponse(
                                               Request:      request,
                                               Status:       ResetStatus.Rejected,
                                               StatusInfo:   null,
                                               CustomData:   null
                                           );

                            }

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomResetResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnResetResponse event

                    var responseLogger = OnResetResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnResetResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnResetResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnUpdateFirmware

                ChargingStationServer.OnUpdateFirmware += async (timestamp,
                                                                 sender,
                                                                 connection,
                                                                 request,
                                                                 cancellationToken) => {

                    #region Send OnUpdateFirmwareRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnUpdateFirmwareRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnUpdateFirmwareRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUpdateFirmwareRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.UpdateFirmwareResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.UpdateFirmwareResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid UpdateFirmware request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomUpdateFirmwareRequestSerializer,
                                     CustomFirmwareSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.UpdateFirmwareResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming UpdateFirmware request ({request.UpdateFirmwareRequestId}) for '" + request.Firmware.FirmwareURL + "'.");

                            // Firmware,
                            // UpdateFirmwareRequestId
                            // Retries
                            // RetryIntervals

                            response = new OCPPv2_1.CS.UpdateFirmwareResponse(
                                           Request:      request,
                                           Status:       UpdateFirmwareStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomUpdateFirmwareResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnUpdateFirmwareResponse event

                    var responseLogger = OnUpdateFirmwareResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnUpdateFirmwareResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUpdateFirmwareResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnPublishFirmware

                ChargingStationServer.OnPublishFirmware += async (timestamp,
                                                                  sender,
                                                                  connection,
                                                                  request,
                                                                  cancellationToken) => {

                    #region Send OnPublishFirmwareRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnPublishFirmwareRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnPublishFirmwareRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnPublishFirmwareRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.PublishFirmwareResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.PublishFirmwareResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid PublishFirmware request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomPublishFirmwareRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.PublishFirmwareResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming PublishFirmware request ({request.PublishFirmwareRequestId}) for '" + request.DownloadLocation + "'.");

                            // PublishFirmwareRequestId
                            // DownloadLocation
                            // MD5Checksum
                            // Retries
                            // RetryInterval

                            response = new OCPPv2_1.CS.PublishFirmwareResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomPublishFirmwareResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnPublishFirmwareResponse event

                    var responseLogger = OnPublishFirmwareResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnPublishFirmwareResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnPublishFirmwareResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnUnpublishFirmware

                ChargingStationServer.OnUnpublishFirmware += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnUnpublishFirmwareRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnUnpublishFirmwareRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnUnpublishFirmwareRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUnpublishFirmwareRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.UnpublishFirmwareResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.UnpublishFirmwareResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid UnpublishFirmware request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomUnpublishFirmwareRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.UnpublishFirmwareResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming UnpublishFirmware request for '" + request.MD5Checksum + "'.");

                            // MD5Checksum

                            response = new OCPPv2_1.CS.UnpublishFirmwareResponse(
                                           Request:      request,
                                           Status:       UnpublishFirmwareStatus.Unpublished,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomUnpublishFirmwareResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnUnpublishFirmwareResponse event

                    var responseLogger = OnUnpublishFirmwareResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnUnpublishFirmwareResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUnpublishFirmwareResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetBaseReport

                ChargingStationServer.OnGetBaseReport += async (timestamp,
                                                                sender,
                                                                connection,
                                                                request,
                                                                cancellationToken) => {

                    #region Send OnGetBaseReportRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetBaseReportRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetBaseReportRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetBaseReportRequest),
                                      e
                                  );
                        }

                    }

                                                                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetBaseReportResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetBaseReportResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetBaseReport request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetBaseReportRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetBaseReportResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetBaseReport request ({request.GetBaseReportRequestId}) accepted.");

                            // GetBaseReportRequestId
                            // ReportBase

                            response = new OCPPv2_1.CS.GetBaseReportResponse(
                                           Request:      request,
                                           Status:       GenericDeviceModelStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetBaseReportResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetBaseReportResponse event

                    var responseLogger = OnGetBaseReportResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetBaseReportResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetBaseReportResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetReport

                ChargingStationServer.OnGetReport += async (timestamp,
                                                            sender,
                                                            connection,
                                                            request,
                                                            cancellationToken) => {

                    #region Send OnGetReportRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetReportRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetReportRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetReportRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetReportResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetReportResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetReport request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetReportRequestSerializer,
                                     CustomComponentVariableSerializer,
                                     CustomComponentSerializer,
                                     CustomEVSESerializer,
                                     CustomVariableSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetReportResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetReport request ({request.GetReportRequestId}) accepted.");

                            // GetReportRequestId
                            // ComponentCriteria
                            // ComponentVariables

                            response = new OCPPv2_1.CS.GetReportResponse(
                                           Request:      request,
                                           Status:       GenericDeviceModelStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetReportResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetReportResponse event

                    var responseLogger = OnGetReportResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetReportResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetReportResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetLog

                ChargingStationServer.OnGetLog += async (timestamp,
                                                         sender,
                                                         connection,
                                                         request,
                                                         cancellationToken) => {

                    #region Send OnGetLogRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetLogRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetLogRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetLogRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetLogResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetLogResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetLog request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetLogRequestSerializer,
                                     CustomLogParametersSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetLogResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetLog request ({request.LogRequestId}) accepted.");

                            // LogType
                            // LogRequestId
                            // Log
                            // Retries
                            // RetryInterval

                            response = new OCPPv2_1.CS.GetLogResponse(
                                           Request:      request,
                                           Status:       LogStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetLogResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetLogResponse event

                    var responseLogger = OnGetLogResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetLogResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetLogResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSetVariables

                ChargingStationServer.OnSetVariables += async (timestamp,
                                                               sender,
                                                               connection,
                                                               request,
                                                               cancellationToken) => {

                    #region Send OnSetVariablesRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSetVariablesRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSetVariablesRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetVariablesRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SetVariablesResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SetVariablesResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SetVariables request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomSetVariablesRequestSerializer,
                                     CustomSetVariableDataSerializer,
                                     CustomComponentSerializer,
                                     CustomEVSESerializer,
                                     CustomVariableSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SetVariablesResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SetVariables request accepted.");

                            // VariableData

                            response = new OCPPv2_1.CS.SetVariablesResponse(
                                           Request:              request,
                                           SetVariableResults:   request.VariableData.Select(variableData => new SetVariableResult(
                                                                                                                 Status:                SetVariableStatus.Accepted,
                                                                                                                 Component:             variableData.Component,
                                                                                                                 Variable:              variableData.Variable,
                                                                                                                 AttributeType:         variableData.AttributeType,
                                                                                                                 AttributeStatusInfo:   null,
                                                                                                                 CustomData:            null
                                                                                                             )),
                                           CustomData:           null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSetVariablesResponseSerializer,
                            CustomSetVariableResultSerializer,
                            CustomComponentSerializer,
                            CustomEVSESerializer,
                            CustomVariableSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSetVariablesResponse event

                    var responseLogger = OnSetVariablesResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSetVariablesResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetVariablesResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetVariables

                ChargingStationServer.OnGetVariables += async (timestamp,
                                                               sender,
                                                               connection,
                                                               request,
                                                               cancellationToken) => {

                    #region Send OnGetVariablesRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetVariablesRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetVariablesRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetVariablesRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetVariablesResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetVariablesResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetVariables request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetVariablesRequestSerializer,
                                     CustomGetVariableDataSerializer,
                                     CustomComponentSerializer,
                                     CustomEVSESerializer,
                                     CustomVariableSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetVariablesResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetVariables request accepted.");

                            // VariableData

                            response = new OCPPv2_1.CS.GetVariablesResponse(
                                           Request:      request,
                                           Results:      request.VariableData.Select(variableData => new GetVariableResult(
                                                                                                         AttributeStatus:       GetVariableStatus.Accepted,
                                                                                                         Component:             variableData.Component,
                                                                                                         Variable:              variableData.Variable,
                                                                                                         AttributeValue:        "",
                                                                                                         AttributeType:         variableData.AttributeType,
                                                                                                         AttributeStatusInfo:   null,
                                                                                                         CustomData:            null
                                                                                                     )),
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetVariablesResponseSerializer,
                            CustomGetVariableResultSerializer,
                            CustomComponentSerializer,
                            CustomEVSESerializer,
                            CustomVariableSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetVariablesResponse event

                    var responseLogger = OnGetVariablesResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetVariablesResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetVariablesResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSetMonitoringBase

                ChargingStationServer.OnSetMonitoringBase += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnSetMonitoringBaseRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSetMonitoringBaseRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSetMonitoringBaseRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetMonitoringBaseRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SetMonitoringBaseResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SetMonitoringBaseResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SetMonitoringBase request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomSetMonitoringBaseRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SetMonitoringBaseResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SetMonitoringBase request accepted.");

                            // MonitoringBase

                            response = new OCPPv2_1.CS.SetMonitoringBaseResponse(
                                           Request:      request,
                                           Status:       GenericDeviceModelStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSetMonitoringBaseResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSetMonitoringBaseResponse event

                    var responseLogger = OnSetMonitoringBaseResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSetMonitoringBaseResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetMonitoringBaseResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetMonitoringReport

                ChargingStationServer.OnGetMonitoringReport += async (timestamp,
                                                                      sender,
                                                                      connection,
                                                                      request,
                                                                      cancellationToken) => {

                    #region Send OnGetMonitoringReportRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetMonitoringReportRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetMonitoringReportRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetMonitoringReportRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetMonitoringReportResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetMonitoringReportResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetMonitoringReport request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetMonitoringReportRequestSerializer,
                                     CustomComponentVariableSerializer,
                                     CustomComponentSerializer,
                                     CustomEVSESerializer,
                                     CustomVariableSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetMonitoringReportResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetMonitoringReport request ({request.GetMonitoringReportRequestId}) accepted.");

                            // GetMonitoringReportRequestId
                            // MonitoringCriteria
                            // ComponentVariables

                            response = new OCPPv2_1.CS.GetMonitoringReportResponse(
                                           Request:      request,
                                           Status:       GenericDeviceModelStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetMonitoringReportResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetMonitoringReportResponse event

                    var responseLogger = OnGetMonitoringReportResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetMonitoringReportResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetMonitoringReportResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSetMonitoringLevel

                ChargingStationServer.OnSetMonitoringLevel += async (timestamp,
                                                                     sender,
                                                                     connection,
                                                                     request,
                                                                     cancellationToken) => {

                    #region Send OnSetMonitoringLevelRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSetMonitoringLevelRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSetMonitoringLevelRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetMonitoringLevelRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SetMonitoringLevelResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SetMonitoringLevelResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SetMonitoringLevel request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomSetMonitoringLevelRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SetMonitoringLevelResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SetMonitoringLevel request accepted.");

                            // Severity

                            response = new OCPPv2_1.CS.SetMonitoringLevelResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSetMonitoringLevelResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSetMonitoringLevelResponse event

                    var responseLogger = OnSetMonitoringLevelResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSetMonitoringLevelResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetMonitoringLevelResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSetVariableMonitoring

                ChargingStationServer.OnSetVariableMonitoring += async (timestamp,
                                                                        sender,
                                                                        connection,
                                                                        request,
                                                                        cancellationToken) => {

                    #region Send OnSetVariableMonitoringRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSetVariableMonitoringRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSetVariableMonitoringRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetVariableMonitoringRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SetVariableMonitoringResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SetVariableMonitoringResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SetVariableMonitoring request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomSetVariableMonitoringRequestSerializer,
                                     CustomSetMonitoringDataSerializer,
                                     CustomComponentSerializer,
                                     CustomEVSESerializer,
                                     CustomVariableSerializer,
                                     CustomPeriodicEventStreamParametersSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SetVariableMonitoringResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SetMonitoringLevel request accepted.");

                            // MonitoringData

                            response = new OCPPv2_1.CS.SetVariableMonitoringResponse(
                                           Request:                request,
                                           SetMonitoringResults:   request.MonitoringData.Select(setMonitoringData => new SetMonitoringResult(
                                                                                                                          Status:                 SetMonitoringStatus.Accepted,
                                                                                                                          MonitorType:            setMonitoringData.MonitorType,
                                                                                                                          Severity:               setMonitoringData.Severity,
                                                                                                                          Component:              setMonitoringData.Component,
                                                                                                                          Variable:               setMonitoringData.Variable,
                                                                                                                          VariableMonitoringId:   setMonitoringData.VariableMonitoringId,
                                                                                                                          StatusInfo:             null,
                                                                                                                          CustomData:             null
                                                                                                                      )),
                                           CustomData:             null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSetVariableMonitoringResponseSerializer,
                            CustomSetMonitoringResultSerializer,
                            CustomComponentSerializer,
                            CustomEVSESerializer,
                            CustomVariableSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSetVariableMonitoringResponse event

                    var responseLogger = OnSetVariableMonitoringResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSetVariableMonitoringResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetVariableMonitoringResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnClearVariableMonitoring

                ChargingStationServer.OnClearVariableMonitoring += async (timestamp,
                                                                          sender,
                                                                          connection,
                                                                          request,
                                                                          cancellationToken) => {

                    #region Send OnClearVariableMonitoringRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnClearVariableMonitoringRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnClearVariableMonitoringRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearVariableMonitoringRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.ClearVariableMonitoringResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.ClearVariableMonitoringResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid ClearVariableMonitoring request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomClearVariableMonitoringRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.ClearVariableMonitoringResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming ClearVariableMonitoring request (VariableMonitoringIds: {request.VariableMonitoringIds.AggregateWith(", ")})");

                            // VariableMonitoringIds

                            response = new OCPPv2_1.CS.ClearVariableMonitoringResponse(
                                           Request:                  request,
                                           ClearMonitoringResults:   request.VariableMonitoringIds.Select(variableMonitoringId => new ClearMonitoringResult(
                                                                                                                                      Status:       ClearMonitoringStatus.Accepted,
                                                                                                                                      Id:           variableMonitoringId,
                                                                                                                                      StatusInfo:   null,
                                                                                                                                      CustomData:   null
                                                                                                                                  )),
                                           CustomData:               null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomClearVariableMonitoringResponseSerializer,
                            CustomClearMonitoringResultSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnClearVariableMonitoringResponse event

                    var responseLogger = OnClearVariableMonitoringResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnClearVariableMonitoringResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearVariableMonitoringResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSetNetworkProfile

                ChargingStationServer.OnSetNetworkProfile += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnSetNetworkProfileRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSetNetworkProfileRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSetNetworkProfileRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetNetworkProfileRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SetNetworkProfileResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SetNetworkProfileResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SetNetworkProfile request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomSetNetworkProfileRequestSerializer,
                                     CustomNetworkConnectionProfileSerializer,
                                     CustomVPNConfigurationSerializer,
                                     CustomAPNConfigurationSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SetNetworkProfileResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SetNetworkProfile request for configuration slot {request.ConfigurationSlot}!");

                            // ConfigurationSlot
                            // NetworkConnectionProfile

                            response = new OCPPv2_1.CS.SetNetworkProfileResponse(
                                           Request:      request,
                                           Status:       SetNetworkProfileStatus.Accepted,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSetNetworkProfileResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSetNetworkProfileResponse event

                    var responseLogger = OnSetNetworkProfileResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSetNetworkProfileResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetNetworkProfileResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnChangeAvailability

                ChargingStationServer.OnChangeAvailability += async (timestamp,
                                                                     sender,
                                                                     connection,
                                                                     request,
                                                                     cancellationToken) => {

                    #region Send OnChangeAvailabilityRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnChangeAvailabilityRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnChangeAvailabilityRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnChangeAvailabilityRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.ChangeAvailabilityResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.ChangeAvailabilityResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid ChangeAvailability request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomChangeAvailabilityRequestSerializer,
                                     CustomEVSESerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.ChangeAvailabilityResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming ChangeAvailability request {request.OperationalStatus.AsText()}{(request.EVSE is not null ? $" for EVSE '{request.EVSE.Id}'{(request.EVSE.ConnectorId.HasValue ? $"/{request.EVSE.ConnectorId}" : "")}" : "")}!");

                            // OperationalStatus
                            // EVSE
 
                            response = request.EVSE is null

                                           ? new OCPPv2_1.CS.ChangeAvailabilityResponse(
                                                 Request:      request,
                                                 Status:       ChangeAvailabilityStatus.Accepted,
                                                 CustomData:   null
                                             )

                                           : new OCPPv2_1.CS.ChangeAvailabilityResponse(
                                                 Request:      request,
                                                 Status:       ChangeAvailabilityStatus.Rejected,
                                                 CustomData:   null
                                             );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomChangeAvailabilityResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnChangeAvailabilityResponse event

                    var responseLogger = OnChangeAvailabilityResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnChangeAvailabilityResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnChangeAvailabilityResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnTriggerMessage

                ChargingStationServer.OnTriggerMessage += async (timestamp,
                                                                 sender,
                                                                 connection,
                                                                 request,
                                                                 cancellationToken) => {

                    #region Send OnTriggerMessageRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnTriggerMessageRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnTriggerMessageRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnTriggerMessageRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.TriggerMessageResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.TriggerMessageResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid TriggerMessage request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomTriggerMessageRequestSerializer,
                                     CustomEVSESerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.TriggerMessageResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming TriggerMessage request for '{request.RequestedMessage}'{(request.EVSE is not null ? $" at EVSE '{request.EVSE.Id}'" : "")}!");

                            // RequestedMessage
                            // EVSE

                            _ = Task.Run(async () => {

                                if (request.RequestedMessage == MessageTrigger.BootNotification)
                                {
                                    await this.SendBootNotification(
                                              BootReason: BootReason.Triggered,
                                              CustomData: null
                                          );
                                }


                                    // LogStatusNotification
                                    // DiagnosticsStatusNotification
                                    // FirmwareStatusNotification

                                    // Seems not to be allowed any more!
                                    //case MessageTriggers.Heartbeat:
                                    //    await this.SendHeartbeat(
                                    //              CustomData:   null
                                    //          );
                                    //    break;

                                    // MeterValues
                                    // SignChargingStationCertificate

                                else if (request.RequestedMessage == MessageTrigger.StatusNotification &&
                                         request.EVSE is not null)
                                {
                                    await this.SendStatusNotification(
                                              EVSEId:        request.EVSE.Id,
                                              ConnectorId:   Connector_Id.Parse(1),
                                              Timestamp:     Timestamp.Now,
                                              Status:        ConnectorStatus.Unavailable,
                                              CustomData:    null
                                          );
                                }

                            },
                            CancellationToken.None);


                            if (request.RequestedMessage == MessageTrigger.BootNotification ||
                                request.RequestedMessage == MessageTrigger.LogStatusNotification ||
                                request.RequestedMessage == MessageTrigger.DiagnosticsStatusNotification ||
                                request.RequestedMessage == MessageTrigger.FirmwareStatusNotification ||
                              //MessageTriggers.Heartbeat
                                request.RequestedMessage == MessageTrigger.SignChargingStationCertificate)
                            {

                                response = new OCPPv2_1.CS.TriggerMessageResponse(
                                               request,
                                               TriggerMessageStatus.Accepted
                                           );

                            }



                            if (response == null &&
                               (request.RequestedMessage == MessageTrigger.MeterValues ||
                                request.RequestedMessage == MessageTrigger.StatusNotification))
                            {

                                response = request.EVSE is not null

                                               ? new OCPPv2_1.CS.TriggerMessageResponse(
                                                     request,
                                                     TriggerMessageStatus.Accepted
                                                 )

                                               : new OCPPv2_1.CS.TriggerMessageResponse(
                                                     request,
                                                     TriggerMessageStatus.Rejected
                                                 );

                            }

                        }

                    }

                    response ??= new OCPPv2_1.CS.TriggerMessageResponse(
                                     request,
                                     TriggerMessageStatus.Rejected
                                 );

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomTriggerMessageResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnTriggerMessageResponse event

                    var responseLogger = OnTriggerMessageResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnTriggerMessageResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnTriggerMessageResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnIncomingDataTransfer

                ChargingStationServer.OnIncomingDataTransfer += async (timestamp,
                                                                       sender,
                                                                       connection,
                                                                       request,
                                                                       cancellationToken) => {

                    #region Send OnDataTransferRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnIncomingDataTransferRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnIncomingDataTransferRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnIncomingDataTransferRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.DataTransferResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.DataTransferResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid DataTransfer request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomIncomingDataTransferRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.DataTransferResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging Station '{Id}': Incoming data transfer request: {request.VendorId}.{request.MessageId?.ToString() ?? "-"}: {request.Data ?? "-"}!");

                            // VendorId
                            // MessageId
                            // Data

                            var responseData = request.Data;

                            if (request.Data is not null)
                            {

                                if      (request.Data.Type == JTokenType.String)
                                    responseData = request.Data.ToString().Reverse();

                                else if (request.Data.Type == JTokenType.Object) {

                                    var responseObject = new JObject();

                                    foreach (var property in (request.Data as JObject)!)
                                    {
                                        if (property.Value?.Type == JTokenType.String)
                                            responseObject.Add(property.Key,
                                                               property.Value.ToString().Reverse());
                                    }

                                    responseData = responseObject;

                                }

                                else if (request.Data.Type == JTokenType.Array) {

                                    var responseArray = new JArray();

                                    foreach (var element in (request.Data as JArray)!)
                                    {
                                        if (element?.Type == JTokenType.String)
                                            responseArray.Add(element.ToString().Reverse());
                                    }

                                    responseData = responseArray;

                                }

                            }

                            if (request.VendorId == Vendor_Id.GraphDefined)
                            {
                                response = new OCPPv2_1.CS.DataTransferResponse(
                                               request,
                                               DataTransferStatus.Accepted,
                                               responseData
                                           );
                            }
                            else
                                response = new OCPPv2_1.CS.DataTransferResponse(
                                               request,
                                               DataTransferStatus.Rejected
                                           );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomIncomingDataTransferResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnDataTransferResponse event

                    var responseLogger = OnIncomingDataTransferResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnIncomingDataTransferResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnIncomingDataTransferResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                #region OnCertificateSigned

                ChargingStationServer.OnCertificateSigned += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnCertificateSignedRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnCertificateSignedRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnCertificateSignedRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCertificateSignedRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.CertificateSignedResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.CertificateSignedResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid CertificateSigned request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomCertificateSignedRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.CertificateSignedResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming CertificateSigned request{(request.CertificateType.HasValue ? $"(certificate type: {request.CertificateType.Value})" : "")}!");

                            // CertificateChain
                            // CertificateType

                            response = new OCPPv2_1.CS.CertificateSignedResponse(
                                           Request:      request,
                                           Status:       request.CertificateChain.FirstOrDefault()?.Parsed is not null
                                                             ? CertificateSignedStatus.Accepted
                                                             : CertificateSignedStatus.Rejected,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomCertificateSignedResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnCertificateSignedResponse event

                    var responseLogger = OnCertificateSignedResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnCertificateSignedResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCertificateSignedResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnInstallCertificate

                ChargingStationServer.OnInstallCertificate += async (timestamp,
                                                                     sender,
                                                                     connection,
                                                                     request,
                                                                     cancellationToken) => {

                    #region Send OnInstallCertificateRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnInstallCertificateRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnInstallCertificateRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnInstallCertificateRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.InstallCertificateResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.InstallCertificateResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid InstallCertificate request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomInstallCertificateRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.InstallCertificateResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming InstallCertificate request (certificate type: {request.CertificateType}!");

                            // CertificateType
                            // Certificate

                            var success = certificates.AddOrUpdate(request.CertificateType,
                                                                       a    => request.Certificate,
                                                                      (b,c) => request.Certificate);

                            response = new OCPPv2_1.CS.InstallCertificateResponse(
                                           Request:      request,
                                           Status:       request.Certificate?.Parsed is not null
                                                             ? CertificateStatus.Accepted
                                                             : CertificateStatus.Rejected,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomInstallCertificateResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnInstallCertificateResponse event

                    var responseLogger = OnInstallCertificateResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnInstallCertificateResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnInstallCertificateResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetInstalledCertificateIds

                ChargingStationServer.OnGetInstalledCertificateIds += async (timestamp,
                                                                             sender,
                                                                             connection,
                                                                             request,
                                                                             cancellationToken) => {

                    #region Send OnGetInstalledCertificateIdsRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetInstalledCertificateIdsRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetInstalledCertificateIdsRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetInstalledCertificateIdsRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetInstalledCertificateIdsResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetInstalledCertificateIdsResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetInstalledCertificateIds request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetInstalledCertificateIdsRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetInstalledCertificateIdsResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetInstalledCertificateIds request for certificate types: {request.CertificateTypes.Select(certificateType => certificateType).AggregateWith(", ")}!");

                            // CertificateTypes

                            var certs = new List<CertificateHashData>();

                            foreach (var certificateType in request.CertificateTypes)
                            {

                                if (certificates.TryGetValue(InstallCertificateUse.Parse(certificateType.ToString()), out var cert))
                                    certs.Add(new CertificateHashData(
                                                  HashAlgorithm:         HashAlgorithms.SHA256,
                                                  IssuerNameHash:        cert.Parsed?.Issuer               ?? "-",
                                                  IssuerPublicKeyHash:   cert.Parsed?.GetPublicKeyString() ?? "-",
                                                  SerialNumber:          cert.Parsed?.SerialNumber         ?? "-",
                                                  CustomData:            null
                                              ));

                            }

                            response = new OCPPv2_1.CS.GetInstalledCertificateIdsResponse(
                                           Request:                    request,
                                           Status:                     GetInstalledCertificateStatus.Accepted,
                                           CertificateHashDataChain:   certs,
                                           StatusInfo:                 null,
                                           CustomData:                 null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetInstalledCertificateIdsResponseSerializer,
                            CustomCertificateHashDataSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetInstalledCertificateIdsResponse event

                    var responseLogger = OnGetInstalledCertificateIdsResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetInstalledCertificateIdsResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetInstalledCertificateIdsResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnDeleteCertificate

                ChargingStationServer.OnDeleteCertificate += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnDeleteCertificateRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnDeleteCertificateRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnDeleteCertificateRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnDeleteCertificateRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.DeleteCertificateResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.DeleteCertificateResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid DeleteCertificate request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomDeleteCertificateRequestSerializer,
                                     CustomCertificateHashDataSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.DeleteCertificateResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming DeleteCertificate request!");

                            // CertificateHashData

                            var certKV  = certificates.FirstOrDefault(certificateKV => request.CertificateHashData.SerialNumber == certificateKV.Value.Parsed?.SerialNumber);

                            var success = certificates.TryRemove(certKV);

                            response = new OCPPv2_1.CS.DeleteCertificateResponse(
                                           Request:      request,
                                           Status:       success
                                                             ? DeleteCertificateStatus.Accepted
                                                             : DeleteCertificateStatus.NotFound,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomDeleteCertificateResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnDeleteCertificateResponse event

                    var responseLogger = OnDeleteCertificateResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnDeleteCertificateResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnDeleteCertificateResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyCRL

                ChargingStationServer.OnNotifyCRL += async (timestamp,
                                                            sender,
                                                            connection,
                                                            request,
                                                            cancellationToken) => {

                    #region Send OnNotifyCRLRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyCRLRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnNotifyCRLRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyCRLRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.NotifyCRLResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.NotifyCRLResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid NotifyCRL request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomNotifyCRLRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.NotifyCRLResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming NotifyCRL request!");

                            // NotifyCRLRequestId
                            // Availability
                            // Location

                            response = new OCPPv2_1.CS.NotifyCRLResponse(
                                           Request:      request,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyCRLResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnNotifyCRLResponse event

                    var responseLogger = OnNotifyCRLResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnNotifyCRLResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyCRLResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                #region OnGetLocalListVersion

                ChargingStationServer.OnGetLocalListVersion += async (timestamp,
                                                                      sender,
                                                                      connection,
                                                                      request,
                                                                      cancellationToken) => {

                    #region Send OnGetLocalListVersionRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetLocalListVersionRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetLocalListVersionRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetLocalListVersionRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetLocalListVersionResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetLocalListVersionResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetLocalListVersion request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetLocalListVersionRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetLocalListVersionResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetLocalListVersion request!");

                            // none

                            response = new OCPPv2_1.CS.GetLocalListVersionResponse(
                                           Request:         request,
                                           VersionNumber:   0,
                                           CustomData:      null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetLocalListVersionResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetLocalListVersionResponse event

                    var responseLogger = OnGetLocalListVersionResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetLocalListVersionResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetLocalListVersionResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSendLocalList

                ChargingStationServer.OnSendLocalList += async (timestamp,
                                                                sender,
                                                                connection,
                                                                request,
                                                                cancellationToken) => {

                    #region Send OnSendLocalListRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSendLocalListRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSendLocalListRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSendLocalListRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SendLocalListResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SendLocalListResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SendLocalList request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomSendLocalListRequestSerializer,
                                     CustomAuthorizationDataSerializer,
                                     CustomIdTokenSerializer,
                                     CustomAdditionalInfoSerializer,
                                     CustomIdTokenInfoSerializer,
                                     CustomMessageContentSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SendLocalListResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SendLocalList request: '{request.UpdateType.AsText()}' version '{request.VersionNumber}'!");

                            // VersionNumber
                            // UpdateType
                            // LocalAuthorizationList

                            response = new OCPPv2_1.CS.SendLocalListResponse(
                                           Request:      request,
                                           Status:       SendLocalListStatus.Accepted,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSendLocalListResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSendLocalListResponse event

                    var responseLogger = OnSendLocalListResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSendLocalListResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSendLocalListResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnClearCache

                ChargingStationServer.OnClearCache += async (timestamp,
                                                             sender,
                                                             connection,
                                                             request,
                                                             cancellationToken) => {

                    #region Send OnClearCacheRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnClearCacheRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnClearCacheRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearCacheRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.ClearCacheResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.ClearCacheResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid ClearCache request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomClearCacheRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.ClearCacheResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming ClearCache request!");

                            // none

                            response = new OCPPv2_1.CS.ClearCacheResponse(
                                           Request:      request,
                                           Status:       ClearCacheStatus.Accepted,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomClearCacheResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnClearCacheResponse event

                    var responseLogger = OnClearCacheResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnClearCacheResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearCacheResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                #region OnReserveNow

                ChargingStationServer.OnReserveNow += async (timestamp,
                                                             sender,
                                                             connection,
                                                             request,
                                                             cancellationToken) => {

                    #region Send OnReserveNowRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnReserveNowRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnReserveNowRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnReserveNowRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.ReserveNowResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.ReserveNowResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid ReserveNow request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomReserveNowRequestSerializer,
                                     CustomIdTokenSerializer,
                                     CustomAdditionalInfoSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.ReserveNowResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming ReserveNow request (reservation id: {request.Id}, idToken: '{request.IdToken.Value}'{(request.EVSEId.HasValue ? $", evseId: '{request.EVSEId.Value}'" : "")})!");

                            // ReservationId
                            // ExpiryDate
                            // IdToken
                            // ConnectorType
                            // EVSEId
                            // GroupIdToken

                            var success = reservations.TryAdd(request.Id,
                                                              request.Id);

                            response = new OCPPv2_1.CS.ReserveNowResponse(
                                           Request:      request,
                                           Status:       success
                                                             ? ReservationStatus.Accepted
                                                             : ReservationStatus.Rejected,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomReserveNowResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnReserveNowResponse event

                    var responseLogger = OnReserveNowResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnReserveNowResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnReserveNowResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnCancelReservation

                ChargingStationServer.OnCancelReservation += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnCancelReservationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnCancelReservationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnCancelReservationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCancelReservationRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.CancelReservationResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.CancelReservationResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid CancelReservation request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomCancelReservationRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.CancelReservationResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            var success = reservations.ContainsKey(request.ReservationId)
                                              ? reservations.TryRemove(request.ReservationId, out _)
                                              : true;

                            DebugX.Log($"Charging station '{Id}': Incoming CancelReservation request for reservation id '{request.ReservationId}': {(success ? "accepted" : "rejected")}!");

                            // ReservationId

                            response = new OCPPv2_1.CS.CancelReservationResponse(
                                           Request:      request,
                                           Status:       success
                                                             ? CancelReservationStatus.Accepted
                                                             : CancelReservationStatus.Rejected,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomCancelReservationResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnCancelReservationResponse event

                    var responseLogger = OnCancelReservationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnCancelReservationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCancelReservationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnRequestStartTransaction

                ChargingStationServer.OnRequestStartTransaction += async (timestamp,
                                                                          sender,
                                                                          connection,
                                                                          request,
                                                                          cancellationToken) => {

                    #region Send OnRequestStartTransactionRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnRequestStartTransactionRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnRequestStartTransactionRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnRequestStartTransactionRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.RequestStartTransactionResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.RequestStartTransactionResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid RequestStartTransaction request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(

                                     CustomRequestStartTransactionRequestSerializer,
                                     CustomIdTokenSerializer,
                                     CustomAdditionalInfoSerializer,
                                     CustomChargingProfileSerializer,
                                     CustomLimitBeyondSoCSerializer,
                                     CustomChargingScheduleSerializer,
                                     CustomChargingSchedulePeriodSerializer,
                                     CustomV2XFreqWattEntrySerializer,
                                     CustomV2XSignalWattEntrySerializer,
                                     CustomSalesTariffSerializer,
                                     CustomSalesTariffEntrySerializer,
                                     CustomRelativeTimeIntervalSerializer,
                                     CustomConsumptionCostSerializer,
                                     CustomCostSerializer,

                                     CustomAbsolutePriceScheduleSerializer,
                                     CustomPriceRuleStackSerializer,
                                     CustomPriceRuleSerializer,
                                     CustomTaxRuleSerializer,
                                     CustomOverstayRuleListSerializer,
                                     CustomOverstayRuleSerializer,
                                     CustomAdditionalServiceSerializer,

                                     CustomPriceLevelScheduleSerializer,
                                     CustomPriceLevelScheduleEntrySerializer,

                                     CustomTransactionLimitsSerializer,

                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer

                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.RequestStartTransactionResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming RequestStartTransaction for '{(request.EVSEId?.ToString() ?? "-")}'!");

                            // ToDo: lock(evses)

                            response = new OCPPv2_1.CS.RequestStartTransactionResponse(
                                           request,
                                           RequestStartStopStatus.Rejected
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomRequestStartTransactionResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnRequestStartTransactionResponse event

                    var responseLogger = OnRequestStartTransactionResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnRequestStartTransactionResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnRequestStartTransactionResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnRequestStopTransaction

                ChargingStationServer.OnRequestStopTransaction += async (timestamp,
                                                                         sender,
                                                                         connection,
                                                                         request,
                                                                         cancellationToken) => {

                    #region Send OnRequestStopTransactionRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnRequestStopTransactionRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnRequestStopTransactionRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnRequestStopTransactionRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.RequestStopTransactionResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.RequestStopTransactionResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid RequestStopTransaction request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomRequestStopTransactionRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.RequestStopTransactionResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming RequestStopTransaction for '{request.TransactionId}'!");

                            // TransactionId

                            response = new OCPPv2_1.CS.RequestStopTransactionResponse(
                                           request,
                                           RequestStartStopStatus.Rejected
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomRequestStopTransactionResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnRequestStopTransactionResponse event

                    var responseLogger = OnRequestStopTransactionResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnRequestStopTransactionResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnRequestStopTransactionResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetTransactionStatus

                ChargingStationServer.OnGetTransactionStatus += async (timestamp,
                                                                       sender,
                                                                       connection,
                                                                       request,
                                                                       cancellationToken) => {

                    #region Send OnGetTransactionStatusRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetTransactionStatusRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetTransactionStatusRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetTransactionStatusRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetTransactionStatusResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetTransactionStatusResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetTransactionStatus request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetTransactionStatusRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetTransactionStatusResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetTransactionStatus for '{request.TransactionId}'!");

                            // TransactionId

                            response = new OCPPv2_1.CS.GetTransactionStatusResponse(
                                           request,
                                           MessagesInQueue:    false,
                                           OngoingIndicator:   false
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetTransactionStatusResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetTransactionStatusResponse event

                    var responseLogger = OnGetTransactionStatusResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetTransactionStatusResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetTransactionStatusResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSetChargingProfile

                ChargingStationServer.OnSetChargingProfile += async (timestamp,
                                                                     sender,
                                                                     connection,
                                                                     request,
                                                                     cancellationToken) => {

                    #region Send OnSetChargingProfileRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSetChargingProfileRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSetChargingProfileRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetChargingProfileRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SetChargingProfileResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SetChargingProfileResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SetChargingProfile request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(

                                     CustomSetChargingProfileRequestSerializer,
                                     CustomChargingProfileSerializer,
                                     CustomLimitBeyondSoCSerializer,
                                     CustomChargingScheduleSerializer,
                                     CustomChargingSchedulePeriodSerializer,
                                     CustomV2XFreqWattEntrySerializer,
                                     CustomV2XSignalWattEntrySerializer,
                                     CustomSalesTariffSerializer,
                                     CustomSalesTariffEntrySerializer,
                                     CustomRelativeTimeIntervalSerializer,
                                     CustomConsumptionCostSerializer,
                                     CustomCostSerializer,

                                     CustomAbsolutePriceScheduleSerializer,
                                     CustomPriceRuleStackSerializer,
                                     CustomPriceRuleSerializer,
                                     CustomTaxRuleSerializer,
                                     CustomOverstayRuleListSerializer,
                                     CustomOverstayRuleSerializer,
                                     CustomAdditionalServiceSerializer,

                                     CustomPriceLevelScheduleSerializer,
                                     CustomPriceLevelScheduleEntrySerializer,

                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer

                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SetChargingProfileResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SetChargingProfile for '{request.EVSEId}'!");

                            // EVSEId
                            // ChargingProfile

                            response = new OCPPv2_1.CS.SetChargingProfileResponse(
                                           request,
                                           ChargingProfileStatus.Rejected
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSetChargingProfileResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSetChargingProfileResponse event

                    var responseLogger = OnSetChargingProfileResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSetChargingProfileResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetChargingProfileResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetChargingProfiles

                ChargingStationServer.OnGetChargingProfiles += async (timestamp,
                                                                      sender,
                                                                      connection,
                                                                      request,
                                                                      cancellationToken) => {

                    #region Send OnGetChargingProfilesRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetChargingProfilesRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetChargingProfilesRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetChargingProfilesRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetChargingProfilesResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetChargingProfilesResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetChargingProfiles request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetChargingProfilesRequestSerializer,
                                     CustomChargingProfileCriterionSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetChargingProfilesResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetChargingProfiles request ({request.GetChargingProfilesRequestId}) for '{request.EVSEId}'!");

                            // GetChargingProfilesRequestId
                            // ChargingProfile
                            // EVSEId

                            response = new OCPPv2_1.CS.GetChargingProfilesResponse(
                                           request,
                                           GetChargingProfileStatus.Unknown
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetChargingProfilesResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetChargingProfilesResponse event

                    var responseLogger = OnGetChargingProfilesResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetChargingProfilesResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetChargingProfilesResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnClearChargingProfile

                ChargingStationServer.OnClearChargingProfile += async (timestamp,
                                                                       sender,
                                                                       connection,
                                                                       request,
                                                                       cancellationToken) => {

                    #region Send OnClearChargingProfileRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnClearChargingProfileRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnClearChargingProfileRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearChargingProfileRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.ClearChargingProfileResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.ClearChargingProfileResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid ClearChargingProfile request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomClearChargingProfileRequestSerializer,
                                     CustomClearChargingProfileSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.ClearChargingProfileResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming ClearChargingProfile request for charging profile identification '{request.ChargingProfileId}'!");

                            // ChargingProfileId
                            // ChargingProfileCriteria

                            response = new OCPPv2_1.CS.ClearChargingProfileResponse(
                                           Request:      request,
                                           Status:       ClearChargingProfileStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomClearChargingProfileResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnClearChargingProfileResponse event

                    var responseLogger = OnClearChargingProfileResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnClearChargingProfileResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearChargingProfileResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetCompositeSchedule

                ChargingStationServer.OnGetCompositeSchedule += async (timestamp,
                                                                       sender,
                                                                       connection,
                                                                       request,
                                                                       cancellationToken) => {

                    #region Send OnGetCompositeScheduleRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetCompositeScheduleRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetCompositeScheduleRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetCompositeScheduleRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetCompositeScheduleResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetCompositeScheduleResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetCompositeSchedule request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetCompositeScheduleRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetCompositeScheduleResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetCompositeSchedule request for the next {request.Duration.TotalMinutes} minutes of EVSE '{request.EVSEId}'!");

                            // Duration,
                            // EVSEId,
                            // ChargingRateUnit

                            response = new OCPPv2_1.CS.GetCompositeScheduleResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           Schedule:     null,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetCompositeScheduleResponseSerializer,
                            CustomCompositeScheduleSerializer,
                            CustomChargingSchedulePeriodSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetCompositeScheduleResponse event

                    var responseLogger = OnGetCompositeScheduleResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetCompositeScheduleResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetCompositeScheduleResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnUpdateDynamicSchedule

                ChargingStationServer.OnUpdateDynamicSchedule += async (timestamp,
                                                                        sender,
                                                                        connection,
                                                                        request,
                                                                        cancellationToken) => {

                    #region Send OnUpdateDynamicScheduleRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnUpdateDynamicScheduleRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnUpdateDynamicScheduleRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUpdateDynamicScheduleRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.UpdateDynamicScheduleResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.UpdateDynamicScheduleResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid UpdateDynamicSchedule request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomUpdateDynamicScheduleRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.UpdateDynamicScheduleResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming UpdateDynamicSchedule request for charging profile '{request.ChargingProfileId}'!");

                            // ChargingProfileId

                            // Limit
                            // Limit_L2
                            // Limit_L3

                            // DischargeLimit
                            // DischargeLimit_L2
                            // DischargeLimit_L3

                            // Setpoint
                            // Setpoint_L2
                            // Setpoint_L3

                            // SetpointReactive
                            // SetpointReactive_L2
                            // SetpointReactive_L3

                            response = new OCPPv2_1.CS.UpdateDynamicScheduleResponse(
                                           Request:      request,
                                           Status:       ChargingProfileStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomUpdateDynamicScheduleResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnUpdateDynamicScheduleResponse event

                    var responseLogger = OnUpdateDynamicScheduleResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnUpdateDynamicScheduleResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUpdateDynamicScheduleResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyAllowedEnergyTransfer

                ChargingStationServer.OnNotifyAllowedEnergyTransfer += async (timestamp,
                                                                              sender,
                                                                              connection,
                                                                              request,
                                                                              cancellationToken) => {

                    #region Send OnNotifyAllowedEnergyTransferRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyAllowedEnergyTransferRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnNotifyAllowedEnergyTransferRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyAllowedEnergyTransferRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid NotifyAllowedEnergyTransfer request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomNotifyAllowedEnergyTransferRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming NotifyAllowedEnergyTransfer request allowing energy transfer modes: '{request.AllowedEnergyTransferModes.Select(mode => mode.ToString()).AggregateWith(", ")}'!");

                            // AllowedEnergyTransferModes

                            response = new OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse(
                                           Request:      request,
                                           Status:       NotifyAllowedEnergyTransferStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyAllowedEnergyTransferResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnNotifyAllowedEnergyTransferResponse event

                    var responseLogger = OnNotifyAllowedEnergyTransferResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnNotifyAllowedEnergyTransferResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyAllowedEnergyTransferResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnUsePriorityCharging

                ChargingStationServer.OnUsePriorityCharging += async (timestamp,
                                                                      sender,
                                                                      connection,
                                                                      request,
                                                                      cancellationToken) => {

                    #region Send OnUsePriorityChargingRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnUsePriorityChargingRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnUsePriorityChargingRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUsePriorityChargingRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.UsePriorityChargingResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.UsePriorityChargingResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid UsePriorityCharging request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomUsePriorityChargingRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.UsePriorityChargingResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming UsePriorityCharging request for transaction '{request.TransactionId}': {(request.Activate ? "active" : "disabled")}!");

                            // TransactionId
                            // Activate

                            response = new OCPPv2_1.CS.UsePriorityChargingResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomUsePriorityChargingResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnUsePriorityChargingResponse event

                    var responseLogger = OnUsePriorityChargingResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnUsePriorityChargingResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUsePriorityChargingResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnUnlockConnector

                ChargingStationServer.OnUnlockConnector += async (timestamp,
                                                                  sender,
                                                                  connection,
                                                                  request,
                                                                  cancellationToken) => {

                    #region Send OnUnlockConnectorRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnUnlockConnectorRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnUnlockConnectorRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUnlockConnectorRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.UnlockConnectorResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.UnlockConnectorResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid UnlockConnector request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomUnlockConnectorRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.UnlockConnectorResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming UnlockConnector request for EVSE '{request.EVSEId}' and connector '{request.ConnectorId}'!");

                            // EVSEId
                            // ConnectorId

                            response = new OCPPv2_1.CS.UnlockConnectorResponse(
                                           Request:      request,
                                           Status:       UnlockStatus.UnlockFailed,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomUnlockConnectorResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnUnlockConnectorResponse event

                    var responseLogger = OnUnlockConnectorResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnUnlockConnectorResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUnlockConnectorResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                #region OnAFRRSignal

                ChargingStationServer.OnAFRRSignal += async (timestamp,
                                                             sender,
                                                             connection,
                                                             request,
                                                             cancellationToken) => {

                    #region Send OnAFRRSignalRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnAFRRSignalRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnAFRRSignalRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnAFRRSignalRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.AFRRSignalResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.AFRRSignalResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid AFRRSignal request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomAFRRSignalRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.AFRRSignalResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming AFRRSignal '{request.Signal}' for timestamp '{request.ActivationTimestamp}'!");

                            // ActivationTimestamp
                            // Signal

                            response = new OCPPv2_1.CS.AFRRSignalResponse(
                                           Request:      request,
                                           Status:       request.ActivationTimestamp < Timestamp.Now - TimeSpan.FromDays(1)
                                                             ? GenericStatus.Rejected
                                                             : GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomAFRRSignalResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnAFRRSignalResponse event

                    var responseLogger = OnAFRRSignalResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnAFRRSignalResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnAFRRSignalResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                #region OnSetDisplayMessage

                ChargingStationServer.OnSetDisplayMessage += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnSetDisplayMessageRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSetDisplayMessageRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSetDisplayMessageRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetDisplayMessageRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SetDisplayMessageResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SetDisplayMessageResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SetDisplayMessage request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomSetDisplayMessageRequestSerializer,
                                     CustomMessageInfoSerializer,
                                     CustomMessageContentSerializer,
                                     CustomComponentSerializer,
                                     CustomEVSESerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SetDisplayMessageResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SetDisplayMessage '{request.Message.Message.Content}'!");

                            // Message

                            if (displayMessages.TryAdd(request.Message.Id,
                                                       request.Message)) {

                                response = new OCPPv2_1.CS.SetDisplayMessageResponse(
                                               Request:      request,
                                               Status:       DisplayMessageStatus.Accepted,
                                               StatusInfo:   null,
                                               CustomData:   null
                                           );

                            }

                            else
                                response = new OCPPv2_1.CS.SetDisplayMessageResponse(
                                               Request:      request,
                                               Status:       DisplayMessageStatus.Rejected,
                                               StatusInfo:   null,
                                               CustomData:   null
                                           );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSetDisplayMessageResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSetDisplayMessageResponse event

                    var responseLogger = OnSetDisplayMessageResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSetDisplayMessageResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetDisplayMessageResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetDisplayMessages

                ChargingStationServer.OnGetDisplayMessages += async (timestamp,
                                                                     sender,
                                                                     connection,
                                                                     request,
                                                                     cancellationToken) => {

                    #region Send OnGetDisplayMessagesRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetDisplayMessagesRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetDisplayMessagesRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetDisplayMessagesRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetDisplayMessagesResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetDisplayMessagesResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetDisplayMessages request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetDisplayMessagesRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetDisplayMessagesResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetDisplayMessages request ({request.GetDisplayMessagesRequestId})!");

                            // GetDisplayMessagesRequestId
                            // Ids
                            // Priority
                            // State

                            _ = Task.Run(async () => {

                                var filteredDisplayMessages = displayMessages.Values.
                                                                  Where(displayMessage =>  request.Ids is null || !request.Ids.Any() || request.Ids.Contains(displayMessage.Id)).
                                                                  Where(displayMessage => !request.State.   HasValue || (displayMessage.State.HasValue && displayMessage.State.Value == request.State.   Value)).
                                                                  Where(displayMessage => !request.Priority.HasValue ||  displayMessage.Priority                                     == request.Priority.Value).
                                                                  ToArray();

                                await this.NotifyDisplayMessages(
                                          NotifyDisplayMessagesRequestId:   request.GetDisplayMessagesRequestId,
                                          MessageInfos:                     filteredDisplayMessages,
                                          ToBeContinued:                    false,
                                          CustomData:                       null
                                      );

                            },
                            CancellationToken.None);

                            response = new OCPPv2_1.CS.GetDisplayMessagesResponse(
                                           request,
                                           GetDisplayMessagesStatus.Accepted
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetDisplayMessagesResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetDisplayMessagesResponse event

                    var responseLogger = OnGetDisplayMessagesResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetDisplayMessagesResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetDisplayMessagesResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnClearDisplayMessage

                ChargingStationServer.OnClearDisplayMessage += async (timestamp,
                                                                      sender,
                                                                      connection,
                                                                      request,
                                                                      cancellationToken) => {

                    #region Send OnClearDisplayMessageRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnClearDisplayMessageRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnClearDisplayMessageRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearDisplayMessageRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.ClearDisplayMessageResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.ClearDisplayMessageResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid ClearDisplayMessage request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomClearDisplayMessageRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.ClearDisplayMessageResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming ClearDisplayMessage request ({request.DisplayMessageId})!");

                            // DisplayMessageId

                            if (displayMessages.TryGetValue(request.DisplayMessageId, out var messageInfo) &&
                                displayMessages.TryRemove(new KeyValuePair<DisplayMessage_Id, MessageInfo>(request.DisplayMessageId, messageInfo))) {

                                response = new OCPPv2_1.CS.ClearDisplayMessageResponse(
                                               request,
                                               ClearMessageStatus.Accepted
                                           );

                            }

                            else
                                response = new OCPPv2_1.CS.ClearDisplayMessageResponse(
                                               request,
                                               ClearMessageStatus.Unknown
                                           );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomClearDisplayMessageResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnClearDisplayMessageResponse event

                    var responseLogger = OnClearDisplayMessageResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnClearDisplayMessageResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearDisplayMessageResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnCostUpdated

                ChargingStationServer.OnCostUpdated += async (timestamp,
                                                              sender,
                                                              connection,
                                                              request,
                                                              cancellationToken) => {

                    #region Send OnCostUpdatedRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnCostUpdatedRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnCostUpdatedRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCostUpdatedRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    #region Check charging station identification

                    OCPPv2_1.CS.CostUpdatedResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.CostUpdatedResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid CostUpdated request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomCostUpdatedRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.CostUpdatedResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming CostUpdated request '{request.TotalCost}' for transaction '{request.TransactionId}'!");

                            // TotalCost
                            // TransactionId

                            if (transactions.ContainsKey(request.TransactionId)) {

                                totalCosts.AddOrUpdate(request.TransactionId,
                                                       request.TotalCost,
                                                       (transactionId, totalCost) => request.TotalCost);

                                response = new OCPPv2_1.CS.CostUpdatedResponse(
                                               request
                                           );

                            }

                            else
                                response = new OCPPv2_1.CS.CostUpdatedResponse(
                                               request,
                                               Result.GenericError($"Unknown transaction identification '{request.TransactionId}'!")
                                           );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomCostUpdatedResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnCostUpdatedResponse event

                    var responseLogger = OnCostUpdatedResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnCostUpdatedResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCostUpdatedResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnCustomerInformation

                ChargingStationServer.OnCustomerInformation += async (timestamp,
                                                                      sender,
                                                                      connection,
                                                                      request,
                                                                      cancellationToken) => {

                    #region Send OnCustomerInformationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnCustomerInformationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnCustomerInformationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCustomerInformationRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.CustomerInformationResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.CustomerInformationResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid CustomerInformation request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomCustomerInformationRequestSerializer,
                                     CustomIdTokenSerializer,
                                     CustomAdditionalInfoSerializer,
                                     CustomCertificateHashDataSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.CustomerInformationResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            var command   = new String[] {

                                                request.Report
                                                    ? "report"
                                                    : "",

                                                request.Clear
                                                    ? "clear"
                                                    : "",

                                            }.Where(text => text.IsNotNullOrEmpty()).
                                              AggregateWith(" and ");

                            var customer  = request.IdToken is not null
                                               ? $"IdToken: {request.IdToken.Value}"
                                               : request.CustomerCertificate is not null
                                                     ? $"certificate s/n: {request.CustomerCertificate.SerialNumber}"
                                                     : request.CustomerIdentifier.HasValue
                                                           ? $"customer identifier: {request.CustomerIdentifier.Value}"
                                                           : "-";


                            DebugX.Log($"Charging station '{Id}': Incoming CustomerInformation request ({request.CustomerInformationRequestId}) to {command} for customer '{customer}'!");

                            // CustomerInformationRequestId
                            // Report
                            // Clear
                            // CustomerIdentifier
                            // IdToken
                            // CustomerCertificate

                            _ = Task.Run(async () => {

                                await this.NotifyCustomerInformation(
                                          NotifyCustomerInformationRequestId:   request.CustomerInformationRequestId,
                                          Data:                                 customer,
                                          SequenceNumber:                       1,
                                          GeneratedAt:                          Timestamp.Now,
                                          ToBeContinued:                        false,
                                          CustomData:                           null
                                      );

                            },
                            CancellationToken.None);

                            response = new OCPPv2_1.CS.CustomerInformationResponse(
                                           request,
                                           CustomerInformationStatus.Accepted
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomCustomerInformationResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnCustomerInformationResponse event

                    var responseLogger = OnCustomerInformationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnCustomerInformationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCustomerInformationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                // Binary Data Streams Extensions

                #region OnIncomingBinaryDataTransfer

                ChargingStationServer.OnIncomingBinaryDataTransfer += async (timestamp,
                                                                             sender,
                                                                             connection,
                                                                             request,
                                                                             cancellationToken) => {

                    #region Send OnBinaryDataTransferRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnIncomingBinaryDataTransferRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnIncomingBinaryDataTransferRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnIncomingBinaryDataTransferRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.BinaryDataTransferResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.BinaryDataTransferResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid BinaryDataTransfer request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToBinary(
                                     CustomIncomingBinaryDataTransferRequestSerializer,
                                     CustomBinarySignatureSerializer,
                                     IncludeSignatures: false
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.BinaryDataTransferResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging Station '{Id}': Incoming binary data transfer request: {request.VendorId}.{request.MessageId?.ToString() ?? "-"}: {request.Data?.ToHexString() ?? "-"}!");

                            // VendorId
                            // MessageId
                            // Data

                            var responseBinaryData = request.Data;

                            if (request.Data is not null)
                                responseBinaryData = request.Data.Reverse();

                            response = request.VendorId == Vendor_Id.GraphDefined

                                           ? new OCPPv2_1.CS.BinaryDataTransferResponse(
                                                 Request:                request,
                                                 Status:                 BinaryDataTransferStatus.Accepted,
                                                 AdditionalStatusInfo:   null,
                                                 Data:                   responseBinaryData
                                             )

                                           : new OCPPv2_1.CS.BinaryDataTransferResponse(
                                                 Request:                request,
                                                 Status:                 BinaryDataTransferStatus.Rejected,
                                                 AdditionalStatusInfo:   null,
                                                 Data:                   responseBinaryData
                                             );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToBinary(
                            CustomIncomingBinaryDataTransferResponseSerializer,
                            null, //CustomStatusInfoSerializer,
                            CustomBinarySignatureSerializer,
                            IncludeSignatures: false
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnBinaryDataTransferResponse event

                    var responseLogger = OnIncomingBinaryDataTransferResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnIncomingBinaryDataTransferResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnIncomingBinaryDataTransferResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetFile

                ChargingStationServer.OnGetFile += async (timestamp,
                                                          sender,
                                                          connection,
                                                          request,
                                                          cancellationToken) => {

                    #region Send OnGetFileRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetFileRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetFileRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetFileRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetFileResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetFileResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetFile request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetFileRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetFileResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging Station '{Id}': Incoming GetFile request: {request.FileName}!");

                            response = request.FileName.ToString() == "/hello/world.txt"

                                           ? new OCPPv2_1.CS.GetFileResponse(
                                                 Request:           request,
                                                 FileName:          request.FileName,
                                                 Status:            GetFileStatus.Success,
                                                 FileContent:       "Hello world!".ToUTF8Bytes(),
                                                 FileContentType:   ContentType.Text.Plain,
                                                 FileSHA256:        SHA256.HashData("Hello world!".ToUTF8Bytes()),
                                                 FileSHA512:        SHA512.HashData("Hello world!".ToUTF8Bytes())
                                             )

                                           : new OCPPv2_1.CS.GetFileResponse(
                                                 Request:           request,
                                                 FileName:          request.FileName,
                                                 Status:            GetFileStatus.NotFound
                                             );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToBinary(
                            CustomGetFileResponseSerializer,
                            null, //CustomStatusInfoSerializer,
                            CustomBinarySignatureSerializer,
                            IncludeSignatures: false
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetFileResponse event

                    var responseLogger = OnGetFileResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetFileResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetFileResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSendFile

                ChargingStationServer.OnSendFile += async (timestamp,
                                                           sender,
                                                           connection,
                                                           request,
                                                           cancellationToken) => {

                    #region Send OnSendFileRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSendFileRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSendFileRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSendFileRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SendFileResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SendFileResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SendFile request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToBinary(
                                     CustomSendFileRequestSerializer,
                                     CustomBinarySignatureSerializer,
                                     IncludeSignatures: false
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SendFileResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging Station '{Id}': Incoming SendFile request: {request.FileName}!");

                            response = request.FileName.ToString() == "/hello/world.txt"

                                           ? new OCPPv2_1.CS.SendFileResponse(
                                                 Request:   request,
                                                 FileName:  request.FileName,
                                                 Status:    SendFileStatus.Success
                                             )

                                           : new OCPPv2_1.CS.SendFileResponse(
                                                 Request:   request,
                                                 FileName:  request.FileName,
                                                 Status:    SendFileStatus.NotFound
                                             );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSendFileResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSendFileResponse event

                    var responseLogger = OnSendFileResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSendFileResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSendFileResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnDeleteFile

                ChargingStationServer.OnDeleteFile += async (timestamp,
                                                             sender,
                                                             connection,
                                                             request,
                                                             cancellationToken) => {

                    #region Send OnDeleteFileRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnDeleteFileRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnDeleteFileRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnDeleteFileRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.DeleteFileResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.DeleteFileResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid DeleteFile request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomDeleteFileRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.DeleteFileResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging Station '{Id}': Incoming DeleteFile request: {request.FileName}!");

                            response = request.FileName.ToString() == "/hello/world.txt"

                                           ? new OCPPv2_1.CS.DeleteFileResponse(
                                                 Request:   request,
                                                 FileName:  request.FileName,
                                                 Status:    DeleteFileStatus.Success
                                             )

                                           : new OCPPv2_1.CS.DeleteFileResponse(
                                                 Request:   request,
                                                 FileName:  request.FileName,
                                                 Status:    DeleteFileStatus.NotFound
                                             );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomDeleteFileResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnDeleteFileResponse event

                    var responseLogger = OnDeleteFileResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnDeleteFileResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnDeleteFileResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                // E2E Security Extensions

                #region OnAddSignaturePolicy

                ChargingStationServer.OnAddSignaturePolicy += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnAddSignaturePolicyRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnAddSignaturePolicyRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnAddSignaturePolicyRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnAddSignaturePolicyRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.AddSignaturePolicyResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.AddSignaturePolicyResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid AddSignaturePolicy request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     //CustomAddSignaturePolicyRequestSerializer,
                                     //CustomMessageInfoSerializer,
                                     //CustomMessageContentSerializer,
                                     //CustomComponentSerializer,
                                     //CustomEVSESerializer,
                                     //CustomSignatureSerializer,
                                     //CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.AddSignaturePolicyResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming AddSignaturePolicy!");

                            // Message


                                response = new OCPPv2_1.CS.AddSignaturePolicyResponse(
                                               Request:      request,
                                               Status:       GenericStatus.Accepted,
                                               StatusInfo:   null,
                                               CustomData:   null
                                           );


                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomAddSignaturePolicyResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnAddSignaturePolicyResponse event

                    var responseLogger = OnAddSignaturePolicyResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnAddSignaturePolicyResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnAddSignaturePolicyResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnUpdateSignaturePolicy

                ChargingStationServer.OnUpdateSignaturePolicy += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnUpdateSignaturePolicyRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnUpdateSignaturePolicyRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnUpdateSignaturePolicyRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUpdateSignaturePolicyRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.UpdateSignaturePolicyResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.UpdateSignaturePolicyResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid UpdateSignaturePolicy request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     //CustomUpdateSignaturePolicyRequestSerializer,
                                     //CustomMessageInfoSerializer,
                                     //CustomMessageContentSerializer,
                                     //CustomComponentSerializer,
                                     //CustomEVSESerializer,
                                     //CustomSignatureSerializer,
                                     //CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.UpdateSignaturePolicyResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming UpdateSignaturePolicy!");

                            // Message

                            response = new OCPPv2_1.CS.UpdateSignaturePolicyResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomUpdateSignaturePolicyResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnUpdateSignaturePolicyResponse event

                    var responseLogger = OnUpdateSignaturePolicyResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnUpdateSignaturePolicyResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUpdateSignaturePolicyResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnDeleteSignaturePolicy

                ChargingStationServer.OnDeleteSignaturePolicy += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnDeleteSignaturePolicyRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnDeleteSignaturePolicyRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnDeleteSignaturePolicyRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnDeleteSignaturePolicyRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.DeleteSignaturePolicyResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.DeleteSignaturePolicyResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid DeleteSignaturePolicy request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     //CustomDeleteSignaturePolicyRequestSerializer,
                                     //CustomMessageInfoSerializer,
                                     //CustomMessageContentSerializer,
                                     //CustomComponentSerializer,
                                     //CustomEVSESerializer,
                                     //CustomSignatureSerializer,
                                     //CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.DeleteSignaturePolicyResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming DeleteSignaturePolicy!");

                            // Message

                            response = new OCPPv2_1.CS.DeleteSignaturePolicyResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomDeleteSignaturePolicyResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnDeleteSignaturePolicyResponse event

                    var responseLogger = OnDeleteSignaturePolicyResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnDeleteSignaturePolicyResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnDeleteSignaturePolicyResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnAddUserRole

                ChargingStationServer.OnAddUserRole += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnAddUserRoleRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnAddUserRoleRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnAddUserRoleRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnAddUserRoleRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.AddUserRoleResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.AddUserRoleResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid AddUserRole request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     //CustomAddUserRoleRequestSerializer,
                                     //CustomMessageInfoSerializer,
                                     //CustomMessageContentSerializer,
                                     //CustomComponentSerializer,
                                     //CustomEVSESerializer,
                                     //CustomSignatureSerializer,
                                     //CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.AddUserRoleResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming AddUserRole!");

                            // Message

                            response = new OCPPv2_1.CS.AddUserRoleResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomAddUserRoleResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnAddUserRoleResponse event

                    var responseLogger = OnAddUserRoleResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnAddUserRoleResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnAddUserRoleResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnUpdateUserRole

                ChargingStationServer.OnUpdateUserRole += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnUpdateUserRoleRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnUpdateUserRoleRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnUpdateUserRoleRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUpdateUserRoleRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.UpdateUserRoleResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.UpdateUserRoleResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid UpdateUserRole request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     //CustomUpdateUserRoleRequestSerializer,
                                     //CustomMessageInfoSerializer,
                                     //CustomMessageContentSerializer,
                                     //CustomComponentSerializer,
                                     //CustomEVSESerializer,
                                     //CustomSignatureSerializer,
                                     //CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.UpdateUserRoleResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming UpdateUserRole!");

                            // Message

                            response = new OCPPv2_1.CS.UpdateUserRoleResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomUpdateUserRoleResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnUpdateUserRoleResponse event

                    var responseLogger = OnUpdateUserRoleResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnUpdateUserRoleResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnUpdateUserRoleResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnDeleteUserRole

                ChargingStationServer.OnDeleteUserRole += async (timestamp,
                                                                    sender,
                                                                    connection,
                                                                    request,
                                                                    cancellationToken) => {

                    #region Send OnDeleteUserRoleRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnDeleteUserRoleRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnDeleteUserRoleRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnDeleteUserRoleRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.DeleteUserRoleResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.DeleteUserRoleResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid DeleteUserRole request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     //CustomDeleteUserRoleRequestSerializer,
                                     //CustomMessageInfoSerializer,
                                     //CustomMessageContentSerializer,
                                     //CustomComponentSerializer,
                                     //CustomEVSESerializer,
                                     //CustomSignatureSerializer,
                                     //CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.DeleteUserRoleResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming DeleteUserRole!");

                            // Message

                            response = new OCPPv2_1.CS.DeleteUserRoleResponse(
                                           Request:      request,
                                           Status:       GenericStatus.Accepted,
                                           StatusInfo:   null,
                                           CustomData:   null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomDeleteUserRoleResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnDeleteUserRoleResponse event

                    var responseLogger = OnDeleteUserRoleResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnDeleteUserRoleResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnDeleteUserRoleResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                // E2E Charging Tariffs Extensions

                #region OnSetDefaultChargingTariff

                ChargingStationServer.OnSetDefaultChargingTariff += async (timestamp,
                                                                           sender,
                                                                           connection,
                                                                           request,
                                                                           cancellationToken) => {

                    #region Send OnSetDefaultChargingTariffRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSetDefaultChargingTariffRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnSetDefaultChargingTariffRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetDefaultChargingTariffRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.SetDefaultChargingTariffResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.SetDefaultChargingTariffResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid SetDefaultChargingTariff request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomSetDefaultChargingTariffRequestSerializer,
                                     CustomChargingTariffSerializer,
                                     CustomPriceSerializer,
                                     CustomTariffElementSerializer,
                                     CustomPriceComponentSerializer,
                                     CustomTaxRateSerializer,
                                     CustomTariffRestrictionsSerializer,
                                     CustomEnergyMixSerializer,
                                     CustomEnergySourceSerializer,
                                     CustomEnvironmentalImpactSerializer,
                                     CustomIdTokenSerializer,
                                     CustomAdditionalInfoSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.SetDefaultChargingTariffResponse(
                                           Request:   request,
                                           Result:    Result.SignatureError(
                                                          $"Invalid signature: {errorResponse}"
                                                      )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming SetDefaultChargingTariff!");

                            List<EVSEStatusInfo<SetDefaultChargingTariffStatus>>? evseStatusInfos = null;

                            if (!request.ChargingTariff.Verify(out var err))
                            {
                                response = new OCPPv2_1.CS.SetDefaultChargingTariffResponse(
                                               Request:      request,
                                               Status:       SetDefaultChargingTariffStatus.InvalidSignature,
                                               StatusInfo:   new StatusInfo(
                                                                 ReasonCode:       "Invalid charging tariff signature(s)!",
                                                                 AdditionalInfo:   err,
                                                                 CustomData:       null
                                                             ),
                                               CustomData:   null
                                           );
                            }

                            else if (!request.EVSEIds.Any())
                            {

                                response = new OCPPv2_1.CS.SetDefaultChargingTariffResponse(
                                               Request:           request,
                                               Status:            SetDefaultChargingTariffStatus.Accepted,
                                               StatusInfo:        null,
                                               EVSEStatusInfos:   null,
                                               CustomData:        null
                                           );

                            }

                            else
                            {

                                foreach (var evseId in request.EVSEIds)
                                {
                                        response = new OCPPv2_1.CS.SetDefaultChargingTariffResponse(
                                                       Request:   request,
                                                       Result:    Result.SignatureError(
                                                                      $"Invalid EVSE identification: {evseId}"
                                                                  )
                                                   );
                                }

                                if (response == null)
                                {

                                    evseStatusInfos = new List<EVSEStatusInfo<SetDefaultChargingTariffStatus>>();

                                    foreach (var evseId in request.EVSEIds)
                                    {

                                        evseStatusInfos.Add(new EVSEStatusInfo<SetDefaultChargingTariffStatus>(
                                                                EVSEId:           evseId,
                                                                Status:           SetDefaultChargingTariffStatus.Accepted,
                                                                ReasonCode:       null,
                                                                AdditionalInfo:   null,
                                                                CustomData:       null
                                                            ));

                                    }

                                    response = new OCPPv2_1.CS.SetDefaultChargingTariffResponse(
                                                   Request:           request,
                                                   Status:            SetDefaultChargingTariffStatus.Accepted,
                                                   StatusInfo:        null,
                                                   EVSEStatusInfos:   evseStatusInfos,
                                                   CustomData:        null
                                               );

                                }

                            }

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSetDefaultChargingTariffResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomEVSEStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnSetDefaultChargingTariffResponse event

                    var responseLogger = OnSetDefaultChargingTariffResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnSetDefaultChargingTariffResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetDefaultChargingTariffResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetDefaultChargingTariff

                ChargingStationServer.OnGetDefaultChargingTariff += async (timestamp,
                                                                           sender,
                                                                           connection,
                                                                           request,
                                                                           cancellationToken) => {

                    #region Send OnGetDefaultChargingTariffRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetDefaultChargingTariffRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnGetDefaultChargingTariffRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetDefaultChargingTariffRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.GetDefaultChargingTariffResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.GetDefaultChargingTariffResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid GetDefaultChargingTariff request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomGetDefaultChargingTariffRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.GetDefaultChargingTariffResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming GetDefaultChargingTariff!");

                            response = new OCPPv2_1.CS.GetDefaultChargingTariffResponse(
                                           Request:             request,
                                           Status:              GenericStatus.Accepted,
                                           StatusInfo:          null,
                                           ChargingTariffs:     null,
                                           ChargingTariffMap:   null,
                                           CustomData:          null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetDefaultChargingTariffResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomChargingTariffSerializer,
                            CustomPriceSerializer,
                            CustomTariffElementSerializer,
                            CustomPriceComponentSerializer,
                            CustomTaxRateSerializer,
                            CustomTariffRestrictionsSerializer,
                            CustomEnergyMixSerializer,
                            CustomEnergySourceSerializer,
                            CustomEnvironmentalImpactSerializer,
                            CustomIdTokenSerializer,
                            CustomAdditionalInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnGetDefaultChargingTariffResponse event

                    var responseLogger = OnGetDefaultChargingTariffResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnGetDefaultChargingTariffResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetDefaultChargingTariffResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnRemoveDefaultChargingTariff

                ChargingStationServer.OnRemoveDefaultChargingTariff += async (timestamp,
                                                                              sender,
                                                                              connection,
                                                                              request,
                                                                              cancellationToken) => {

                    #region Send OnRemoveDefaultChargingTariffRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnRemoveDefaultChargingTariffRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CS.OnRemoveDefaultChargingTariffRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnRemoveDefaultChargingTariffRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    #region Check charging station identification

                    OCPPv2_1.CS.RemoveDefaultChargingTariffResponse? response = null;

                    //if (request.ChargingStationId != Id)
                    //{
                    //    response = new OCPPv2_1.CS.RemoveDefaultChargingTariffResponse(
                    //                   Request:  request,
                    //                   Result:   Result.GenericError(
                    //                                 $"Charging station '{Id}': Invalid RemoveDefaultChargingTariff request for charging station '{request.ChargingStationId}'!"
                    //                             )
                    //               );
                    //}
                    if (1 == 2) { }

                    #endregion

                    #region Check request signature(s)

                    else
                    {

                        if (!SignaturePolicy.VerifyRequestMessage(
                                 request,
                                 request.ToJSON(
                                     CustomRemoveDefaultChargingTariffRequestSerializer,
                                     CustomSignatureSerializer,
                                     CustomCustomDataSerializer
                                 ),
                                 out var errorResponse
                             ))
                        {

                            response = new OCPPv2_1.CS.RemoveDefaultChargingTariffResponse(
                                           Request:  request,
                                           Result:   Result.SignatureError(
                                                         $"Invalid signature: {errorResponse}"
                                                     )
                                       );

                        }

                    #endregion

                        else
                        {

                            DebugX.Log($"Charging station '{Id}': Incoming RemoveDefaultChargingTariff!");

                            response = new OCPPv2_1.CS.RemoveDefaultChargingTariffResponse(
                                           Request:           request,
                                           Status:            RemoveDefaultChargingTariffStatus.Accepted,
                                           StatusInfo:        null,
                                           EVSEStatusInfos:   null,
                                           CustomData:        null
                                       );

                        }

                    }

                    #region Sign response message

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomRemoveDefaultChargingTariffResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomEVSEStatusInfoSerializer2,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);

                    #endregion


                    #region Send OnRemoveDefaultChargingTariffResponse event

                    var responseLogger = OnRemoveDefaultChargingTariffResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CS.OnRemoveDefaultChargingTariffResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnRemoveDefaultChargingTariffResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

            }

            #endregion


            #region (Timer) DoMaintenance(State)

            private void DoMaintenanceSync(Object? State)
            {
                if (!DisableMaintenanceTasks)
                    DoMaintenance(State).Wait();
            }

            protected internal virtual async Task _DoMaintenance(Object State)
            {

                foreach (var enquedRequest in EnqueuedRequests.ToArray())
                {
                    if (CSClient is CS.NetworkingNodeWSClient wsClient)
                    {

                        var response = await wsClient.SendRequest(
                                                 enquedRequest.NetworkingNodeId,
                                                 enquedRequest.NetworkPath,
                                                 enquedRequest.Command,
                                                 enquedRequest.Request.RequestId,
                                                 enquedRequest.RequestJSON
                                             );

                        enquedRequest.ResponseAction(response);

                        EnqueuedRequests.Remove(enquedRequest);

                    }
                }

            }

            private async Task DoMaintenance(Object State)
            {

                if (await MaintenanceSemaphore.WaitAsync(SemaphoreSlimTimeout).
                                               ConfigureAwait(false))
                {
                    try
                    {

                        await _DoMaintenance(State);

                    }
                    catch (Exception e)
                    {

                        while (e.InnerException is not null)
                            e = e.InnerException;

                        DebugX.LogException(e);

                    }
                    finally
                    {
                        MaintenanceSemaphore.Release();
                    }
                }
                else
                    DebugX.LogT("Could not aquire the maintenance tasks lock!");

            }

            #endregion

            #region (Timer) DoSendHeartbeatSync(State)

            private void DoSendHeartbeatSync(Object? State)
            {
                if (!DisableSendHeartbeats)
                {
                    try
                    {
                        this.SendHeartbeat().Wait();
                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e, nameof(DoSendHeartbeatSync));
                    }
                }
            }

            #endregion


            #region (private) NextRequestId

            public Request_Id NextRequestId
            {
                get
                {

                    Interlocked.Increment(ref internalRequestId);

                    return Request_Id.Parse(internalRequestId.ToString());

                }
            }

            #endregion


            public static void ShowAllRequests()
            {

                var interfaceType      = typeof(IRequest);
                var implementingTypes  = Assembly.GetAssembly(interfaceType)?.
                                                  GetTypes().
                                                  Where(t => interfaceType.IsAssignableFrom(t) &&
                                                             !t.IsInterface &&
                                                              t.FullName is not null &&
                                                              t.FullName.StartsWith("cloud.charging.open.protocols.OCPPv2_1.CS.")).
                                                  ToArray() ?? [];

                foreach (var type in implementingTypes)
                {

                    var jsonJDContextProp  = type.GetField("DefaultJSONLDContext", BindingFlags.Public | BindingFlags.Static);
                    var jsonJDContextValue = jsonJDContextProp?.GetValue(null)?.ToString();

                    Console.WriteLine($"{type.Name}: JSONJDContext = {jsonJDContextValue}");

                }

            }

            public static void ShowAllResponses()
            {

                var interfaceType      = typeof(IResponse);
                var implementingTypes  = Assembly.GetAssembly(interfaceType)?.
                                                  GetTypes().
                                                  Where(t => interfaceType.IsAssignableFrom(t) &&
                                                             !t.IsInterface &&
                                                              t.FullName is not null &&
                                                              t.FullName.StartsWith("cloud.charging.open.protocols.OCPPv2_1.CSMS.")).
                                                  ToArray() ?? [];

                foreach (var type in implementingTypes)
                {

                    var jsonJDContextProp  = type.GetField("DefaultJSONLDContext", BindingFlags.Public | BindingFlags.Static);
                    var jsonJDContextValue = jsonJDContextProp?.GetValue(null)?.ToString();

                    Console.WriteLine($"{type.Name}: JSONJDContext = {jsonJDContextValue}");

                }

            }


            #region Charging Station -> CSMS Messages

            #region SendBootNotification                  (Request)

            /// <summary>
            /// Send a boot notification.
            /// </summary>
            /// <param name="Request">A boot notification request.</param>
            public async Task<OCPPv2_1.CSMS.BootNotificationResponse>
                SendBootNotification(OCPPv2_1.CS.BootNotificationRequest Request)

            {

                #region Send OnBootNotificationRequest event

                var startTime  = Timestamp.Now;

                try
                {

                    OnBootNotificationRequest?.Invoke(startTime,
                                                      this,
                                                      Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnBootNotificationRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomBootNotificationRequestSerializer,
                                             CustomChargingStationSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendBootNotification(Request)

                                         : new OCPPv2_1.CSMS.BootNotificationResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.BootNotificationResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomBootNotificationResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                switch (response.Status)
                {

                    case RegistrationStatus.Accepted:
                        this.CSMSTime               = response.CurrentTime;
                        this.SendHeartbeatEvery     = response.Interval >= TimeSpan.FromSeconds(5) ? response.Interval : TimeSpan.FromSeconds(5);
                        this.SendHeartbeatTimer.Change(this.SendHeartbeatEvery, this.SendHeartbeatEvery);
                        this.DisableSendHeartbeats  = false;
                        break;

                    case RegistrationStatus.Pending:
                        // Do not reconnect before: response.HeartbeatInterval
                        break;

                    case RegistrationStatus.Rejected:
                        // Do not reconnect before: response.HeartbeatInterval
                        break;

                }


                #region Send OnBootNotificationResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnBootNotificationResponse?.Invoke(endTime,
                                                       this,
                                                       Request,
                                                       response,
                                                       endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnBootNotificationResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendFirmwareStatusNotification        (Request)

            /// <summary>
            /// Send a firmware status notification to the CSMS.
            /// </summary>
            /// <param name="Status">The status of the firmware installation.</param>
            /// <param name="UpdateFirmwareRequestId">The (optional) request id that was provided in the UpdateFirmwareRequest that started this firmware update.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.FirmwareStatusNotificationResponse>
                SendFirmwareStatusNotification(OCPPv2_1.CS.FirmwareStatusNotificationRequest Request)

            {

                #region Send OnFirmwareStatusNotificationRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnFirmwareStatusNotificationRequest?.Invoke(startTime,
                                                                this,
                                                                Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnFirmwareStatusNotificationRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomFirmwareStatusNotificationRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendFirmwareStatusNotification(Request)

                                         : new OCPPv2_1.CSMS.FirmwareStatusNotificationResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.FirmwareStatusNotificationResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomFirmwareStatusNotificationResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnFirmwareStatusNotificationResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnFirmwareStatusNotificationResponse?.Invoke(endTime,
                                                                 this,
                                                                 Request,
                                                                 response,
                                                                 endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnFirmwareStatusNotificationResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendPublishFirmwareStatusNotification (Request)

            /// <summary>
            /// Send a publish firmware status notification to the CSMS.
            /// </summary>
            /// <param name="Status">The progress status of the publish firmware request.</param>
            /// <param name="PublishFirmwareStatusNotificationRequestId">The optional unique identification of the publish firmware status notification request.</param>
            /// <param name="DownloadLocations">The optional enumeration of downstream firmware download locations for all attached charging stations.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.PublishFirmwareStatusNotificationResponse>
                SendPublishFirmwareStatusNotification(OCPPv2_1.CS.PublishFirmwareStatusNotificationRequest Request)

            {

                #region Send OnPublishFirmwareStatusNotificationRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnPublishFirmwareStatusNotificationRequest?.Invoke(startTime,
                                                                       this,
                                                                       Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnPublishFirmwareStatusNotificationRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomPublishFirmwareStatusNotificationRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendPublishFirmwareStatusNotification(Request)

                                         : new OCPPv2_1.CSMS.PublishFirmwareStatusNotificationResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.PublishFirmwareStatusNotificationResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomPublishFirmwareStatusNotificationResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnPublishFirmwareStatusNotificationResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnPublishFirmwareStatusNotificationResponse?.Invoke(endTime,
                                                                        this,
                                                                        Request,
                                                                        response,
                                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnPublishFirmwareStatusNotificationResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendHeartbeat                         (Request)

            /// <summary>
            /// Send a heartbeat.
            /// </summary>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.HeartbeatResponse>
                SendHeartbeat(OCPPv2_1.CS.HeartbeatRequest Request)

            {

                #region Send OnHeartbeatRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnHeartbeatRequest?.Invoke(startTime,
                                               this,
                                               Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnHeartbeatRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomHeartbeatRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendHeartbeat(Request)

                                         : new OCPPv2_1.CSMS.HeartbeatResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.HeartbeatResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomHeartbeatResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnHeartbeatResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnHeartbeatResponse?.Invoke(endTime,
                                                this,
                                                Request,
                                                response,
                                                endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnHeartbeatResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyEvent                           (Request)

            /// <summary>
            /// Notify about an event.
            /// </summary>
            /// <param name="GeneratedAt">The timestamp of the moment this message was generated at the charging station.</param>
            /// <param name="SequenceNumber">The sequence number of this message. First message starts at 0.</param>
            /// <param name="EventData">The enumeration of event data.</param>
            /// <param name="ToBeContinued">The optional "to be continued" indicator whether another part of the monitoring data follows in an upcoming NotifyCustomerInformationRequest message. Default value when omitted is false.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyEventResponse>
                NotifyEvent(OCPPv2_1.CS.NotifyEventRequest Request)

            {

                #region Send OnNotifyEventRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyEventRequest?.Invoke(startTime,
                                                 this,
                                                 Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyEventRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomNotifyEventRequestSerializer,
                                             CustomEventDataSerializer,
                                             CustomComponentSerializer,
                                             CustomEVSESerializer,
                                             CustomVariableSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyEvent(Request)

                                         : new OCPPv2_1.CSMS.NotifyEventResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyEventResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyEventResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyEventResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyEventResponse?.Invoke(endTime,
                                                  this,
                                                  Request,
                                                  response,
                                                  endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyEventResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendSecurityEventNotification         (Request)

            /// <summary>
            /// Send a security event notification.
            /// </summary>
            /// <param name="Type">Type of the security event.</param>
            /// <param name="Timestamp">The timestamp of the security event.</param>
            /// <param name="TechInfo">Optional additional information about the occurred security event.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.SecurityEventNotificationResponse>
                SendSecurityEventNotification(OCPPv2_1.CS.SecurityEventNotificationRequest Request)

            {

                #region Send OnSecurityEventNotificationRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSecurityEventNotificationRequest?.Invoke(startTime,
                                                               this,
                                                               Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSecurityEventNotificationRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomSecurityEventNotificationRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendSecurityEventNotification(Request)

                                         : new OCPPv2_1.CSMS.SecurityEventNotificationResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.SecurityEventNotificationResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSecurityEventNotificationResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSecurityEventNotificationResponse event

                var endTime = org.GraphDefined.Vanaheimr.Illias.Timestamp.Now;

                try
                {

                    OnSecurityEventNotificationResponse?.Invoke(endTime,
                                                                this,
                                                                Request,
                                                                response,
                                                                endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSecurityEventNotificationResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyReport                          (Request)

            /// <summary>
            /// Notify about a report.
            /// </summary>
            /// <param name="NotifyReportRequestId">The unique identification of the notify report request.</param>
            /// <param name="SequenceNumber">The sequence number of this message. First message starts at 0.</param>
            /// <param name="GeneratedAt">The timestamp of the moment this message was generated at the charging station.</param>
            /// <param name="ReportData">The enumeration of report data. A single report data element contains only the component, variable and variable report data that caused the event.</param>
            /// <param name="ToBeContinued">The optional "to be continued" indicator whether another part of the report follows in an upcoming NotifyReportRequest message. Default value when omitted is false.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyReportResponse>
                NotifyReport(OCPPv2_1.CS.NotifyReportRequest Request)

            {

                #region Send OnNotifyReportRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyReportRequest?.Invoke(startTime,
                                                  this,
                                                  Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyReportRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomNotifyReportRequestSerializer,
                                             CustomReportDataSerializer,
                                             CustomComponentSerializer,
                                             CustomEVSESerializer,
                                             CustomVariableSerializer,
                                             CustomVariableAttributeSerializer,
                                             CustomVariableCharacteristicsSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyReport(Request)

                                         : new OCPPv2_1.CSMS.NotifyReportResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyReportResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyReportResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyReportResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyReportResponse?.Invoke(endTime,
                                                   this,
                                                   Request,
                                                   response,
                                                   endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyReportResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyMonitoringReport                (Request)

            /// <summary>
            /// Notify about a monitoring report.
            /// </summary>
            /// <param name="NotifyMonitoringReportRequestId">The unique identification of the notify monitoring report request.</param>
            /// <param name="SequenceNumber">The sequence number of this message. First message starts at 0.</param>
            /// <param name="GeneratedAt">The timestamp of the moment this message was generated at the charging station.</param>
            /// <param name="MonitoringData">The enumeration of event data. A single event data element contains only the component, variable and variable monitoring data that caused the event.</param>
            /// <param name="ToBeContinued">The optional "to be continued" indicator whether another part of the monitoring data follows in an upcoming NotifyCustomerInformationRequest message. Default value when omitted is false.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyMonitoringReportResponse>
                NotifyMonitoringReport(OCPPv2_1.CS.NotifyMonitoringReportRequest Request)

            {

                #region Send OnNotifyMonitoringReportRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyMonitoringReportRequest?.Invoke(startTime,
                                                            this,
                                                            Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyMonitoringReportRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomNotifyMonitoringReportRequestSerializer,
                                             CustomMonitoringDataSerializer,
                                             CustomComponentSerializer,
                                             CustomEVSESerializer,
                                             CustomVariableSerializer,
                                             CustomVariableMonitoringSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyMonitoringReport(Request)

                                         : new OCPPv2_1.CSMS.NotifyMonitoringReportResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyMonitoringReportResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyMonitoringReportResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyMonitoringReportResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyMonitoringReportResponse?.Invoke(endTime,
                                                             this,
                                                             Request,
                                                             response,
                                                             endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyMonitoringReportResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendLogStatusNotification             (Request)

            /// <summary>
            /// Send a log status notification.
            /// </summary>
            /// <param name="Status">The status of the log upload.</param>
            /// <param name="LogRequestId">The optional request id that was provided in the GetLog request that started this log upload.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.LogStatusNotificationResponse>
                SendLogStatusNotification(OCPPv2_1.CS.LogStatusNotificationRequest Request)

            {

                #region Send OnLogStatusNotificationRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnLogStatusNotificationRequest?.Invoke(startTime,
                                                           this,
                                                           Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnLogStatusNotificationRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomLogStatusNotificationRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendLogStatusNotification(Request)

                                         : new OCPPv2_1.CSMS.LogStatusNotificationResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.LogStatusNotificationResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomLogStatusNotificationResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnLogStatusNotificationResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnLogStatusNotificationResponse?.Invoke(endTime,
                                                            this,
                                                            Request,
                                                            response,
                                                            endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnLogStatusNotificationResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region TransferData                          (Request)

            /// <summary>
            /// Send the given vendor-specific data to the CSMS.
            /// </summary>
            /// <param name="VendorId">The vendor identification or namespace of the given message.</param>
            /// <param name="MessageId">An optional message identification.</param>
            /// <param name="Data">A vendor-specific JSON token.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.DataTransferResponse>
                TransferData(OCPPv2_1.CS.DataTransferRequest Request)

            {

                #region Send OnDataTransferRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnDataTransferRequest?.Invoke(startTime,
                                                  this,
                                                  Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDataTransferRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomDataTransferRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.TransferData(Request)

                                         : new OCPPv2_1.CSMS.DataTransferResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.DataTransferResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomDataTransferResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnDataTransferResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnDataTransferResponse?.Invoke(endTime,
                                                   this,
                                                   Request,
                                                   response,
                                                   endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDataTransferResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region SendCertificateSigningRequest         (Request)

            /// <summary>
            /// Send a heartbeat.
            /// </summary>
            /// <param name="CSR">The PEM encoded RFC 2986 certificate signing request (CSR) [max 5500].</param>
            /// <param name="CertificateType">Whether the certificate is to be used for both the 15118 connection (if implemented) and the charging station to central system (CSMS) connection.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.SignCertificateResponse>
                SendCertificateSigningRequest(OCPPv2_1.CS.SignCertificateRequest Request)

            {

                #region Send OnSignCertificateRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSignCertificateRequest?.Invoke(startTime,
                                                     this,
                                                     Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSignCertificateRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomSignCertificateRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendCertificateSigningRequest(Request)

                                         : new OCPPv2_1.CSMS.SignCertificateResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.SignCertificateResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSignCertificateResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSignCertificateResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSignCertificateResponse?.Invoke(endTime,
                                                      this,
                                                      Request,
                                                      response,
                                                      endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSignCertificateResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region Get15118EVCertificate                 (Request)

            /// <summary>
            /// Get an ISO 15118 contract certificate.
            /// </summary>
            /// <param name="ISO15118SchemaVersion">ISO/IEC 15118 schema version used for the session between charging station and electric vehicle. Required for parsing the EXI data stream within the central system.</param>
            /// <param name="CertificateAction">Whether certificate needs to be installed or updated.</param>
            /// <param name="EXIRequest">Base64 encoded certificate installation request from the electric vehicle. [max 5600]</param>
            /// <param name="MaximumContractCertificateChains">Optional number of contracts that EV wants to install at most.</param>
            /// <param name="PrioritizedEMAIds">An optional enumeration of eMA Ids that have priority in case more contracts than maximumContractCertificateChains are available.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.Get15118EVCertificateResponse>
                Get15118EVCertificate(OCPPv2_1.CS.Get15118EVCertificateRequest Request)

            {

                #region Send OnGet15118EVCertificateRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGet15118EVCertificateRequest?.Invoke(startTime,
                                                           this,
                                                           Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGet15118EVCertificateRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomGet15118EVCertificateRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.Get15118EVCertificate(Request)

                                         : new OCPPv2_1.CSMS.Get15118EVCertificateResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.Get15118EVCertificateResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGet15118EVCertificateResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGet15118EVCertificateResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGet15118EVCertificateResponse?.Invoke(endTime,
                                                            this,
                                                            Request,
                                                            response,
                                                            endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGet15118EVCertificateResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetCertificateStatus                  (Request)

            /// <summary>
            /// Get the status of a certificate.
            /// </summary>
            /// <param name="OCSPRequestData">The certificate of which the status is requested.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.GetCertificateStatusResponse>
                GetCertificateStatus(OCPPv2_1.CS.GetCertificateStatusRequest Request)

            {

                #region Send OnGetCertificateStatusRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetCertificateStatusRequest?.Invoke(startTime,
                                                          this,
                                                          Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetCertificateStatusRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomGetCertificateStatusRequestSerializer,
                                             CustomOCSPRequestDataSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.GetCertificateStatus(Request)

                                         : new OCPPv2_1.CSMS.GetCertificateStatusResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.GetCertificateStatusResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetCertificateStatusResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetCertificateStatusResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetCertificateStatusResponse?.Invoke(endTime,
                                                           this,
                                                           Request,
                                                           response,
                                                           endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetCertificateStatusResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetCRL                                (Request)

            /// <summary>
            /// Get a certificate revocation list from CSMS for the specified certificate.
            /// </summary>
            /// 
            /// <param name="GetCRLRequestId">The identification of this request.</param>
            /// <param name="CertificateHashData">Certificate hash data.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.GetCRLResponse>
                GetCRL(OCPPv2_1.CS.GetCRLRequest Request)

            {

                #region Send OnGetCRLRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetCRLRequest?.Invoke(startTime,
                                            this,
                                            Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetCRLRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomGetCRLRequestSerializer,
                                             CustomCertificateHashDataSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.GetCRL(Request)

                                         : new OCPPv2_1.CSMS.GetCRLResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.GetCRLResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetCRLResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetCRLResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetCRLResponse?.Invoke(endTime,
                                             this,
                                             Request,
                                             response,
                                             endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetCRLResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region SendReservationStatusUpdate           (Request)

            /// <summary>
            /// Send a reservation status update.
            /// </summary>
            /// <param name="ReservationId">The unique identification of the transaction to update.</param>
            /// <param name="ReservationUpdateStatus">The updated reservation status.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.ReservationStatusUpdateResponse>
                SendReservationStatusUpdate(OCPPv2_1.CS.ReservationStatusUpdateRequest Request)

            {

                #region Send OnReservationStatusUpdateRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnReservationStatusUpdateRequest?.Invoke(startTime,
                                                             this,
                                                             Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnReservationStatusUpdateRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomReservationStatusUpdateRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendReservationStatusUpdate(Request)

                                         : new OCPPv2_1.CSMS.ReservationStatusUpdateResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.ReservationStatusUpdateResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomReservationStatusUpdateResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnReservationStatusUpdateResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnReservationStatusUpdateResponse?.Invoke(endTime,
                                                              this,
                                                              Request,
                                                              response,
                                                              endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnReservationStatusUpdateResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region Authorize                             (Request)

            /// <summary>
            /// Authorize the given token.
            /// </summary>
            /// <param name="IdToken">The identifier that needs to be authorized.</param>
            /// <param name="Certificate">An optional X.509 certificated presented by the electric vehicle/user (PEM format).</param>
            /// <param name="ISO15118CertificateHashData">Optional information to verify the electric vehicle/user contract certificate via OCSP.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.AuthorizeResponse>
                Authorize(OCPPv2_1.CS.AuthorizeRequest Request)

            {

                #region Send OnAuthorizeRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnAuthorizeRequest?.Invoke(startTime,
                                               this,
                                               Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnAuthorizeRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomAuthorizeRequestSerializer,
                                             CustomIdTokenSerializer,
                                             CustomAdditionalInfoSerializer,
                                             CustomOCSPRequestDataSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.Authorize(Request)

                                         : new OCPPv2_1.CSMS.AuthorizeResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.AuthorizeResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomAuthorizeResponseSerializer,
                        CustomIdTokenInfoSerializer,
                        CustomIdTokenSerializer,
                        CustomAdditionalInfoSerializer,
                        CustomMessageContentSerializer,
                        CustomTransactionLimitsSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnAuthorizeResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnAuthorizeResponse?.Invoke(endTime,
                                                this,
                                                Request,
                                                response,
                                                endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnAuthorizeResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyEVChargingNeeds                 (Request)

            /// <summary>
            /// Notify about EV charging needs.
            /// </summary>
            /// <param name="EVSEId">The EVSE and connector to which the EV is connected to.</param>
            /// <param name="ChargingNeeds">The characteristics of the energy delivery required.</param>
            /// <param name="ReceivedTimestamp">An optional timestamp when the EV charging needs had been received, e.g. when the charging station was offline.</param>
            /// <param name="MaxScheduleTuples">The optional maximum number of schedule tuples per schedule the car supports.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyEVChargingNeedsResponse>
                NotifyEVChargingNeeds(OCPPv2_1.CS.NotifyEVChargingNeedsRequest Request)

            {

                #region Send OnNotifyEVChargingNeedsRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyEVChargingNeedsRequest?.Invoke(startTime,
                                                           this,
                                                           Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyEVChargingNeedsRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomNotifyEVChargingNeedsRequestSerializer,
                                             CustomChargingNeedsSerializer,
                                             CustomACChargingParametersSerializer,
                                             CustomDCChargingParametersSerializer,
                                             CustomV2XChargingParametersSerializer,
                                             CustomEVEnergyOfferSerializer,
                                             CustomEVPowerScheduleSerializer,
                                             CustomEVPowerScheduleEntrySerializer,
                                             CustomEVAbsolutePriceScheduleSerializer,
                                             CustomEVAbsolutePriceScheduleEntrySerializer,
                                             CustomEVPriceRuleSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyEVChargingNeeds(Request)

                                         : new OCPPv2_1.CSMS.NotifyEVChargingNeedsResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyEVChargingNeedsResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyEVChargingNeedsResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyEVChargingNeedsResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyEVChargingNeedsResponse?.Invoke(endTime,
                                                            this,
                                                            Request,
                                                            response,
                                                            endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyEVChargingNeedsResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendTransactionEvent                  (Request)

            /// <summary>
            /// Send a transaction event.
            /// </summary>
            /// <param name="EventType">The type of this transaction event. The first event of a transaction SHALL be of type "started", the last of type "ended". All others should be of type "updated".</param>
            /// <param name="Timestamp">The timestamp at which this transaction event occurred.</param>
            /// <param name="TriggerReason">The reason the charging station sends this message.</param>
            /// <param name="SequenceNumber">This incremental sequence number, helps to determine whether all messages of a transaction have been received.</param>
            /// <param name="TransactionInfo">Transaction related information.</param>
            /// 
            /// <param name="Offline">An optional indication whether this transaction event happened when the charging station was offline.</param>
            /// <param name="NumberOfPhasesUsed">An optional numer of electrical phases used, when the charging station is able to report it.</param>
            /// <param name="CableMaxCurrent">An optional maximum current of the connected cable in amperes.</param>
            /// <param name="ReservationId">An optional unqiue reservation identification of the reservation that terminated as a result of this transaction.</param>
            /// <param name="IdToken">An optional identification token for which a transaction has to be/was started.</param>
            /// <param name="EVSE">An optional indication of the EVSE (and connector) used.</param>
            /// <param name="MeterValues">An optional enumeration of meter values.</param>
            /// <param name="PreconditioningStatus">The optional current status of the battery management system within the EV.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.TransactionEventResponse>
                SendTransactionEvent(OCPPv2_1.CS.TransactionEventRequest Request)

            {

                #region Send OnTransactionEventRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnTransactionEventRequest?.Invoke(startTime,
                                                      this,
                                                      Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnTransactionEventRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomTransactionEventRequestSerializer,
                                             CustomTransactionSerializer,
                                             CustomIdTokenSerializer,
                                             CustomAdditionalInfoSerializer,
                                             CustomEVSESerializer,
                                             CustomMeterValueSerializer,
                                             CustomSampledValueSerializer,
                                             CustomSignedMeterValueSerializer,
                                             CustomUnitsOfMeasureSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendTransactionEvent(Request)

                                         : new OCPPv2_1.CSMS.TransactionEventResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.TransactionEventResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomTransactionEventResponseSerializer,
                        CustomIdTokenInfoSerializer,
                        CustomIdTokenSerializer,
                        CustomAdditionalInfoSerializer,
                        CustomMessageContentSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnTransactionEventResponse event

                var endTime = org.GraphDefined.Vanaheimr.Illias.Timestamp.Now;

                try
                {

                    OnTransactionEventResponse?.Invoke(endTime,
                                                       this,
                                                       Request,
                                                       response,
                                                       endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnTransactionEventResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendStatusNotification                (Request)

            /// <summary>
            /// Send a status notification for the given connector.
            /// </summary>
            /// <param name="EVSEId">The identification of the EVSE to which the connector belongs for which the the status is reported.</param>
            /// <param name="ConnectorId">The identification of the connector within the EVSE for which the status is reported.</param>
            /// <param name="Timestamp">The time for which the status is reported.</param>
            /// <param name="Status">The current status of the connector.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.StatusNotificationResponse>
                SendStatusNotification(OCPPv2_1.CS.StatusNotificationRequest Request)

            {

                #region Send OnStatusNotificationRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnStatusNotificationRequest?.Invoke(startTime,
                                                        this,
                                                        Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnStatusNotificationRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomStatusNotificationRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendStatusNotification(Request)

                                         : new OCPPv2_1.CSMS.StatusNotificationResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.StatusNotificationResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomStatusNotificationResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnStatusNotificationResponse event

                var endTime = org.GraphDefined.Vanaheimr.Illias.Timestamp.Now;

                try
                {

                    OnStatusNotificationResponse?.Invoke(endTime,
                                                         this,
                                                         Request,
                                                         response,
                                                         endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnStatusNotificationResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendMeterValues                       (Request)

            /// <summary>
            /// Send a meter values for the given connector.
            /// </summary>
            /// <param name="EVSEId">The EVSE identification at the charging station.</param>
            /// <param name="MeterValues">The sampled meter values with timestamps.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.MeterValuesResponse>
                SendMeterValues(OCPPv2_1.CS.MeterValuesRequest Request)

            {

                #region Send OnMeterValuesRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnMeterValuesRequest?.Invoke(startTime,
                                                 this,
                                                 Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnMeterValuesRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomMeterValuesRequestSerializer,
                                             CustomMeterValueSerializer,
                                             CustomSampledValueSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendMeterValues(Request)

                                         : new OCPPv2_1.CSMS.MeterValuesResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.MeterValuesResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomMeterValuesResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnMeterValuesResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnMeterValuesResponse?.Invoke(endTime,
                                                  this,
                                                  Request,
                                                  response,
                                                  endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnMeterValuesResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyChargingLimit                   (Request)

            /// <summary>
            /// Notify about a charging limit.
            /// </summary>
            /// <param name="ChargingLimit">The charging limit, its source and whether it is grid critical.</param>
            /// <param name="ChargingSchedules">Limits for the available power or current over time, as set by the external source.</param>
            /// <param name="EVSEId">An optional EVSE identification, when the charging schedule contained in this notification applies to an EVSE.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyChargingLimitResponse>
                NotifyChargingLimit(OCPPv2_1.CS.NotifyChargingLimitRequest Request)

            {

                #region Send OnNotifyChargingLimitRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyChargingLimitRequest?.Invoke(startTime,
                                                         this,
                                                         Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyChargingLimitRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(

                                             CustomNotifyChargingLimitRequestSerializer,
                                             CustomChargingScheduleSerializer,
                                             CustomLimitBeyondSoCSerializer,
                                             CustomChargingSchedulePeriodSerializer,
                                             CustomV2XFreqWattEntrySerializer,
                                             CustomV2XSignalWattEntrySerializer,
                                             CustomSalesTariffSerializer,
                                             CustomSalesTariffEntrySerializer,
                                             CustomRelativeTimeIntervalSerializer,
                                             CustomConsumptionCostSerializer,
                                             CustomCostSerializer,

                                             CustomAbsolutePriceScheduleSerializer,
                                             CustomPriceRuleStackSerializer,
                                             CustomPriceRuleSerializer,
                                             CustomTaxRuleSerializer,
                                             CustomOverstayRuleListSerializer,
                                             CustomOverstayRuleSerializer,
                                             CustomAdditionalServiceSerializer,

                                             CustomPriceLevelScheduleSerializer,
                                             CustomPriceLevelScheduleEntrySerializer,

                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer

                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyChargingLimit(Request)

                                         : new OCPPv2_1.CSMS.NotifyChargingLimitResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyChargingLimitResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyChargingLimitResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyChargingLimitResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyChargingLimitResponse?.Invoke(endTime,
                                                          this,
                                                          Request,
                                                          response,
                                                          endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyChargingLimitResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendClearedChargingLimit              (Request)

            /// <summary>
            /// Send a heartbeat.
            /// </summary>
            /// <param name="ChargingLimitSource">A source of the charging limit.</param>
            /// <param name="EVSEId">An optional EVSE identification.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.ClearedChargingLimitResponse>
                SendClearedChargingLimit(OCPPv2_1.CS.ClearedChargingLimitRequest Request)

            {

                #region Send OnClearedChargingLimitRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnClearedChargingLimitRequest?.Invoke(startTime,
                                                          this,
                                                          Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearedChargingLimitRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomClearedChargingLimitRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.SendClearedChargingLimit(Request)

                                         : new OCPPv2_1.CSMS.ClearedChargingLimitResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.ClearedChargingLimitResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomClearedChargingLimitResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnClearedChargingLimitResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnClearedChargingLimitResponse?.Invoke(endTime,
                                                           this,
                                                           Request,
                                                           response,
                                                           endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearedChargingLimitResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region ReportChargingProfiles                (Request)

            /// <summary>
            /// Report about all charging profiles.
            /// </summary>
            /// <param name="ReportChargingProfilesRequestId">The request identification used to match the GetChargingProfilesRequest message with the resulting ReportChargingProfilesRequest messages. When the CSMS provided a requestId in the GetChargingProfilesRequest, this field SHALL contain the same value.</param>
            /// <param name="ChargingLimitSource">The source that has installed this charging profile.</param>
            /// <param name="EVSEId">The evse to which the charging profile applies. If evseId = 0, the message contains an overall limit for the charging station.</param>
            /// <param name="ChargingProfiles">The enumeration of charging profiles.</param>
            /// <param name="ToBeContinued">The optional "to be continued" indicator whether another part of the charging profiles follows. Default value when omitted is false.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.ReportChargingProfilesResponse>
                ReportChargingProfiles(OCPPv2_1.CS.ReportChargingProfilesRequest Request)

            {

                #region Send OnReportChargingProfilesRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnReportChargingProfilesRequest?.Invoke(startTime,
                                                            this,
                                                            Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnReportChargingProfilesRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(

                                             CustomReportChargingProfilesRequestSerializer,
                                             CustomChargingProfileSerializer,
                                             CustomLimitBeyondSoCSerializer,
                                             CustomChargingScheduleSerializer,
                                             CustomChargingSchedulePeriodSerializer,
                                             CustomV2XFreqWattEntrySerializer,
                                             CustomV2XSignalWattEntrySerializer,
                                             CustomSalesTariffSerializer,
                                             CustomSalesTariffEntrySerializer,
                                             CustomRelativeTimeIntervalSerializer,
                                             CustomConsumptionCostSerializer,
                                             CustomCostSerializer,

                                             CustomAbsolutePriceScheduleSerializer,
                                             CustomPriceRuleStackSerializer,
                                             CustomPriceRuleSerializer,
                                             CustomTaxRuleSerializer,
                                             CustomOverstayRuleListSerializer,
                                             CustomOverstayRuleSerializer,
                                             CustomAdditionalServiceSerializer,

                                             CustomPriceLevelScheduleSerializer,
                                             CustomPriceLevelScheduleEntrySerializer,

                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer

                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.ReportChargingProfiles(Request)

                                         : new OCPPv2_1.CSMS.ReportChargingProfilesResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.ReportChargingProfilesResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomReportChargingProfilesResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnReportChargingProfilesResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnReportChargingProfilesResponse?.Invoke(endTime,
                                                             this,
                                                             Request,
                                                             response,
                                                             endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnReportChargingProfilesResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyEVChargingSchedule              (Request)

            /// <summary>
            /// Notify about an EV charging schedule.
            /// </summary>
            /// <param name="NotifyEVChargingScheduleRequestId">The request identification used to match the GetChargingProfilesRequest message with the resulting NotifyEVChargingScheduleRequest messages. When the CSMS provided a requestId in the GetChargingProfilesRequest, this field SHALL contain the same value.</param>
            /// <param name="TimeBase">The charging periods contained within the charging schedule are relative to this time base.</param>
            /// <param name="EVSEId">The charging schedule applies to this EVSE.</param>
            /// <param name="ChargingSchedule">Planned energy consumption of the EV over time. Always relative to the time base.</param>
            /// <param name="SelectedScheduleTupleId">The optional identification of the selected charging schedule from the provided charging profile.</param>
            /// <param name="PowerToleranceAcceptance">True when power tolerance is accepted.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyEVChargingScheduleResponse>
                NotifyEVChargingSchedule(OCPPv2_1.CS.NotifyEVChargingScheduleRequest Request)

            {

                #region Send OnNotifyEVChargingScheduleRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyEVChargingScheduleRequest?.Invoke(startTime,
                                                              this,
                                                              Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyEVChargingScheduleRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(

                                             CustomNotifyEVChargingScheduleRequestSerializer,
                                             CustomChargingScheduleSerializer,
                                             CustomLimitBeyondSoCSerializer,
                                             CustomChargingSchedulePeriodSerializer,
                                             CustomV2XFreqWattEntrySerializer,
                                             CustomV2XSignalWattEntrySerializer,
                                             CustomSalesTariffSerializer,
                                             CustomSalesTariffEntrySerializer,
                                             CustomRelativeTimeIntervalSerializer,
                                             CustomConsumptionCostSerializer,
                                             CustomCostSerializer,

                                             CustomAbsolutePriceScheduleSerializer,
                                             CustomPriceRuleStackSerializer,
                                             CustomPriceRuleSerializer,
                                             CustomTaxRuleSerializer,
                                             CustomOverstayRuleListSerializer,
                                             CustomOverstayRuleSerializer,
                                             CustomAdditionalServiceSerializer,

                                             CustomPriceLevelScheduleSerializer,
                                             CustomPriceLevelScheduleEntrySerializer,

                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer

                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyEVChargingSchedule(Request)

                                         : new OCPPv2_1.CSMS.NotifyEVChargingScheduleResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyEVChargingScheduleResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyEVChargingScheduleResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyEVChargingScheduleResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyEVChargingScheduleResponse?.Invoke(endTime,
                                                               this,
                                                               Request,
                                                               response,
                                                               endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyEVChargingScheduleResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyPriorityCharging                (Request)

            /// <summary>
            /// Notify about priority charging.
            /// </summary>
            /// <param name="NotifyPriorityChargingRequestId">The request identification used to match the GetChargingProfilesRequest message with the resulting NotifyPriorityChargingRequest messages. When the CSMS provided a requestId in the GetChargingProfilesRequest, this field SHALL contain the same value.</param>
            /// <param name="TransactionId">The transaction for which priority charging is requested.</param>
            /// <param name="Activated">True, when priority charging was activated, or false, when it has stopped using the priority charging profile.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyPriorityChargingResponse>
                NotifyPriorityCharging(OCPPv2_1.CS.NotifyPriorityChargingRequest Request)

            {

                #region Send OnNotifyPriorityChargingRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyPriorityChargingRequest?.Invoke(startTime,
                                                            this,
                                                            Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyPriorityChargingRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomNotifyPriorityChargingRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyPriorityCharging(Request)

                                         : new OCPPv2_1.CSMS.NotifyPriorityChargingResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyPriorityChargingResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyPriorityChargingResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyPriorityChargingResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyPriorityChargingResponse?.Invoke(endTime,
                                                             this,
                                                             Request,
                                                             response,
                                                             endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyPriorityChargingResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region PullDynamicScheduleUpdate             (Request)

            /// <summary>
            /// Report about all charging profiles.
            /// </summary>
            /// <param name="PullDynamicScheduleUpdateRequestId">The request identification used to match the GetChargingProfilesRequest message with the resulting PullDynamicScheduleUpdateRequest messages. When the CSMS provided a requestId in the GetChargingProfilesRequest, this field SHALL contain the same value.</param>
            /// <param name="ChargingProfileId">The identification of the charging profile for which an update is requested.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.PullDynamicScheduleUpdateResponse>
                PullDynamicScheduleUpdate(OCPPv2_1.CS.PullDynamicScheduleUpdateRequest Request)

            {

                #region Send OnPullDynamicScheduleUpdateRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnPullDynamicScheduleUpdateRequest?.Invoke(startTime,
                                                               this,
                                                               Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnPullDynamicScheduleUpdateRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomPullDynamicScheduleUpdateRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.PullDynamicScheduleUpdate(Request)

                                         : new OCPPv2_1.CSMS.PullDynamicScheduleUpdateResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.PullDynamicScheduleUpdateResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomPullDynamicScheduleUpdateResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnPullDynamicScheduleUpdateResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnPullDynamicScheduleUpdateResponse?.Invoke(endTime,
                                                                this,
                                                                Request,
                                                                response,
                                                                endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnPullDynamicScheduleUpdateResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region NotifyDisplayMessages                 (Request)

            /// <summary>
            /// NotifyDisplayMessages the given token.
            /// </summary>
            /// <param name="NotifyDisplayMessagesRequestId">The unique identification of the notify display messages request.</param>
            /// <param name="MessageInfos">The requested display messages as configured in the charging station.</param>
            /// <param name="ToBeContinued">The optional "to be continued" indicator whether another part of the monitoring data follows in an upcoming NotifyDisplayMessagesRequest message. Default value when omitted is false.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyDisplayMessagesResponse>
                NotifyDisplayMessages(OCPPv2_1.CS.NotifyDisplayMessagesRequest Request)

            {

                #region Send OnNotifyDisplayMessagesRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyDisplayMessagesRequest?.Invoke(startTime,
                                                           this,
                                                           Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyDisplayMessagesRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomNotifyDisplayMessagesRequestSerializer,
                                             CustomMessageInfoSerializer,
                                             CustomMessageContentSerializer,
                                             CustomComponentSerializer,
                                             CustomEVSESerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyDisplayMessages(Request)

                                         : new OCPPv2_1.CSMS.NotifyDisplayMessagesResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyDisplayMessagesResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyDisplayMessagesResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyDisplayMessagesResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyDisplayMessagesResponse?.Invoke(endTime,
                                                            this,
                                                            Request,
                                                            response,
                                                            endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyDisplayMessagesResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyCustomerInformation             (Request)

            /// <summary>
            /// NotifyCustomerInformation the given token.
            /// </summary>
            /// <param name="NotifyCustomerInformationRequestId">The unique identification of the notify customer information request.</param>
            /// <param name="Data">The requested data or a part of the requested data. No format specified in which the data is returned.</param>
            /// <param name="SequenceNumber">The sequence number of this message. First message starts at 0.</param>
            /// <param name="GeneratedAt">The timestamp of the moment this message was generated at the charging station.</param>
            /// <param name="ToBeContinued">The optional "to be continued" indicator whether another part of the monitoring data follows in an upcoming NotifyCustomerInformationRequest message. Default value when omitted is false.</param>
            /// <param name="CustomData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.NotifyCustomerInformationResponse>
                NotifyCustomerInformation(OCPPv2_1.CS.NotifyCustomerInformationRequest Request)

            {

                #region Send OnNotifyCustomerInformationRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyCustomerInformationRequest?.Invoke(startTime,
                                                               this,
                                                               Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyCustomerInformationRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToJSON(
                                             CustomNotifyCustomerInformationRequestSerializer,
                                             CustomSignatureSerializer,
                                             CustomCustomDataSerializer
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.NotifyCustomerInformation(Request)

                                         : new OCPPv2_1.CSMS.NotifyCustomerInformationResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.NotifyCustomerInformationResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyCustomerInformationResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyCustomerInformationResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyCustomerInformationResponse?.Invoke(endTime,
                                                                this,
                                                                Request,
                                                                response,
                                                                endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyCustomerInformationResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region TransferBinaryData                    (Request)

            /// <summary>
            /// Send the given vendor-specific binary data to the CSMS.
            /// </summary>
            /// <param name="VendorId">The vendor identification or namespace of the given message.</param>
            /// <param name="MessageId">An optional message identification.</param>
            /// <param name="BinaryData">A vendor-specific JSON token.</param>
            /// <param name="CustomBinaryData">The custom data object to allow to store any kind of customer specific data.</param>
            /// 
            /// <param name="RequestId">An optional request identification.</param>
            /// <param name="RequestTimestamp">An optional request timestamp.</param>
            /// <param name="RequestTimeout">An optional timeout for this request.</param>
            /// <param name="EventTrackingId">An optional event tracking identification for correlating this request with other events.</param>
            /// <param name="CancellationToken">An optional token to cancel this request.</param>
            public async Task<OCPPv2_1.CSMS.BinaryDataTransferResponse>
                TransferBinaryData(OCPPv2_1.CS.BinaryDataTransferRequest Request)

            {

                #region Send OnBinaryDataTransferRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnBinaryDataTransferRequest?.Invoke(startTime,
                                                        this,
                                                        Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnBinaryDataTransferRequest));
                }

                #endregion


                var response = CSClient is not null

                                   ? SignaturePolicy.SignRequestMessage(
                                         Request,
                                         Request.ToBinary(
                                             CustomBinaryDataTransferRequestSerializer,
                                             CustomBinarySignatureSerializer,
                                             IncludeSignatures: false
                                         ),
                                         out var errorResponse
                                     )

                                         ? await CSClient.TransferBinaryData(Request)

                                         : new OCPPv2_1.CSMS.BinaryDataTransferResponse(
                                               Request,
                                               Result.SignatureError(errorResponse)
                                           )

                                   : new OCPPv2_1.CSMS.BinaryDataTransferResponse(
                                         Request,
                                         Result.Server("Unknown or unreachable charging station!")
                                     );

                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToBinary(
                        CustomBinaryDataTransferResponseSerializer,
                        null, //CustomStatusInfoSerializer,
                        CustomBinarySignatureSerializer,
                        IncludeSignatures: false
                    ),
                    out errorResponse
                );


                #region Send OnBinaryDataTransferResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnBinaryDataTransferResponse?.Invoke(endTime,
                                                   this,
                                                   Request,
                                                   response,
                                                   endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnBinaryDataTransferResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #endregion


            #region Dispose()

            public void Dispose()
            { }

            #endregion

        }

        public class ActingAsCSMS : CSMS.INetworkingNodeService,
                                    IEventSender
        {

            #region Data

            private          readonly  HashSet<SignaturePolicy>                                                                signaturePolicies           = new();

            private          readonly  HashSet<CSMS.INetworkingNodeChannel>                                                    centralSystemServers        = new();

            private          readonly  ConcurrentDictionary<NetworkingNode_Id, Tuple<CSMS.INetworkingNodeChannel, DateTime>>   reachableChargingStations   = new();

            private          readonly  HTTPExtAPI                                                                              TestAPI;

            private          readonly  NetworkingNodeWebAPI                                                                    WebAPI;

            protected static readonly  SemaphoreSlim                                                                           ChargingStationSemaphore    = new (1, 1);

            protected static readonly  TimeSpan                                                                                SemaphoreSlimTimeout        = TimeSpan.FromSeconds(5);

            public    static readonly  IPPort                                                                                  DefaultHTTPUploadPort       = IPPort.Parse(9903);

            private                    Int64                                                                                   internalRequestId           = 800000;

            private                    TimeSpan                                                                                defaultRequestTimeout       = TimeSpan.FromSeconds(30);

            #endregion

            #region Properties

            /// <summary>
            /// The unique identification of this central system.
            /// </summary>
            public NetworkingNode_Id   Id                        { get; }

            public TestNetworkingNode  NetworkingNodeRef         { get; }

            /// <summary>
            /// The sender identification.
            /// </summary>
            String IEventSender.Id
                => this.Id.ToString();


            public CSMS.NetworkingNodeUploadAPI HTTPUploadAPI             { get; }

            public IPPort             HTTPUploadPort            { get; }

            public DNSClient          DNSClient                 { get; }

            /// <summary>
            /// Require a HTTP Basic Authentication of all charging boxes.
            /// </summary>
            public Boolean            RequireAuthentication     { get; }

            /// <summary>
            /// The default request timeout for all requests.
            /// </summary>
            public TimeSpan           DefaultRequestTimeout     { get; }


            /// <summary>
            /// An enumeration of central system servers.
            /// </summary>
            public IEnumerable<CSMS.INetworkingNodeServer> CSMSServers
                => centralSystemServers;


            public IEnumerable<CSMS.INetworkingNodeChannel> CSMSChannels
                => centralSystemServers;

            /// <summary>
            /// The unique identifications of all connected or reachable networking nodes.
            /// </summary>
            public IEnumerable<NetworkingNode_Id> NetworkingNodeIds
                => reachableChargingStations.Values.SelectMany(csmsChannel => csmsChannel.Item1.NetworkingNodeIds);


            public Dictionary<String, Transaction_Id> TransactionIds = new ();

            /// <summary>
            /// The enumeration of all signature policies.
            /// </summary>
            public IEnumerable<SignaturePolicy>  SignaturePolicies
                => signaturePolicies;

            /// <summary>
            /// The currently active signature policy.
            /// </summary>
            public SignaturePolicy               SignaturePolicy
                => SignaturePolicies.First();

            #endregion

            #region Events

            #region WebSocket connections

            /// <summary>
            /// An event sent whenever the HTTP web socket server started.
            /// </summary>
            public event OnServerStartedDelegate?                 OnServerStarted;

            /// <summary>
            /// An event sent whenever a new TCP connection was accepted.
            /// </summary>
            public event OnValidateTCPConnectionDelegate?         OnValidateTCPConnection;

            /// <summary>
            /// An event sent whenever a new TCP connection was accepted.
            /// </summary>
            public event OnNewTCPConnectionDelegate?              OnNewTCPConnection;

            /// <summary>
            /// An event sent whenever a HTTP request was received.
            /// </summary>
            public event HTTPRequestLogDelegate?                  OnHTTPRequest;

            /// <summary>
            /// An event sent whenever the HTTP headers of a new web socket connection
            /// need to be validated or filtered by an upper layer application logic.
            /// </summary>
            public event OnValidateWebSocketConnectionDelegate?   OnValidateWebSocketConnection;

            /// <summary>
            /// An event sent whenever the HTTP connection switched successfully to web socket.
            /// </summary>
            public event OnNewWebSocketConnectionDelegate?        OnNewWebSocketConnection;

            /// <summary>
            /// An event sent whenever a reponse to a HTTP request was sent.
            /// </summary>
            public event HTTPResponseLogDelegate?                 OnHTTPResponse;

            /// <summary>
            /// An event sent whenever a web socket close frame was received.
            /// </summary>
            public event OnCloseMessageDelegate?                  OnCloseMessageReceived;

            /// <summary>
            /// An event sent whenever a TCP connection was closed.
            /// </summary>
            public event OnTCPConnectionClosedDelegate?           OnTCPConnectionClosed;

            #endregion


            #region Generic Text Messages

            /// <summary>
            /// An event sent whenever a text message request was received.
            /// </summary>
            public event CSMS.OnWebSocketJSONMessageRequestDelegate?     OnJSONMessageRequestReceived;

            /// <summary>
            /// An event sent whenever the response to a text message was sent.
            /// </summary>
            public event CSMS.OnWebSocketJSONMessageResponseDelegate?    OnJSONMessageResponseSent;

            /// <summary>
            /// An event sent whenever the error response to a text message was sent.
            /// </summary>
            public event CSMS.OnWebSocketTextErrorResponseDelegate?      OnJSONErrorResponseSent;


            /// <summary>
            /// An event sent whenever a text message request was sent.
            /// </summary>
            public event CSMS.OnWebSocketJSONMessageRequestDelegate?     OnJSONMessageRequestSent;

            /// <summary>
            /// An event sent whenever the response to a text message request was received.
            /// </summary>
            public event CSMS.OnWebSocketJSONMessageResponseDelegate?    OnJSONMessageResponseReceived;

            /// <summary>
            /// An event sent whenever an error response to a text message request was received.
            /// </summary>
            public event CSMS.OnWebSocketTextErrorResponseDelegate?      OnJSONErrorResponseReceived;

            #endregion

            #region Generic Binary Messages

            /// <summary>
            /// An event sent whenever a binary message request was received.
            /// </summary>
            public event CSMS.OnWebSocketBinaryMessageRequestDelegate?     OnBinaryMessageRequestReceived;

            /// <summary>
            /// An event sent whenever the response to a binary message was sent.
            /// </summary>
            public event CSMS.OnWebSocketBinaryMessageResponseDelegate?    OnBinaryMessageResponseSent;

            /// <summary>
            /// An event sent whenever the error response to a binary message was sent.
            /// </summary>
            //public event CSMS.OnWebSocketBinaryErrorResponseDelegate?      OnBinaryErrorResponseSent;


            /// <summary>
            /// An event sent whenever a binary message request was sent.
            /// </summary>
            public event CSMS.OnWebSocketBinaryMessageRequestDelegate?     OnBinaryMessageRequestSent;

            /// <summary>
            /// An event sent whenever the response to a binary message request was received.
            /// </summary>
            public event CSMS.OnWebSocketBinaryMessageResponseDelegate?    OnBinaryMessageResponseReceived;

            /// <summary>
            /// An event sent whenever the error response to a binary message request was sent.
            /// </summary>
            //public event CSMS.OnWebSocketBinaryErrorResponseDelegate?      OnBinaryErrorResponseReceived;

            #endregion


            #region NetworkingNode <- Charging Station

            #region OnBootNotification (-Request/-Response)

            /// <summary>
            /// An event fired whenever a BootNotification request was sent from a charging station.
            /// </summary>
            public event CSMS.OnBootNotificationRequestDelegate?   OnBootNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a BootNotification request was received.
            /// </summary>
            public event CSMS.OnBootNotificationResponseDelegate?  OnBootNotificationResponse;

            #endregion

            #region OnFirmwareStatusNotification (-Request/-Response)

            /// <summary>
            /// An event fired whenever a FirmwareStatusNotification request was sent from a charging station.
            /// </summary>
            public event CSMS.OnFirmwareStatusNotificationRequestDelegate?   OnFirmwareStatusNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a FirmwareStatusNotification request was received.
            /// </summary>
            public event CSMS.OnFirmwareStatusNotificationResponseDelegate?  OnFirmwareStatusNotificationResponse;

            #endregion

            #region OnPublishFirmwareStatusNotification (-Request/-Response)

            /// <summary>
            /// An event fired whenever a PublishFirmwareStatusNotification request was sent from a charging station.
            /// </summary>
            public event CSMS.OnPublishFirmwareStatusNotificationRequestDelegate?   OnPublishFirmwareStatusNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a PublishFirmwareStatusNotification request was received.
            /// </summary>
            public event CSMS.OnPublishFirmwareStatusNotificationResponseDelegate?  OnPublishFirmwareStatusNotificationResponse;

            #endregion

            #region OnHeartbeat (-Request/-Response)

            /// <summary>
            /// An event fired whenever a Heartbeat request was sent from a charging station.
            /// </summary>
            public event CSMS.OnHeartbeatRequestDelegate?   OnHeartbeatRequest;

            /// <summary>
            /// An event fired whenever a response to a Heartbeat request was received.
            /// </summary>
            public event CSMS.OnHeartbeatResponseDelegate?  OnHeartbeatResponse;

            #endregion

            #region OnNotifyEvent (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyEvent request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyEventRequestDelegate?   OnNotifyEventRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyEvent request was received.
            /// </summary>
            public event CSMS.OnNotifyEventResponseDelegate?  OnNotifyEventResponse;

            #endregion

            #region OnSecurityEventNotification (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SecurityEventNotification request was sent from a charging station.
            /// </summary>
            public event CSMS.OnSecurityEventNotificationRequestDelegate?   OnSecurityEventNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a SecurityEventNotification request was received.
            /// </summary>
            public event CSMS.OnSecurityEventNotificationResponseDelegate?  OnSecurityEventNotificationResponse;

            #endregion

            #region OnNotifyReport (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyReport request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyReportRequestDelegate?   OnNotifyReportRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyReport request was received.
            /// </summary>
            public event CSMS.OnNotifyReportResponseDelegate?  OnNotifyReportResponse;

            #endregion

            #region OnNotifyMonitoringReport (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyMonitoringReport request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyMonitoringReportRequestDelegate?   OnNotifyMonitoringReportRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyMonitoringReport request was received.
            /// </summary>
            public event CSMS.OnNotifyMonitoringReportResponseDelegate?  OnNotifyMonitoringReportResponse;

            #endregion

            #region OnLogStatusNotification (-Request/-Response)

            /// <summary>
            /// An event fired whenever a LogStatusNotification request was sent from a charging station.
            /// </summary>
            public event CSMS.OnLogStatusNotificationRequestDelegate?   OnLogStatusNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a LogStatusNotification request was received.
            /// </summary>
            public event CSMS.OnLogStatusNotificationResponseDelegate?  OnLogStatusNotificationResponse;

            #endregion

            #region OnIncomingDataTransfer (-Request/-Response)

            /// <summary>
            /// An event sent whenever an IncomingDataTransfer request was received.
            /// </summary>
            public event CSMS.OnIncomingDataTransferRequestDelegate?   OnIncomingDataTransferRequest;

            /// <summary>
            /// An event sent whenever a response to an IncomingDataTransfer request was sent.
            /// </summary>
            public event CSMS.OnIncomingDataTransferResponseDelegate?  OnIncomingDataTransferResponse;

            #endregion


            #region OnSignCertificate (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SignCertificate request was sent from a charging station.
            /// </summary>
            public event CSMS.OnSignCertificateRequestDelegate?   OnSignCertificateRequest;

            /// <summary>
            /// An event fired whenever a response to a SignCertificate request was received.
            /// </summary>
            public event CSMS.OnSignCertificateResponseDelegate?  OnSignCertificateResponse;

            #endregion

            #region OnGet15118EVCertificate (-Request/-Response)

            /// <summary>
            /// An event fired whenever a Get15118EVCertificate request was sent from a charging station.
            /// </summary>
            public event CSMS.OnGet15118EVCertificateRequestDelegate?   OnGet15118EVCertificateRequest;

            /// <summary>
            /// An event fired whenever a response to a Get15118EVCertificate request was received.
            /// </summary>
            public event CSMS.OnGet15118EVCertificateResponseDelegate?  OnGet15118EVCertificateResponse;

            #endregion

            #region OnGetCertificateStatus (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetCertificateStatus request was sent from a charging station.
            /// </summary>
            public event CSMS.OnGetCertificateStatusRequestDelegate?   OnGetCertificateStatusRequest;

            /// <summary>
            /// An event fired whenever a response to a GetCertificateStatus request was received.
            /// </summary>
            public event CSMS.OnGetCertificateStatusResponseDelegate?  OnGetCertificateStatusResponse;

            #endregion

            #region OnGetCRL (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetCRL request was sent from a charging station.
            /// </summary>
            public event CSMS.OnGetCRLRequestDelegate?   OnGetCRLRequest;

            /// <summary>
            /// An event fired whenever a response to a GetCRL request was received.
            /// </summary>
            public event CSMS.OnGetCRLResponseDelegate?  OnGetCRLResponse;

            #endregion


            #region OnReservationStatusUpdate (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ReservationStatusUpdate request was sent from a charging station.
            /// </summary>
            public event CSMS.OnReservationStatusUpdateRequestDelegate?   OnReservationStatusUpdateRequest;

            /// <summary>
            /// An event fired whenever a response to a ReservationStatusUpdate request was received.
            /// </summary>
            public event CSMS.OnReservationStatusUpdateResponseDelegate?  OnReservationStatusUpdateResponse;

            #endregion

            #region OnAuthorize (-Request/-Response)

            /// <summary>
            /// An event fired whenever an Authorize request was sent from a charging station.
            /// </summary>
            public event CSMS.OnAuthorizeRequestDelegate?   OnAuthorizeRequest;

            /// <summary>
            /// An event fired whenever a response to an Authorize request was received.
            /// </summary>
            public event CSMS.OnAuthorizeResponseDelegate?  OnAuthorizeResponse;

            #endregion

            #region OnNotifyEVChargingNeeds (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyEVChargingNeeds request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyEVChargingNeedsRequestDelegate?   OnNotifyEVChargingNeedsRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyEVChargingNeeds request was received.
            /// </summary>
            public event CSMS.OnNotifyEVChargingNeedsResponseDelegate?  OnNotifyEVChargingNeedsResponse;

            #endregion

            #region OnTransactionEvent (-Request/-Response)

            /// <summary>
            /// An event fired whenever a TransactionEvent was sent from a charging station.
            /// </summary>
            public event CSMS.OnTransactionEventRequestDelegate?   OnTransactionEventRequest;

            /// <summary>
            /// An event fired whenever a response to a TransactionEvent request was received.
            /// </summary>
            public event CSMS.OnTransactionEventResponseDelegate?  OnTransactionEventResponse;

            #endregion

            #region OnStatusNotification (-Request/-Response)

            /// <summary>
            /// An event fired whenever a StatusNotification request was sent from a charging station.
            /// </summary>
            public event CSMS.OnStatusNotificationRequestDelegate?   OnStatusNotificationRequest;

            /// <summary>
            /// An event fired whenever a response to a StatusNotification request was received.
            /// </summary>
            public event CSMS.OnStatusNotificationResponseDelegate?  OnStatusNotificationResponse;

            #endregion

            #region OnMeterValues (-Request/-Response)

            /// <summary>
            /// An event fired whenever a MeterValues request was sent from a charging station.
            /// </summary>
            public event CSMS.OnMeterValuesRequestDelegate?   OnMeterValuesRequest;

            /// <summary>
            /// An event fired whenever a response to a MeterValues request was received.
            /// </summary>
            public event CSMS.OnMeterValuesResponseDelegate?  OnMeterValuesResponse;

            #endregion

            #region OnNotifyChargingLimit (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyChargingLimit request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyChargingLimitRequestDelegate?   OnNotifyChargingLimitRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyChargingLimit request was received.
            /// </summary>
            public event CSMS.OnNotifyChargingLimitResponseDelegate?  OnNotifyChargingLimitResponse;

            #endregion

            #region OnClearedChargingLimit (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ClearedChargingLimit request was sent from a charging station.
            /// </summary>
            public event CSMS.OnClearedChargingLimitRequestDelegate?   OnClearedChargingLimitRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearedChargingLimit request was received.
            /// </summary>
            public event CSMS.OnClearedChargingLimitResponseDelegate?  OnClearedChargingLimitResponse;

            #endregion

            #region OnReportChargingProfiles (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ReportChargingProfiles request was sent from a charging station.
            /// </summary>
            public event CSMS.OnReportChargingProfilesRequestDelegate?   OnReportChargingProfilesRequest;

            /// <summary>
            /// An event fired whenever a response to a ReportChargingProfiles request was received.
            /// </summary>
            public event CSMS.OnReportChargingProfilesResponseDelegate?  OnReportChargingProfilesResponse;

            #endregion

            #region OnNotifyEVChargingSchedule (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyEVChargingSchedule request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyEVChargingScheduleRequestDelegate?   OnNotifyEVChargingScheduleRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyEVChargingSchedule request was received.
            /// </summary>
            public event CSMS.OnNotifyEVChargingScheduleResponseDelegate?  OnNotifyEVChargingScheduleResponse;

            #endregion

            #region OnNotifyPriorityCharging (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyPriorityCharging request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyPriorityChargingRequestDelegate?   OnNotifyPriorityChargingRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyPriorityCharging request was received.
            /// </summary>
            public event CSMS.OnNotifyPriorityChargingResponseDelegate?  OnNotifyPriorityChargingResponse;

            #endregion

            #region OnPullDynamicScheduleUpdate (-Request/-Response)

            /// <summary>
            /// An event fired whenever a PullDynamicScheduleUpdate request was sent from a charging station.
            /// </summary>
            public event CSMS.OnPullDynamicScheduleUpdateRequestDelegate?   OnPullDynamicScheduleUpdateRequest;

            /// <summary>
            /// An event fired whenever a response to a PullDynamicScheduleUpdate request was received.
            /// </summary>
            public event CSMS.OnPullDynamicScheduleUpdateResponseDelegate?  OnPullDynamicScheduleUpdateResponse;

            #endregion


            #region OnNotifyDisplayMessages (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyDisplayMessages request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyDisplayMessagesRequestDelegate?   OnNotifyDisplayMessagesRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyDisplayMessages request was received.
            /// </summary>
            public event CSMS.OnNotifyDisplayMessagesResponseDelegate?  OnNotifyDisplayMessagesResponse;

            #endregion

            #region OnNotifyCustomerInformation (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyCustomerInformation request was sent from a charging station.
            /// </summary>
            public event CSMS.OnNotifyCustomerInformationRequestDelegate?   OnNotifyCustomerInformationRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyCustomerInformation request was received.
            /// </summary>
            public event CSMS.OnNotifyCustomerInformationResponseDelegate?  OnNotifyCustomerInformationResponse;

            #endregion


            // Binary Data Streams Extensions

            #region OnIncomingBinaryDataTransfer (-Request/-Response)

            /// <summary>
            /// An event sent whenever an IncomingBinaryDataTransfer request was received.
            /// </summary>
            public event CSMS.OnIncomingBinaryDataTransferRequestDelegate?   OnIncomingBinaryDataTransferRequest;

            /// <summary>
            /// An event sent whenever a response to an IncomingBinaryDataTransfer request was sent.
            /// </summary>
            public event CSMS.OnIncomingBinaryDataTransferResponseDelegate?  OnIncomingBinaryDataTransferResponse;

            #endregion


            #endregion

            #region NetworkingNode -> Charging Station

            #region OnReset                       (-Request/-Response)

            /// <summary>
            /// An event fired whenever a Reset request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnResetRequestDelegate?   OnResetRequest;

            /// <summary>
            /// An event fired whenever a response to a Reset request was received.
            /// </summary>
            public event CSMS.OnResetResponseDelegate?  OnResetResponse;

            #endregion

            #region OnUpdateFirmware              (-Request/-Response)

            /// <summary>
            /// An event fired whenever an UpdateFirmware request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnUpdateFirmwareRequestDelegate?   OnUpdateFirmwareRequest;

            /// <summary>
            /// An event fired whenever a response to an UpdateFirmware request was received.
            /// </summary>
            public event CSMS.OnUpdateFirmwareResponseDelegate?  OnUpdateFirmwareResponse;

            #endregion

            #region OnPublishFirmware             (-Request/-Response)

            /// <summary>
            /// An event fired whenever a PublishFirmware request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnPublishFirmwareRequestDelegate?   OnPublishFirmwareRequest;

            /// <summary>
            /// An event fired whenever a response to a PublishFirmware request was received.
            /// </summary>
            public event CSMS.OnPublishFirmwareResponseDelegate?  OnPublishFirmwareResponse;

            #endregion

            #region OnUnpublishFirmware           (-Request/-Response)

            /// <summary>
            /// An event fired whenever an UnpublishFirmware request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnUnpublishFirmwareRequestDelegate?   OnUnpublishFirmwareRequest;

            /// <summary>
            /// An event fired whenever a response to an UnpublishFirmware request was received.
            /// </summary>
            public event CSMS.OnUnpublishFirmwareResponseDelegate?  OnUnpublishFirmwareResponse;

            #endregion

            #region OnGetBaseReport               (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetBaseReport request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetBaseReportRequestDelegate?   OnGetBaseReportRequest;

            /// <summary>
            /// An event fired whenever a response to a GetBaseReport request was received.
            /// </summary>
            public event CSMS.OnGetBaseReportResponseDelegate?  OnGetBaseReportResponse;

            #endregion

            #region OnGetReport                   (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetReport request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetReportRequestDelegate?   OnGetReportRequest;

            /// <summary>
            /// An event fired whenever a response to a GetReport request was received.
            /// </summary>
            public event CSMS.OnGetReportResponseDelegate?  OnGetReportResponse;

            #endregion

            #region OnGetLog                      (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetLog request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetLogRequestDelegate?   OnGetLogRequest;

            /// <summary>
            /// An event fired whenever a response to a GetLog request was received.
            /// </summary>
            public event CSMS.OnGetLogResponseDelegate?  OnGetLogResponse;

            #endregion

            #region OnSetVariables                (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SetVariables request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSetVariablesRequestDelegate?   OnSetVariablesRequest;

            /// <summary>
            /// An event fired whenever a response to a SetVariables request was received.
            /// </summary>
            public event CSMS.OnSetVariablesResponseDelegate?  OnSetVariablesResponse;

            #endregion

            #region OnGetVariables                (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetVariables request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetVariablesRequestDelegate?   OnGetVariablesRequest;

            /// <summary>
            /// An event fired whenever a response to a GetVariables request was received.
            /// </summary>
            public event CSMS.OnGetVariablesResponseDelegate?  OnGetVariablesResponse;

            #endregion

            #region OnSetMonitoringBase           (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SetMonitoringBase request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSetMonitoringBaseRequestDelegate?   OnSetMonitoringBaseRequest;

            /// <summary>
            /// An event fired whenever a response to a SetMonitoringBase request was received.
            /// </summary>
            public event CSMS.OnSetMonitoringBaseResponseDelegate?  OnSetMonitoringBaseResponse;

            #endregion

            #region OnGetMonitoringReport         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetMonitoringReport request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetMonitoringReportRequestDelegate?   OnGetMonitoringReportRequest;

            /// <summary>
            /// An event fired whenever a response to a GetMonitoringReport request was received.
            /// </summary>
            public event CSMS.OnGetMonitoringReportResponseDelegate?  OnGetMonitoringReportResponse;

            #endregion

            #region OnSetMonitoringLevel          (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SetMonitoringLevel request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSetMonitoringLevelRequestDelegate?   OnSetMonitoringLevelRequest;

            /// <summary>
            /// An event fired whenever a response to a SetMonitoringLevel request was received.
            /// </summary>
            public event CSMS.OnSetMonitoringLevelResponseDelegate?  OnSetMonitoringLevelResponse;

            #endregion

            #region SetVariableMonitoring         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SetVariableMonitoring request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSetVariableMonitoringRequestDelegate?   OnSetVariableMonitoringRequest;

            /// <summary>
            /// An event fired whenever a response to a SetVariableMonitoring request was received.
            /// </summary>
            public event CSMS.OnSetVariableMonitoringResponseDelegate?  OnSetVariableMonitoringResponse;

            #endregion

            #region OnClearVariableMonitoring     (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ClearVariableMonitoring request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnClearVariableMonitoringRequestDelegate?   OnClearVariableMonitoringRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearVariableMonitoring request was received.
            /// </summary>
            public event CSMS.OnClearVariableMonitoringResponseDelegate?  OnClearVariableMonitoringResponse;

            #endregion

            #region OnSetNetworkProfile           (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SetNetworkProfile request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSetNetworkProfileRequestDelegate?   OnSetNetworkProfileRequest;

            /// <summary>
            /// An event fired whenever a response to a SetNetworkProfile request was received.
            /// </summary>
            public event CSMS.OnSetNetworkProfileResponseDelegate?  OnSetNetworkProfileResponse;

            #endregion

            #region OnChangeAvailability          (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ChangeAvailability request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnChangeAvailabilityRequestDelegate?   OnChangeAvailabilityRequest;

            /// <summary>
            /// An event fired whenever a response to a ChangeAvailability request was received.
            /// </summary>
            public event CSMS.OnChangeAvailabilityResponseDelegate?  OnChangeAvailabilityResponse;

            #endregion

            #region OnTriggerMessage              (-Request/-Response)

            /// <summary>
            /// An event fired whenever a TriggerMessage request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnTriggerMessageRequestDelegate?   OnTriggerMessageRequest;

            /// <summary>
            /// An event fired whenever a response to a TriggerMessage request was received.
            /// </summary>
            public event CSMS.OnTriggerMessageResponseDelegate?  OnTriggerMessageResponse;

            #endregion

            #region OnDataTransfer                (-Request/-Response)

            /// <summary>
            /// An event sent whenever a DataTransfer request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnDataTransferRequestDelegate?   OnDataTransferRequest;

            /// <summary>
            /// An event sent whenever a response to a DataTransfer request was received.
            /// </summary>
            public event CSMS.OnDataTransferResponseDelegate?  OnDataTransferResponse;

            #endregion


            #region OnCertificateSigned           (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SignedCertificate request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnCertificateSignedRequestDelegate?   OnCertificateSignedRequest;

            /// <summary>
            /// An event fired whenever a response to a SignedCertificate request was received.
            /// </summary>
            public event CSMS.OnCertificateSignedResponseDelegate?  OnCertificateSignedResponse;

            #endregion

            #region OnInstallCertificate          (-Request/-Response)

            /// <summary>
            /// An event fired whenever an InstallCertificate request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnInstallCertificateRequestDelegate?   OnInstallCertificateRequest;

            /// <summary>
            /// An event fired whenever a response to an InstallCertificate request was received.
            /// </summary>
            public event CSMS.OnInstallCertificateResponseDelegate?  OnInstallCertificateResponse;

            #endregion

            #region OnGetInstalledCertificateIds  (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetInstalledCertificateIds request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetInstalledCertificateIdsRequestDelegate?   OnGetInstalledCertificateIdsRequest;

            /// <summary>
            /// An event fired whenever a response to a GetInstalledCertificateIds request was received.
            /// </summary>
            public event CSMS.OnGetInstalledCertificateIdsResponseDelegate?  OnGetInstalledCertificateIdsResponse;

            #endregion

            #region OnDeleteCertificate           (-Request/-Response)

            /// <summary>
            /// An event fired whenever a DeleteCertificate request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnDeleteCertificateRequestDelegate?   OnDeleteCertificateRequest;

            /// <summary>
            /// An event fired whenever a response to a DeleteCertificate request was received.
            /// </summary>
            public event CSMS.OnDeleteCertificateResponseDelegate?  OnDeleteCertificateResponse;

            #endregion

            #region OnNotifyCRL                   (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyCRL request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnNotifyCRLRequestDelegate?   OnNotifyCRLRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyCRL request was received.
            /// </summary>
            public event CSMS.OnNotifyCRLResponseDelegate?  OnNotifyCRLResponse;

            #endregion


            #region OnGetLocalListVersion         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetLocalListVersion request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetLocalListVersionRequestDelegate?   OnGetLocalListVersionRequest;

            /// <summary>
            /// An event fired whenever a response to a GetLocalListVersion request was received.
            /// </summary>
            public event CSMS.OnGetLocalListVersionResponseDelegate?  OnGetLocalListVersionResponse;

            #endregion

            #region OnSendLocalList               (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SendLocalList request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSendLocalListRequestDelegate?   OnSendLocalListRequest;

            /// <summary>
            /// An event fired whenever a response to a SendLocalList request was received.
            /// </summary>
            public event CSMS.OnSendLocalListResponseDelegate?  OnSendLocalListResponse;

            #endregion

            #region OnClearCache                  (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ClearCache request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnClearCacheRequestDelegate?   OnClearCacheRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearCache request was received.
            /// </summary>
            public event CSMS.OnClearCacheResponseDelegate?  OnClearCacheResponse;

            #endregion


            #region OnReserveNow                  (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ReserveNow request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnReserveNowRequestDelegate?   OnReserveNowRequest;

            /// <summary>
            /// An event fired whenever a response to a ReserveNow request was received.
            /// </summary>
            public event CSMS.OnReserveNowResponseDelegate?  OnReserveNowResponse;

            #endregion

            #region OnCancelReservation           (-Request/-Response)

            /// <summary>
            /// An event fired whenever a CancelReservation request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnCancelReservationRequestDelegate?   OnCancelReservationRequest;

            /// <summary>
            /// An event fired whenever a response to a CancelReservation request was received.
            /// </summary>
            public event CSMS.OnCancelReservationResponseDelegate?  OnCancelReservationResponse;

            #endregion

            #region OnRequestStartTransaction     (-Request/-Response)

            /// <summary>
            /// An event fired whenever a RequestStartTransaction request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnRequestStartTransactionRequestDelegate?   OnRequestStartTransactionRequest;

            /// <summary>
            /// An event fired whenever a response to a RequestStartTransaction request was received.
            /// </summary>
            public event CSMS.OnRequestStartTransactionResponseDelegate?  OnRequestStartTransactionResponse;

            #endregion

            #region OnRequestStopTransaction      (-Request/-Response)

            /// <summary>
            /// An event fired whenever a RequestStopTransaction request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnRequestStopTransactionRequestDelegate?   OnRequestStopTransactionRequest;

            /// <summary>
            /// An event fired whenever a response to a RequestStopTransaction request was received.
            /// </summary>
            public event CSMS.OnRequestStopTransactionResponseDelegate?  OnRequestStopTransactionResponse;

            #endregion

            #region OnGetTransactionStatus        (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetTransactionStatus request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetTransactionStatusRequestDelegate?   OnGetTransactionStatusRequest;

            /// <summary>
            /// An event fired whenever a response to a GetTransactionStatus request was received.
            /// </summary>
            public event CSMS.OnGetTransactionStatusResponseDelegate?  OnGetTransactionStatusResponse;

            #endregion

            #region OnSetChargingProfile          (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SetChargingProfile request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSetChargingProfileRequestDelegate?   OnSetChargingProfileRequest;

            /// <summary>
            /// An event fired whenever a response to a SetChargingProfile request was received.
            /// </summary>
            public event CSMS.OnSetChargingProfileResponseDelegate?  OnSetChargingProfileResponse;

            #endregion

            #region OnGetChargingProfiles         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetChargingProfiles request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetChargingProfilesRequestDelegate?   OnGetChargingProfilesRequest;

            /// <summary>
            /// An event fired whenever a response to a GetChargingProfiles request was received.
            /// </summary>
            public event CSMS.OnGetChargingProfilesResponseDelegate?  OnGetChargingProfilesResponse;

            #endregion

            #region OnClearChargingProfile        (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ClearChargingProfile request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnClearChargingProfileRequestDelegate?   OnClearChargingProfileRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearChargingProfile request was received.
            /// </summary>
            public event CSMS.OnClearChargingProfileResponseDelegate?  OnClearChargingProfileResponse;

            #endregion

            #region OnGetCompositeSchedule        (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetCompositeSchedule request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetCompositeScheduleRequestDelegate?   OnGetCompositeScheduleRequest;

            /// <summary>
            /// An event fired whenever a response to a GetCompositeSchedule request was received.
            /// </summary>
            public event CSMS.OnGetCompositeScheduleResponseDelegate?  OnGetCompositeScheduleResponse;

            #endregion

            #region OnUpdateDynamicSchedule       (-Request/-Response)

            /// <summary>
            /// An event fired whenever a UpdateDynamicSchedule request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnUpdateDynamicScheduleRequestDelegate?   OnUpdateDynamicScheduleRequest;

            /// <summary>
            /// An event fired whenever a response to a UpdateDynamicSchedule request was received.
            /// </summary>
            public event CSMS.OnUpdateDynamicScheduleResponseDelegate?  OnUpdateDynamicScheduleResponse;

            #endregion

            #region OnNotifyAllowedEnergyTransfer (-Request/-Response)

            /// <summary>
            /// An event fired whenever a NotifyAllowedEnergyTransfer request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnNotifyAllowedEnergyTransferRequestDelegate?   OnNotifyAllowedEnergyTransferRequest;

            /// <summary>
            /// An event fired whenever a response to a NotifyAllowedEnergyTransfer request was received.
            /// </summary>
            public event CSMS.OnNotifyAllowedEnergyTransferResponseDelegate?  OnNotifyAllowedEnergyTransferResponse;

            #endregion

            #region OnUsePriorityCharging         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a UsePriorityCharging request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnUsePriorityChargingRequestDelegate?   OnUsePriorityChargingRequest;

            /// <summary>
            /// An event fired whenever a response to a UsePriorityCharging request was received.
            /// </summary>
            public event CSMS.OnUsePriorityChargingResponseDelegate?  OnUsePriorityChargingResponse;

            #endregion

            #region OnUnlockConnector             (-Request/-Response)

            /// <summary>
            /// An event fired whenever an UnlockConnector request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnUnlockConnectorRequestDelegate?   OnUnlockConnectorRequest;

            /// <summary>
            /// An event fired whenever a response to an UnlockConnector request was received.
            /// </summary>
            public event CSMS.OnUnlockConnectorResponseDelegate?  OnUnlockConnectorResponse;

            #endregion


            #region OnAFRRSignal                  (-Request/-Response)

            /// <summary>
            /// An event fired whenever an AFRRSignal request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnAFRRSignalRequestDelegate?   OnAFRRSignalRequest;

            /// <summary>
            /// An event fired whenever a response to an AFRRSignal request was received.
            /// </summary>
            public event CSMS.OnAFRRSignalResponseDelegate?  OnAFRRSignalResponse;

            #endregion


            #region SetDisplayMessage/-Response   (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SetDisplayMessage request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSetDisplayMessageRequestDelegate?   OnSetDisplayMessageRequest;

            /// <summary>
            /// An event fired whenever a response to a SetDisplayMessage request was received.
            /// </summary>
            public event CSMS.OnSetDisplayMessageResponseDelegate?  OnSetDisplayMessageResponse;

            #endregion

            #region OnGetDisplayMessages          (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetDisplayMessages request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetDisplayMessagesRequestDelegate?   OnGetDisplayMessagesRequest;

            /// <summary>
            /// An event fired whenever a response to a GetDisplayMessages request was received.
            /// </summary>
            public event CSMS.OnGetDisplayMessagesResponseDelegate?  OnGetDisplayMessagesResponse;

            #endregion

            #region OnClearDisplayMessage         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a ClearDisplayMessage request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnClearDisplayMessageRequestDelegate?   OnClearDisplayMessageRequest;

            /// <summary>
            /// An event fired whenever a response to a ClearDisplayMessage request was received.
            /// </summary>
            public event CSMS.OnClearDisplayMessageResponseDelegate?  OnClearDisplayMessageResponse;

            #endregion

            #region OnCostUpdated                 (-Request/-Response)

            /// <summary>
            /// An event fired whenever a CostUpdated request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnCostUpdatedRequestDelegate?   OnCostUpdatedRequest;

            /// <summary>
            /// An event fired whenever a response to a CostUpdated request was received.
            /// </summary>
            public event CSMS.OnCostUpdatedResponseDelegate?  OnCostUpdatedResponse;

            #endregion

            #region OnCustomerInformation         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a CustomerInformation request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnCustomerInformationRequestDelegate?   OnCustomerInformationRequest;

            /// <summary>
            /// An event fired whenever a response to a CustomerInformation request was received.
            /// </summary>
            public event CSMS.OnCustomerInformationResponseDelegate?  OnCustomerInformationResponse;

            #endregion


            // Binary Data Streams Extensions

            #region OnBinaryDataTransfer          (-Request/-Response)

            /// <summary>
            /// An event sent whenever a BinaryDataTransfer request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnBinaryDataTransferRequestDelegate?   OnBinaryDataTransferRequest;

            /// <summary>
            /// An event sent whenever a response to a BinaryDataTransfer request was received.
            /// </summary>
            public event CSMS.OnBinaryDataTransferResponseDelegate?  OnBinaryDataTransferResponse;

            #endregion

            #region OnGetFile                     (-Request/-Response)

            /// <summary>
            /// An event sent whenever a GetFile request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetFileRequestDelegate?   OnGetFileRequest;

            /// <summary>
            /// An event sent whenever a response to a GetFile request was received.
            /// </summary>
            public event CSMS.OnGetFileResponseDelegate?  OnGetFileResponse;

            #endregion

            #region OnSendFile                    (-Request/-Response)

            /// <summary>
            /// An event sent whenever a SendFile request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSendFileRequestDelegate?   OnSendFileRequest;

            /// <summary>
            /// An event sent whenever a response to a SendFile request was received.
            /// </summary>
            public event CSMS.OnSendFileResponseDelegate?  OnSendFileResponse;

            #endregion

            #region OnDeleteFile                  (-Request/-Response)

            /// <summary>
            /// An event sent whenever a DeleteFile request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnDeleteFileRequestDelegate?   OnDeleteFileRequest;

            /// <summary>
            /// An event sent whenever a response to a DeleteFile request was received.
            /// </summary>
            public event CSMS.OnDeleteFileResponseDelegate?  OnDeleteFileResponse;

            #endregion


            // E2E Security Extensions

            #region AddSignaturePolicy            (-Request/-Response)

            /// <summary>
            /// An event fired whenever a AddSignaturePolicy request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnAddSignaturePolicyRequestDelegate?   OnAddSignaturePolicyRequest;

            /// <summary>
            /// An event fired whenever a response to a AddSignaturePolicy request was received.
            /// </summary>
            public event CSMS.OnAddSignaturePolicyResponseDelegate?  OnAddSignaturePolicyResponse;

            #endregion

            #region UpdateSignaturePolicy         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a UpdateSignaturePolicy request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnUpdateSignaturePolicyRequestDelegate?   OnUpdateSignaturePolicyRequest;

            /// <summary>
            /// An event fired whenever a response to a UpdateSignaturePolicy request was received.
            /// </summary>
            public event CSMS.OnUpdateSignaturePolicyResponseDelegate?  OnUpdateSignaturePolicyResponse;

            #endregion

            #region DeleteSignaturePolicy         (-Request/-Response)

            /// <summary>
            /// An event fired whenever a DeleteSignaturePolicy request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnDeleteSignaturePolicyRequestDelegate?   OnDeleteSignaturePolicyRequest;

            /// <summary>
            /// An event fired whenever a response to a DeleteSignaturePolicy request was received.
            /// </summary>
            public event CSMS.OnDeleteSignaturePolicyResponseDelegate?  OnDeleteSignaturePolicyResponse;

            #endregion

            #region AddUserRole                   (-Request/-Response)

            /// <summary>
            /// An event fired whenever a AddUserRole request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnAddUserRoleRequestDelegate?   OnAddUserRoleRequest;

            /// <summary>
            /// An event fired whenever a response to a AddUserRole request was received.
            /// </summary>
            public event CSMS.OnAddUserRoleResponseDelegate?  OnAddUserRoleResponse;

            #endregion

            #region UpdateUserRole                (-Request/-Response)

            /// <summary>
            /// An event fired whenever a UpdateUserRole request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnUpdateUserRoleRequestDelegate?   OnUpdateUserRoleRequest;

            /// <summary>
            /// An event fired whenever a response to a UpdateUserRole request was received.
            /// </summary>
            public event CSMS.OnUpdateUserRoleResponseDelegate?  OnUpdateUserRoleResponse;

            #endregion

            #region DeleteUserRole                (-Request/-Response)

            /// <summary>
            /// An event fired whenever a DeleteUserRole request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnDeleteUserRoleRequestDelegate?   OnDeleteUserRoleRequest;

            /// <summary>
            /// An event fired whenever a response to a DeleteUserRole request was received.
            /// </summary>
            public event CSMS.OnDeleteUserRoleResponseDelegate?  OnDeleteUserRoleResponse;

            #endregion


            // E2E Charging Tariff Extensions

            #region SetDefaultChargingTariff      (-Request/-Response)

            /// <summary>
            /// An event fired whenever a SetDefaultChargingTariff request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnSetDefaultChargingTariffRequestDelegate?   OnSetDefaultChargingTariffRequest;

            /// <summary>
            /// An event fired whenever a response to a SetDefaultChargingTariff request was received.
            /// </summary>
            public event CSMS.OnSetDefaultChargingTariffResponseDelegate?  OnSetDefaultChargingTariffResponse;

            #endregion

            #region GetDefaultChargingTariff      (-Request/-Response)

            /// <summary>
            /// An event fired whenever a GetDefaultChargingTariff request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnGetDefaultChargingTariffRequestDelegate?   OnGetDefaultChargingTariffRequest;

            /// <summary>
            /// An event fired whenever a response to a GetDefaultChargingTariff request was received.
            /// </summary>
            public event CSMS.OnGetDefaultChargingTariffResponseDelegate?  OnGetDefaultChargingTariffResponse;

            #endregion

            #region RemoveDefaultChargingTariff   (-Request/-Response)

            /// <summary>
            /// An event fired whenever a RemoveDefaultChargingTariff request will be sent to the charging station.
            /// </summary>
            public event CSMS.OnRemoveDefaultChargingTariffRequestDelegate?   OnRemoveDefaultChargingTariffRequest;

            /// <summary>
            /// An event fired whenever a response to a RemoveDefaultChargingTariff request was received.
            /// </summary>
            public event CSMS.OnRemoveDefaultChargingTariffResponseDelegate?  OnRemoveDefaultChargingTariffResponse;

            #endregion

            #endregion

            #endregion

            #region Custom JSON serializer delegates

            #region CSMS Request  Messages

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ResetRequest>?                                        CustomResetRequestSerializer                                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UpdateFirmwareRequest>?                               CustomUpdateFirmwareRequestSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.PublishFirmwareRequest>?                              CustomPublishFirmwareRequestSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UnpublishFirmwareRequest>?                            CustomUnpublishFirmwareRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetBaseReportRequest>?                                CustomGetBaseReportRequestSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetReportRequest>?                                    CustomGetReportRequestSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetLogRequest>?                                       CustomGetLogRequestSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetVariablesRequest>?                                 CustomSetVariablesRequestSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetVariablesRequest>?                                 CustomGetVariablesRequestSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetMonitoringBaseRequest>?                            CustomSetMonitoringBaseRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetMonitoringReportRequest>?                          CustomGetMonitoringReportRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetMonitoringLevelRequest>?                           CustomSetMonitoringLevelRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetVariableMonitoringRequest>?                        CustomSetVariableMonitoringRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearVariableMonitoringRequest>?                      CustomClearVariableMonitoringRequestSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetNetworkProfileRequest>?                            CustomSetNetworkProfileRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ChangeAvailabilityRequest>?                           CustomChangeAvailabilityRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.TriggerMessageRequest>?                               CustomTriggerMessageRequestSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DataTransferRequest>?                                 CustomDataTransferRequestSerializer                          { get; set; }


            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.CertificateSignedRequest>?                            CustomCertificateSignedRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.InstallCertificateRequest>?                           CustomInstallCertificateRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetInstalledCertificateIdsRequest>?                   CustomGetInstalledCertificateIdsRequestSerializer            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DeleteCertificateRequest>?                            CustomDeleteCertificateRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyCRLRequest>?                                    CustomNotifyCRLRequestSerializer                             { get; set; }


            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetLocalListVersionRequest>?                          CustomGetLocalListVersionRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SendLocalListRequest>?                                CustomSendLocalListRequestSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearCacheRequest>?                                   CustomClearCacheRequestSerializer                            { get; set; }


            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ReserveNowRequest>?                                   CustomReserveNowRequestSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.CancelReservationRequest>?                            CustomCancelReservationRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.RequestStartTransactionRequest>?                      CustomRequestStartTransactionRequestSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.RequestStopTransactionRequest>?                       CustomRequestStopTransactionRequestSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetTransactionStatusRequest>?                         CustomGetTransactionStatusRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetChargingProfileRequest>?                           CustomSetChargingProfileRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetChargingProfilesRequest>?                          CustomGetChargingProfilesRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearChargingProfileRequest>?                         CustomClearChargingProfileRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetCompositeScheduleRequest>?                         CustomGetCompositeScheduleRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UpdateDynamicScheduleRequest>?                        CustomUpdateDynamicScheduleRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyAllowedEnergyTransferRequest>?                  CustomNotifyAllowedEnergyTransferRequestSerializer           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UsePriorityChargingRequest>?                          CustomUsePriorityChargingRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UnlockConnectorRequest>?                              CustomUnlockConnectorRequestSerializer                       { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.AFRRSignalRequest>?                                   CustomAFRRSignalRequestSerializer                            { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetDisplayMessageRequest>?                            CustomSetDisplayMessageRequestSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetDisplayMessagesRequest>?                           CustomGetDisplayMessagesRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearDisplayMessageRequest>?                          CustomClearDisplayMessageRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.CostUpdatedRequest>?                                  CustomCostUpdatedRequestSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.CustomerInformationRequest>?                          CustomCustomerInformationRequestSerializer                   { get; set; }


            // Binary Data Streams Extensions

            public CustomBinarySerializerDelegate <OCPPv2_1.CSMS.BinaryDataTransferRequest>?                           CustomBinaryDataTransferRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetFileRequest>?                                      CustomGetFileRequestSerializer                               { get; set; }
            public CustomBinarySerializerDelegate <OCPPv2_1.CSMS.SendFileRequest>?                                     CustomSendFileRequestSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DeleteFileRequest>?                                   CustomDeleteFileRequestSerializer                            { get; set; }


            // E2E Security Extensions

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.AddSignaturePolicyRequest>?                           CustomAddSignaturePolicyRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UpdateSignaturePolicyRequest>?                        CustomUpdateSignaturePolicyRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DeleteSignaturePolicyRequest>?                        CustomDeleteSignaturePolicyRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.AddUserRoleRequest>?                                  CustomAddUserRoleRequestSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.UpdateUserRoleRequest>?                               CustomUpdateUserRoleRequestSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DeleteUserRoleRequest>?                               CustomDeleteUserRoleRequestSerializer                        { get; set; }


            // E2E Charging Tariffs
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SetDefaultChargingTariffRequest>?                     CustomSetDefaultChargingTariffRequestSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetDefaultChargingTariffRequest>?                     CustomGetDefaultChargingTariffRequestSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.RemoveDefaultChargingTariffRequest>?                  CustomRemoveDefaultChargingTariffRequestSerializer           { get; set; }

            #endregion

            #region CSMS Response Messages

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.BootNotificationResponse>?                            CustomBootNotificationResponseSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.FirmwareStatusNotificationResponse>?                  CustomFirmwareStatusNotificationResponseSerializer           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.PublishFirmwareStatusNotificationResponse>?           CustomPublishFirmwareStatusNotificationResponseSerializer    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.HeartbeatResponse>?                                   CustomHeartbeatResponseSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyEventResponse>?                                 CustomNotifyEventResponseSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SecurityEventNotificationResponse>?                   CustomSecurityEventNotificationResponseSerializer            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyReportResponse>?                                CustomNotifyReportResponseSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyMonitoringReportResponse>?                      CustomNotifyMonitoringReportResponseSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.LogStatusNotificationResponse>?                       CustomLogStatusNotificationResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.DataTransferResponse>?                                CustomIncomingDataTransferResponseSerializer                 { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.SignCertificateResponse>?                             CustomSignCertificateResponseSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.Get15118EVCertificateResponse>?                       CustomGet15118EVCertificateResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetCertificateStatusResponse>?                        CustomGetCertificateStatusResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.GetCRLResponse>?                                      CustomGetCRLResponseSerializer                               { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ReservationStatusUpdateResponse>?                     CustomReservationStatusUpdateResponseSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.AuthorizeResponse>?                                   CustomAuthorizeResponseSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyEVChargingNeedsResponse>?                       CustomNotifyEVChargingNeedsResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.TransactionEventResponse>?                            CustomTransactionEventResponseSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.StatusNotificationResponse>?                          CustomStatusNotificationResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.MeterValuesResponse>?                                 CustomMeterValuesResponseSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyChargingLimitResponse>?                         CustomNotifyChargingLimitResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ClearedChargingLimitResponse>?                        CustomClearedChargingLimitResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.ReportChargingProfilesResponse>?                      CustomReportChargingProfilesResponseSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyEVChargingScheduleResponse>?                    CustomNotifyEVChargingScheduleResponseSerializer             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyPriorityChargingResponse>?                      CustomNotifyPriorityChargingResponseSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.PullDynamicScheduleUpdateResponse>?                   CustomPullDynamicScheduleUpdateResponseSerializer            { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyDisplayMessagesResponse>?                       CustomNotifyDisplayMessagesResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CSMS.NotifyCustomerInformationResponse>?                   CustomNotifyCustomerInformationResponseSerializer            { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate <OCPPv2_1.CSMS.BinaryDataTransferResponse>?                          CustomIncomingBinaryDataTransferResponseSerializer           { get; set; }

            #endregion


            #region Charging Station Request  Messages

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.BootNotificationRequest>?                          CustomBootNotificationRequestSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.FirmwareStatusNotificationRequest>?                CustomFirmwareStatusNotificationRequestSerializer            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.PublishFirmwareStatusNotificationRequest>?         CustomPublishFirmwareStatusNotificationRequestSerializer     { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.HeartbeatRequest>?                                 CustomHeartbeatRequestSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyEventRequest>?                               CustomNotifyEventRequestSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SecurityEventNotificationRequest>?                 CustomSecurityEventNotificationRequestSerializer             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyReportRequest>?                              CustomNotifyReportRequestSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyMonitoringReportRequest>?                    CustomNotifyMonitoringReportRequestSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.LogStatusNotificationRequest>?                     CustomLogStatusNotificationRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DataTransferRequest>?                              CustomIncomingDataTransferRequestSerializer                  { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SignCertificateRequest>?                           CustomSignCertificateRequestSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.Get15118EVCertificateRequest>?                     CustomGet15118EVCertificateRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetCertificateStatusRequest>?                      CustomGetCertificateStatusRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetCRLRequest>?                                    CustomGetCRLRequestSerializer                                { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ReservationStatusUpdateRequest>?                   CustomReservationStatusUpdateRequestSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.AuthorizeRequest>?                                 CustomAuthorizeRequestSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyEVChargingNeedsRequest>?                     CustomNotifyEVChargingNeedsRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.TransactionEventRequest>?                          CustomTransactionEventRequestSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.StatusNotificationRequest>?                        CustomStatusNotificationRequestSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.MeterValuesRequest>?                               CustomMeterValuesRequestSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyChargingLimitRequest>?                       CustomNotifyChargingLimitRequestSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearedChargingLimitRequest>?                      CustomClearedChargingLimitRequestSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ReportChargingProfilesRequest>?                    CustomReportChargingProfilesRequestSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyEVChargingScheduleRequest>?                  CustomNotifyEVChargingScheduleRequestSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyPriorityChargingRequest>?                    CustomNotifyPriorityChargingRequestSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.PullDynamicScheduleUpdateRequest>?                 CustomPullDynamicScheduleUpdateRequestSerializer             { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyDisplayMessagesRequest>?                     CustomNotifyDisplayMessagesRequestSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyCustomerInformationRequest>?                 CustomNotifyCustomerInformationRequestSerializer             { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate <OCPPv2_1.CS.BinaryDataTransferRequest>?                        CustomIncomingBinaryDataTransferRequestSerializer            { get; set; }

            #endregion

            #region Charging Station Response Messages

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ResetResponse>?                                    CustomResetResponseSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UpdateFirmwareResponse>?                           CustomUpdateFirmwareResponseSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.PublishFirmwareResponse>?                          CustomPublishFirmwareResponseSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UnpublishFirmwareResponse>?                        CustomUnpublishFirmwareResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetBaseReportResponse>?                            CustomGetBaseReportResponseSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetReportResponse>?                                CustomGetReportResponseSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetLogResponse>?                                   CustomGetLogResponseSerializer                               { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetVariablesResponse>?                             CustomSetVariablesResponseSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetVariablesResponse>?                             CustomGetVariablesResponseSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetMonitoringBaseResponse>?                        CustomSetMonitoringBaseResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetMonitoringReportResponse>?                      CustomGetMonitoringReportResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetMonitoringLevelResponse>?                       CustomSetMonitoringLevelResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetVariableMonitoringResponse>?                    CustomSetVariableMonitoringResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearVariableMonitoringResponse>?                  CustomClearVariableMonitoringResponseSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetNetworkProfileResponse>?                        CustomSetNetworkProfileResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ChangeAvailabilityResponse>?                       CustomChangeAvailabilityResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.TriggerMessageResponse>?                           CustomTriggerMessageResponseSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DataTransferResponse>?                             CustomDataTransferResponseSerializer                         { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.CertificateSignedResponse>?                        CustomCertificateSignedResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.InstallCertificateResponse>?                       CustomInstallCertificateResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetInstalledCertificateIdsResponse>?               CustomGetInstalledCertificateIdsResponseSerializer           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DeleteCertificateResponse>?                        CustomDeleteCertificateResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyCRLResponse>?                                CustomNotifyCRLResponseSerializer                            { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetLocalListVersionResponse>?                      CustomGetLocalListVersionResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SendLocalListResponse>?                            CustomSendLocalListResponseSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearCacheResponse>?                               CustomClearCacheResponseSerializer                           { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ReserveNowResponse>?                               CustomReserveNowResponseSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.CancelReservationResponse>?                        CustomCancelReservationResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.RequestStartTransactionResponse>?                  CustomRequestStartTransactionResponseSerializer              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.RequestStopTransactionResponse>?                   CustomRequestStopTransactionResponseSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetTransactionStatusResponse>?                     CustomGetTransactionStatusResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetChargingProfileResponse>?                       CustomSetChargingProfileResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetChargingProfilesResponse>?                      CustomGetChargingProfilesResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearChargingProfileResponse>?                     CustomClearChargingProfileResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetCompositeScheduleResponse>?                     CustomGetCompositeScheduleResponseSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UpdateDynamicScheduleResponse>?                    CustomUpdateDynamicScheduleResponseSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse>?              CustomNotifyAllowedEnergyTransferResponseSerializer          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UsePriorityChargingResponse>?                      CustomUsePriorityChargingResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.UnlockConnectorResponse>?                          CustomUnlockConnectorResponseSerializer                      { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.AFRRSignalResponse>?                               CustomAFRRSignalResponseSerializer                           { get; set; }

            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetDisplayMessageResponse>?                        CustomSetDisplayMessageResponseSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetDisplayMessagesResponse>?                       CustomGetDisplayMessagesResponseSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.ClearDisplayMessageResponse>?                      CustomClearDisplayMessageResponseSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.CostUpdatedResponse>?                              CustomCostUpdatedResponseSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.CustomerInformationResponse>?                      CustomCustomerInformationResponseSerializer                  { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate <OCPPv2_1.CS.BinaryDataTransferResponse>?                       CustomBinaryDataTransferResponseSerializer                   { get; set; }
            public CustomBinarySerializerDelegate <OCPPv2_1.CS.GetFileResponse>?                                  CustomGetFileResponseSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SendFileResponse>?                                 CustomSendFileResponseSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.DeleteFileResponse>?                               CustomDeleteFileResponseSerializer                           { get; set; }


            // E2E Charging Tariff Extensions
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.SetDefaultChargingTariffResponse>?                 CustomSetDefaultChargingTariffResponseSerializer             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.GetDefaultChargingTariffResponse>?                 CustomGetDefaultChargingTariffResponseSerializer             { get; set; }
            public CustomJObjectSerializerDelegate<OCPPv2_1.CS.RemoveDefaultChargingTariffResponse>?              CustomRemoveDefaultChargingTariffResponseSerializer          { get; set; }

            #endregion


            #region Data Structures

            public CustomJObjectSerializerDelegate<Signature>?                                           CustomSignatureSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<CustomData>?                                          CustomCustomDataSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<Firmware>?                                            CustomFirmwareSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<ComponentVariable>?                                   CustomComponentVariableSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<Component>?                                           CustomComponentSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<EVSE>?                                                CustomEVSESerializer                                   { get; set; }
            public CustomJObjectSerializerDelegate<Variable>?                                            CustomVariableSerializer                               { get; set; }
            public CustomJObjectSerializerDelegate<PeriodicEventStreamParameters>?                       CustomPeriodicEventStreamParametersSerializer          { get; set; }
            public CustomJObjectSerializerDelegate<LogParameters>?                                       CustomLogParametersSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<SetVariableData>?                                     CustomSetVariableDataSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<GetVariableData>?                                     CustomGetVariableDataSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<SetMonitoringData>?                                   CustomSetMonitoringDataSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<NetworkConnectionProfile>?                            CustomNetworkConnectionProfileSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<VPNConfiguration>?                                    CustomVPNConfigurationSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<APNConfiguration>?                                    CustomAPNConfigurationSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<CertificateHashData>?                                 CustomCertificateHashDataSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<AuthorizationData>?                                   CustomAuthorizationDataSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<IdToken>?                                             CustomIdTokenSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<AdditionalInfo>?                                      CustomAdditionalInfoSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<IdTokenInfo>?                                         CustomIdTokenInfoSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<MessageContent>?                                      CustomMessageContentSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<ChargingProfile>?                                     CustomChargingProfileSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<LimitBeyondSoC>?                                      CustomLimitBeyondSoCSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<ChargingSchedule>?                                    CustomChargingScheduleSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<ChargingSchedulePeriod>?                              CustomChargingSchedulePeriodSerializer                 { get; set; }
            public CustomJObjectSerializerDelegate<V2XFreqWattEntry>?                                    CustomV2XFreqWattEntrySerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<V2XSignalWattEntry>?                                  CustomV2XSignalWattEntrySerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<SalesTariff>?                                         CustomSalesTariffSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<SalesTariffEntry>?                                    CustomSalesTariffEntrySerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<RelativeTimeInterval>?                                CustomRelativeTimeIntervalSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<ConsumptionCost>?                                     CustomConsumptionCostSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<Cost>?                                                CustomCostSerializer                                   { get; set; }

            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.AbsolutePriceSchedule>?    CustomAbsolutePriceScheduleSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.PriceRuleStack>?           CustomPriceRuleStackSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.PriceRule>?                CustomPriceRuleSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.TaxRule>?                  CustomTaxRuleSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.OverstayRuleList>?         CustomOverstayRuleListSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.OverstayRule>?             CustomOverstayRuleSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.AdditionalService>?        CustomAdditionalServiceSerializer                      { get; set; }

            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.PriceLevelSchedule>?       CustomPriceLevelScheduleSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<ISO15118_20.CommonMessages.PriceLevelScheduleEntry>?  CustomPriceLevelScheduleEntrySerializer                { get; set; }

            public CustomJObjectSerializerDelegate<TransactionLimits>?                                   CustomTransactionLimitsSerializer                      { get; set; }

            public CustomJObjectSerializerDelegate<ChargingProfileCriterion>?                            CustomChargingProfileCriterionSerializer               { get; set; }
            public CustomJObjectSerializerDelegate<ClearChargingProfile>?                                CustomClearChargingProfileSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<MessageInfo>?                                         CustomMessageInfoSerializer                            { get; set; }


            public CustomJObjectSerializerDelegate<ChargingStation>?                                     CustomChargingStationSerializer                        { get; set; }

            public CustomJObjectSerializerDelegate<StatusInfo>?                                          CustomStatusInfoSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<EVSEStatusInfo<SetDefaultChargingTariffStatus>>?      CustomEVSEStatusInfoSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<EVSEStatusInfo<RemoveDefaultChargingTariffStatus>>?   CustomEVSEStatusInfoSerializer2                        { get; set; }
            public CustomJObjectSerializerDelegate<SetVariableResult>?                                   CustomSetVariableResultSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<GetVariableResult>?                                   CustomGetVariableResultSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<SetMonitoringResult>?                                 CustomSetMonitoringResultSerializer                    { get; set; }
            public CustomJObjectSerializerDelegate<ClearMonitoringResult>?                               CustomClearMonitoringResultSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<CompositeSchedule>?                                   CustomCompositeScheduleSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<EventData>?                                           CustomEventDataSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<ReportData>?                                          CustomReportDataSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<VariableAttribute>?                                   CustomVariableAttributeSerializer                      { get; set; }
            public CustomJObjectSerializerDelegate<VariableCharacteristics>?                             CustomVariableCharacteristicsSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<MonitoringData>?                                      CustomMonitoringDataSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<VariableMonitoring>?                                  CustomVariableMonitoringSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<OCSPRequestData>?                                     CustomOCSPRequestDataSerializer                        { get; set; }

            public CustomJObjectSerializerDelegate<ChargingNeeds>?                                       CustomChargingNeedsSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<ACChargingParameters>?                                CustomACChargingParametersSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<DCChargingParameters>?                                CustomDCChargingParametersSerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<V2XChargingParameters>?                               CustomV2XChargingParametersSerializer                  { get; set; }
            public CustomJObjectSerializerDelegate<EVEnergyOffer>?                                       CustomEVEnergyOfferSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<EVPowerSchedule>?                                     CustomEVPowerScheduleSerializer                        { get; set; }
            public CustomJObjectSerializerDelegate<EVPowerScheduleEntry>?                                CustomEVPowerScheduleEntrySerializer                   { get; set; }
            public CustomJObjectSerializerDelegate<EVAbsolutePriceSchedule>?                             CustomEVAbsolutePriceScheduleSerializer                { get; set; }
            public CustomJObjectSerializerDelegate<EVAbsolutePriceScheduleEntry>?                        CustomEVAbsolutePriceScheduleEntrySerializer           { get; set; }
            public CustomJObjectSerializerDelegate<EVPriceRule>?                                         CustomEVPriceRuleSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<Transaction>?                                         CustomTransactionSerializer                            { get; set; }
            public CustomJObjectSerializerDelegate<MeterValue>?                                          CustomMeterValueSerializer                             { get; set; }
            public CustomJObjectSerializerDelegate<SampledValue>?                                        CustomSampledValueSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<SignedMeterValue>?                                    CustomSignedMeterValueSerializer                       { get; set; }
            public CustomJObjectSerializerDelegate<UnitsOfMeasure>?                                      CustomUnitsOfMeasureSerializer                         { get; set; }


            // Binary Data Streams Extensions
            public CustomBinarySerializerDelegate<Signature>?                                            CustomBinarySignatureSerializer                        { get; set; }


            // E2E Charging Tariffs Extensions
            public CustomJObjectSerializerDelegate<ChargingTariff>?                                      CustomChargingTariffSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<Price>?                                               CustomPriceSerializer                                  { get; set; }
            public CustomJObjectSerializerDelegate<TariffElement>?                                       CustomTariffElementSerializer                          { get; set; }
            public CustomJObjectSerializerDelegate<PriceComponent>?                                      CustomPriceComponentSerializer                         { get; set; }
            public CustomJObjectSerializerDelegate<TaxRate>?                                             CustomTaxRateSerializer                                { get; set; }
            public CustomJObjectSerializerDelegate<TariffRestrictions>?                                  CustomTariffRestrictionsSerializer                     { get; set; }
            public CustomJObjectSerializerDelegate<EnergyMix>?                                           CustomEnergyMixSerializer                              { get; set; }
            public CustomJObjectSerializerDelegate<EnergySource>?                                        CustomEnergySourceSerializer                           { get; set; }
            public CustomJObjectSerializerDelegate<EnvironmentalImpact>?                                 CustomEnvironmentalImpactSerializer                    { get; set; }

            #endregion

            #endregion

            #region Constructor(s)

            /// <summary>
            /// Create a new central system for testing.
            /// </summary>
            /// <param name="Id">The unique identification of this central system.</param>
            /// <param name="RequireAuthentication">Require a HTTP Basic Authentication of all charging boxes.</param>
            public ActingAsCSMS(TestNetworkingNode  NetworkingNode,
                                Boolean             RequireAuthentication   = true,
                                TimeSpan?           DefaultRequestTimeout   = null,
                                IPPort?             HTTPUploadPort          = null,
                                DNSClient?          DNSClient               = null,

                                SignaturePolicy?    SignaturePolicy         = null)

            {

                this.Id                      = NetworkingNode.Id;
                this.NetworkingNodeRef       = NetworkingNode;
                this.RequireAuthentication   = RequireAuthentication;
                this.DefaultRequestTimeout   = DefaultRequestTimeout ?? defaultRequestTimeout;
                this.HTTPUploadPort          = HTTPUploadPort        ?? DefaultHTTPUploadPort;

                Directory.CreateDirectory(Path.Combine(AppContext.BaseDirectory, "HTTPSSEs"));

                this.TestAPI                 = new HTTPExtAPI(
                                                   HTTPServerPort:         IPPort.Parse(3502),
                                                   HTTPServerName:         "GraphDefined OCPP Test Central System",
                                                   HTTPServiceName:        "GraphDefined OCPP Test Central System Service",
                                                   APIRobotEMailAddress:   EMailAddress.Parse("GraphDefined OCPP Test Central System Robot <robot@charging.cloud>"),
                                                   APIRobotGPGPassphrase:  "test123",
                                                   SMTPClient:             new NullMailer(),
                                                   DNSClient:              DNSClient,
                                                   AutoStart:              true
                                               );

                this.TestAPI.HTTPServer.AddAuth(request => {

                    #region Allow some URLs for anonymous access...

                    if (request.Path.StartsWith(TestAPI.URLPathPrefix + "/webapi"))
                    {
                        return HTTPExtAPI.Anonymous;
                    }

                    #endregion

                    return null;

                });


                this.HTTPUploadAPI           = new CSMS.NetworkingNodeUploadAPI(
                                                   this,
                                                   new HTTPServer(
                                                       this.HTTPUploadPort,
                                                       "Open Charging Cloud OCPP Upload Server",
                                                       "Open Charging Cloud OCPP Upload Service"
                                                   )
                                               );

                //this.WebAPI                  = new NetworkingNodeWebAPI(
                //                                   TestAPI
                //                               );
                //this.WebAPI.AttachCSMS(this);

                this.DNSClient               = DNSClient ?? new DNSClient(SearchForIPv6DNSServers: false);

                this.signaturePolicies.Add(SignaturePolicy ?? new SignaturePolicy());

            }

            #endregion


            public static void ShowAllRequests()
            {

                var interfaceType      = typeof(IRequest);
                var implementingTypes  = Assembly.GetAssembly(interfaceType)?.
                                                  GetTypes().
                                                  Where(t => interfaceType.IsAssignableFrom(t) &&
                                                             !t.IsInterface &&
                                                              t.FullName is not null &&
                                                              t.FullName.StartsWith("cloud.charging.open.protocols.OCPPv2_1.CSMS.")).
                                                  ToArray() ?? [];

                foreach (var type in implementingTypes)
                {

                    var jsonJDContextProp  = type.GetField("DefaultJSONLDContext", BindingFlags.Public | BindingFlags.Static);
                    var jsonJDContextValue = jsonJDContextProp?.GetValue(null)?.ToString();

                    Console.WriteLine($"{type.Name}: JSONJDContext = {jsonJDContextValue}");

                }

            }

            public static void ShowAllResponses()
            {

                var interfaceType      = typeof(IResponse);
                var implementingTypes  = Assembly.GetAssembly(interfaceType)?.
                                                  GetTypes().
                                                  Where(t => interfaceType.IsAssignableFrom(t) &&
                                                             !t.IsInterface &&
                                                              t.FullName is not null &&
                                                              t.FullName.StartsWith("cloud.charging.open.protocols.OCPPv2_1.CS.")).
                                                  ToArray() ?? [];

                foreach (var type in implementingTypes)
                {

                    var jsonJDContextProp  = type.GetField("DefaultJSONLDContext", BindingFlags.Public | BindingFlags.Static);
                    var jsonJDContextValue = jsonJDContextProp?.GetValue(null)?.ToString();

                    Console.WriteLine($"{type.Name}: JSONJDContext = {jsonJDContextValue}");

                }

            }


            #region CreateWebSocketService(...)

            /// <summary>
            /// Create a new central system for testing using HTTP/WebSocket.
            /// </summary>
            /// <param name="HTTPServerName">An optional identification string for the HTTP server.</param>
            /// <param name="IPAddress">An IP address to listen on.</param>
            /// <param name="TCPPort">An optional TCP port for the HTTP server.</param>
            /// <param name="DNSClient">An optional DNS client to use.</param>
            /// <param name="AutoStart">Start the server immediately.</param>
            public CSMS.NetworkingNodeWSServer CreateWebSocketService(String       HTTPServerName               = CSMS.NetworkingNodeWSServer.DefaultHTTPServiceName,
                                                                      IIPAddress?  IPAddress                    = null,
                                                                      IPPort?      TCPPort                      = null,

                                                                      Boolean      DisableWebSocketPings        = false,
                                                                      TimeSpan?    WebSocketPingEvery           = null,
                                                                      TimeSpan?    SlowNetworkSimulationDelay   = null,

                                                                      DNSClient?   DNSClient                    = null,
                                                                      Boolean      AutoStart                    = false)
            {

                var centralSystemServer = new CSMS.NetworkingNodeWSServer(
                                              HTTPServerName,
                                              IPAddress,
                                              TCPPort,

                                              RequireAuthentication,
                                              DisableWebSocketPings,
                                              WebSocketPingEvery,
                                              SlowNetworkSimulationDelay,

                                              DNSClient: DNSClient ?? this.DNSClient,
                                              AutoStart: false
                                          );

                AttachCSMSChannel(centralSystemServer);

                if (AutoStart)
                    centralSystemServer.Start();

                return centralSystemServer;

            }

            #endregion

            #region (private) AttachCSMSChannel(CSMSChannel)

            private void AttachCSMSChannel(CSMS.INetworkingNodeChannel CSMSChannel)
            {


                centralSystemServers.Add(CSMSChannel);


                if (CSMSChannel is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                {
                    centralSystemWSServer.OnNewNetworkingNodeWSConnection += async (LogTimestamp,
                                                                                    CSMS,
                                                                                    Connection,
                                                                                    EventTrackingId,
                                                                                    CancellationToken) =>
                    {

                        if (Connection.TryGetCustomDataAs(NetworkingNode.CSMS.NetworkingNodeWSServer.networkingNodeId_WebSocketKey, out NetworkPath? networkPath) &&
                            networkPath is not null)
                        {
                            if (!reachableChargingStations.ContainsKey(networkPath.Origin))
                                reachableChargingStations.TryAdd(networkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(CSMS, Timestamp.Now));
                            else
                                reachableChargingStations[networkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(CSMS, Timestamp.Now);
                        }

                    };
                }


                #region WebSocket related

                #region OnServerStarted

                CSMSChannel.OnServerStarted += (Timestamp,
                                                server,
                                                eventTrackingId) => {

                    DebugX.Log($"OCPP {Version.String} web socket server has started on {server.IPSocket}!");
                    return Task.CompletedTask;

                };

                #endregion

                #region OnNewTCPConnection

                CSMSChannel.OnNewTCPConnection += async (timestamp,
                                                         webSocketServer,
                                                         newWebSocketConnection,
                                                         eventTrackingId,
                                                         cancellationToken) => {

                    var logger = OnNewTCPConnection;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <OnNewTCPConnectionDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   webSocketServer,
                                                                                                   newWebSocketConnection,
                                                                                                   eventTrackingId,
                                                                                                   cancellationToken)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNewTCPConnection),
                                      e
                                  );
                        }

                    }

                };

                #endregion

                #region OnNewWebSocketConnection

                CSMSChannel.OnNewWebSocketConnection += async (timestamp,
                                                               webSocketServer,
                                                               newWebSocketConnection,
                                                               eventTrackingId,
                                                               cancellationToken) => {

                    var logger = OnNewWebSocketConnection;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <OnNewWebSocketConnectionDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   webSocketServer,
                                                                                                   newWebSocketConnection,
                                                                                                   eventTrackingId,
                                                                                                   cancellationToken)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNewWebSocketConnection),
                                      e
                                  );
                        }

                    }

                };

                #endregion

                #region OnCloseMessageReceived

                CSMSChannel.OnCloseMessageReceived += async (timestamp,
                                                             server,
                                                             connection,
                                                             eventTrackingId,
                                                             statusCode,
                                                             reason) => {

                    var logger = OnCloseMessageReceived;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <OnCloseMessageDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   server,
                                                                                                   connection,
                                                                                                   eventTrackingId,
                                                                                                   statusCode,
                                                                                                   reason)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnCloseMessageReceived),
                                      e
                                  );
                        }

                    }

                };

                #endregion

                #region OnTCPConnectionClosed

                CSMSChannel.OnTCPConnectionClosed += async (timestamp,
                                                            server,
                                                            connection,
                                                            reason,
                                                            eventTrackingId) => {

                    var logger = OnTCPConnectionClosed;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <OnTCPConnectionClosedDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   server,
                                                                                                   connection,
                                                                                                   reason,
                                                                                                   eventTrackingId)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnTCPConnectionClosed),
                                      e
                                  );
                        }

                    }

                };

                #endregion

                // Failed (Charging Station) Authentication

                // (Generic) Error Handling

                #endregion


                #region OnTextMessageRequestReceived

                CSMSChannel.OnJSONMessageRequestReceived += async (timestamp,
                                                                   webSocketServer,
                                                                   webSocketConnection,
                                                                   eventTrackingId,
                                                                   requestTimestamp,
                                                                   requestMessage) => {

                    var logger = OnJSONMessageRequestReceived;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <CSMS.OnWebSocketJSONMessageRequestDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   webSocketServer,
                                                                                                   webSocketConnection,
                                                                                                   eventTrackingId,
                                                                                                   requestTimestamp,
                                                                                                   requestMessage)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnJSONMessageRequestReceived),
                                      e
                                  );
                        }

                    }

                };

                #endregion

                #region OnTextMessageResponseSent

                CSMSChannel.OnJSONMessageResponseSent += async (timestamp,
                                                                webSocketServer,
                                                                webSocketConnection,
                                                                eventTrackingId,
                                                                requestTimestamp,
                                                                jsonRequestMessage,
                                                                binaryRequestMessage,
                                                                responseTimestamp,
                                                                responseMessage) => {


                    var logger = OnJSONMessageResponseSent;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <CSMS.OnWebSocketJSONMessageResponseDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   webSocketServer,
                                                                                                   webSocketConnection,
                                                                                                   eventTrackingId,
                                                                                                   requestTimestamp,
                                                                                                   jsonRequestMessage,
                                                                                                   binaryRequestMessage,
                                                                                                   responseTimestamp,
                                                                                                   responseMessage)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnJSONMessageResponseSent),
                                      e
                                  );
                        }

                    }

                };

                #endregion

                #region OnTextErrorResponseSent

                CSMSChannel.OnJSONErrorResponseSent += async (timestamp,
                                                              webSocketServer,
                                                              webSocketConnection,
                                                              eventTrackingId,
                                                              requestTimestamp,
                                                              jsonRequestMessage,
                                                              binaryRequestMessage,
                                                              responseTimestamp,
                                                              responseMessage) => {

                    var logger = OnJSONErrorResponseSent;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <CSMS.OnWebSocketTextErrorResponseDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   webSocketServer,
                                                                                                   webSocketConnection,
                                                                                                   eventTrackingId,
                                                                                                   requestTimestamp,
                                                                                                   jsonRequestMessage,
                                                                                                   binaryRequestMessage,
                                                                                                   responseTimestamp,
                                                                                                   responseMessage)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnJSONErrorResponseSent),
                                      e
                                  );
                        }

                    }

                };

                #endregion


                #region OnTextMessageRequestSent

                CSMSChannel.OnJSONMessageRequestSent += async (timestamp,
                                                               webSocketServer,
                                                               webSocketConnection,
                                                               eventTrackingId,
                                                               requestTimestamp,
                                                               requestMessage) => {


                    var logger = OnJSONMessageRequestSent;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <OnWebSocketTextMessageDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   webSocketServer,
                                                                                                   webSocketConnection,
                                                                                                   eventTrackingId,
                                                                                                   requestMessage.ToString())).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnJSONMessageRequestSent),
                                      e
                                  );
                        }

                    }

                };

                #endregion

                #region OnTextMessageResponseReceived

                CSMSChannel.OnJSONMessageResponseReceived += async (timestamp,
                                                                    webSocketServer,
                                                                    webSocketConnection,
                                                                    eventTrackingId,
                                                                    requestTimestamp,
                                                                    jsonRequestMessage,
                                                                    binaryRequestMessage,
                                                                    responseTimestamp,
                                                                    responseMessage) => {


                    var logger = OnJSONMessageResponseReceived;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <CSMS.OnWebSocketJSONMessageResponseDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   webSocketServer,
                                                                                                   webSocketConnection,
                                                                                                   eventTrackingId,
                                                                                                   requestTimestamp,
                                                                                                   jsonRequestMessage,
                                                                                                   binaryRequestMessage,
                                                                                                   responseTimestamp,
                                                                                                   responseMessage)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnJSONMessageResponseReceived),
                                      e
                                  );
                        }

                    }

                };

                #endregion

                #region OnTextErrorResponseReceived

                CSMSChannel.OnJSONErrorResponseReceived += async (timestamp,
                                                                  webSocketServer,
                                                                  webSocketConnection,
                                                                  eventTrackingId,
                                                                  requestTimestamp,
                                                                  jsonRequestMessage,
                                                                  binaryRequestMessage,
                                                                  responseTimestamp,
                                                                  responseMessage) => {

                    var logger = OnJSONErrorResponseReceived;
                    if (logger is not null)
                    {

                        var loggerTasks = logger.GetInvocationList().
                                                 OfType <CSMS.OnWebSocketTextErrorResponseDelegate>().
                                                 Select (loggingDelegate => loggingDelegate.Invoke(timestamp,
                                                                                                   webSocketServer,
                                                                                                   webSocketConnection,
                                                                                                   eventTrackingId,
                                                                                                   requestTimestamp,
                                                                                                   jsonRequestMessage,
                                                                                                   binaryRequestMessage,
                                                                                                   responseTimestamp,
                                                                                                   responseMessage)).
                                                 ToArray();

                        try
                        {
                            await Task.WhenAll(loggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnJSONErrorResponseReceived),
                                      e
                                  );
                        }

                    }

                };

                #endregion


                #region Incoming OCPP messages and their responses...

                #region OnBootNotification

                CSMSChannel.OnBootNotification += async (timestamp,
                                                         sender,
                                                         connection,
                                                         request,
                                                         cancellationToken) => {

                    #region Send OnBootNotificationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnBootNotificationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnBootNotificationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 connection,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnBootNotificationRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    OCPPv2_1.CSMS.BootNotificationResponse? response = null;

                    // ChargingStation
                    // Reason

                    DebugX.Log($"OnBootNotification: {request.ChargingStation?.SerialNumber ?? "-"} ({request.NetworkPath.Origin})");

                    #region Verify request message

                    if (!SignaturePolicy.VerifyRequestMessage(
                            request,
                            request.ToJSON(
                                CustomBootNotificationRequestSerializer,
                                CustomChargingStationSerializer,
                                CustomSignatureSerializer,
                                CustomCustomDataSerializer
                            ),
                            out var verificationErrorResponse
                        ))
                    {

                        response = new OCPPv2_1.CSMS.BootNotificationResponse(
                                       Request:  request,
                                       Result:   Result.SignatureError(
                                                     $"Invalid signature(s): {verificationErrorResponse}"
                                                 )
                                   );

                        SignaturePolicy.SignResponseMessage(
                            response,
                            response.ToJSON(
                                CustomBootNotificationResponseSerializer,
                                CustomStatusInfoSerializer,
                                CustomSignatureSerializer,
                                CustomCustomDataSerializer
                            ),
                            out var signatureErrorResponse);

                    }

                    #endregion


                    if (response is null)
                    {

                        if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                        {

                            if (sender is CSMS.NetworkingNodeWSServer networkingNodeWSServer)
                                reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(networkingNodeWSServer, Timestamp.Now));

                        }
                        else
                        {

                            if (sender is CSMS.NetworkingNodeWSServer networkingNodeWSServer)
                                reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(networkingNodeWSServer, Timestamp.Now);

                        }

                        response  = await this.NetworkingNodeRef.AsCS.SendBootNotification(request);


                        //response =  new OCPPv2_1.CSMS.BootNotificationResponse(
                        //                     Request:       request,
                        //                     Status:        RegistrationStatus.Accepted,
                        //                     CurrentTime:   Timestamp.Now,
                        //                     Interval:      TimeSpan.FromMinutes(5),
                        //                     StatusInfo:    null,
                        //                     CustomData:    null
                        //                 );

                    }


                    // ToDo: Add aditional signature!

                    //SignaturePolicy.SignResponseMessage(
                    //    response,
                    //    response.ToJSON(
                    //        CustomBootNotificationResponseSerializer,
                    //        CustomStatusInfoSerializer,
                    //        CustomSignatureSerializer,
                    //        CustomCustomDataSerializer
                    //    ),
                    //    out var errorResponse2);


                    #region Send OnBootNotificationResponse event

                    var responseLogger = OnBootNotificationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnBootNotificationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    connection,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnBootNotificationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnFirmwareStatusNotification

                CSMSChannel.OnFirmwareStatusNotification += async (timestamp,
                                                                   sender,
                                                                   request,
                                                                   cancellationToken) => {

                    #region Send OnFirmwareStatusNotificationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnFirmwareStatusNotificationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnFirmwareStatusNotificationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnFirmwareStatusNotificationRequest),
                                      e
                                  );
                        }

                    }

                                                                      #endregion

                    // Status
                    // UpdateFirmwareRequestId

                    DebugX.Log("OnFirmwareStatus: " + request.Status);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));
                    }
                    else
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);
                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomFirmwareStatusNotificationRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.FirmwareStatusNotificationResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.FirmwareStatusNotificationResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomFirmwareStatusNotificationResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnFirmwareStatusNotificationResponse event

                    var responseLogger = OnFirmwareStatusNotificationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnFirmwareStatusNotificationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnFirmwareStatusNotificationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnPublishFirmwareStatusNotification

                CSMSChannel.OnPublishFirmwareStatusNotification += async (timestamp,
                                                                          sender,
                                                                          request,
                                                                          cancellationToken) => {

                    #region Send OnPublishFirmwareStatusNotificationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnPublishFirmwareStatusNotificationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnPublishFirmwareStatusNotificationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnPublishFirmwareStatusNotificationRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // Status
                    // PublishFirmwareStatusNotificationRequestId
                    // DownloadLocations

                    DebugX.Log("OnPublishFirmwareStatusNotification: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomPublishFirmwareStatusNotificationRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.PublishFirmwareStatusNotificationResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.PublishFirmwareStatusNotificationResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomPublishFirmwareStatusNotificationResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnPublishFirmwareStatusNotificationResponse event

                    var responseLogger = OnPublishFirmwareStatusNotificationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnPublishFirmwareStatusNotificationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnPublishFirmwareStatusNotificationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnHeartbeat

                CSMSChannel.OnHeartbeat += async (timestamp,
                                                  sender,
                                                  request,
                                                  cancellationToken) => {

                    #region Send OnHeartbeatRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnHeartbeatRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnHeartbeatRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnHeartbeatRequest),
                                      e
                                  );
                        }

                    }

                    #endregion


                    DebugX.Log("OnHeartbeat: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomHeartbeatRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.HeartbeatResponse(
                                             Request:       request,
                                             Result:        Result.SignatureError(
                                                                $"Invalid signature(s): {errorResponse}"
                                                            )
                                         )

                                       : new OCPPv2_1.CSMS.HeartbeatResponse(
                                             Request:       request,
                                             CurrentTime:   Timestamp.Now,
                                             CustomData:    null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomHeartbeatResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnHeartbeatResponse event

                    var responseLogger = OnHeartbeatResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnHeartbeatResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnHeartbeatResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyEvent

                CSMSChannel.OnNotifyEvent += async (timestamp,
                                                    sender,
                                                    request,
                                                    cancellationToken) => {

                    #region Send OnNotifyEventRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyEventRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyEventRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyEventRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // GeneratedAt
                    // SequenceNumber
                    // EventData
                    // ToBeContinued

                    DebugX.Log("OnNotifyEvent: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomNotifyEventRequestSerializer,
                                           CustomEventDataSerializer,
                                           CustomComponentSerializer,
                                           CustomEVSESerializer,
                                           CustomVariableSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyEventResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyEventResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyEventResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyEventResponse event

                    var responseLogger = OnNotifyEventResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyEventResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyEventResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnSecurityEventNotification

                CSMSChannel.OnSecurityEventNotification += async (timestamp,
                                                                  sender,
                                                                  request,
                                                                  cancellationToken) => {

                    #region Send OnSecurityEventNotificationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSecurityEventNotificationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnSecurityEventNotificationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSecurityEventNotificationRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // Type
                    // Timestamp
                    // TechInfo

                    DebugX.Log("OnSecurityEventNotification: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomSecurityEventNotificationRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.SecurityEventNotificationResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.SecurityEventNotificationResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSecurityEventNotificationResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnSecurityEventNotificationResponse event

                    var responseLogger = OnSecurityEventNotificationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnSecurityEventNotificationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSecurityEventNotificationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyReport

                CSMSChannel.OnNotifyReport += async (timestamp,
                                                     sender,
                                                     request,
                                                     cancellationToken) => {

                    #region Send OnNotifyReportRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyReportRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyReportRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyReportRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // NotifyReportRequestId
                    // SequenceNumber
                    // GeneratedAt
                    // ReportData

                    DebugX.Log("OnNotifyReport: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomNotifyReportRequestSerializer,
                                           CustomReportDataSerializer,
                                           CustomComponentSerializer,
                                           CustomEVSESerializer,
                                           CustomVariableSerializer,
                                           CustomVariableAttributeSerializer,
                                           CustomVariableCharacteristicsSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyReportResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyReportResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyReportResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyReportResponse event

                    var responseLogger = OnNotifyReportResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyReportResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyReportResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyMonitoringReport

                CSMSChannel.OnNotifyMonitoringReport += async (timestamp,
                                                               sender,
                                                               request,
                                                               cancellationToken) => {

                    #region Send OnNotifyMonitoringReportRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyMonitoringReportRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyMonitoringReportRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyMonitoringReportRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // NotifyMonitoringReportRequestId
                    // SequenceNumber
                    // GeneratedAt
                    // MonitoringData
                    // ToBeContinued

                    DebugX.Log("OnNotifyMonitoringReport: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomNotifyMonitoringReportRequestSerializer,
                                           CustomMonitoringDataSerializer,
                                           CustomComponentSerializer,
                                           CustomEVSESerializer,
                                           CustomVariableSerializer,
                                           CustomVariableMonitoringSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyMonitoringReportResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyMonitoringReportResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyMonitoringReportResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyMonitoringReportResponse event

                    var responseLogger = OnNotifyMonitoringReportResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyMonitoringReportResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyMonitoringReportResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnLogStatusNotification

                CSMSChannel.OnLogStatusNotification += async (timestamp,
                                                              sender,
                                                              request,
                                                              cancellationToken) => {

                    #region Send OnLogStatusNotificationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnLogStatusNotificationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnLogStatusNotificationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnLogStatusNotificationRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // Status
                    // LogRquestId

                    DebugX.Log("OnLogStatusNotification: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomLogStatusNotificationRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.LogStatusNotificationResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.LogStatusNotificationResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomLogStatusNotificationResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnLogStatusNotificationResponse event

                    var responseLogger = OnLogStatusNotificationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnLogStatusNotificationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnLogStatusNotificationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnIncomingDataTransfer

                CSMSChannel.OnIncomingDataTransfer += async (timestamp,
                                                             sender,
                                                             request,
                                                             cancellationToken) => {

                    #region Send OnIncomingDataTransferRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnIncomingDataTransferRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnIncomingDataTransferRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetDisplayMessageRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // VendorId
                    // MessageId
                    // Data

                    DebugX.Log("OnIncomingDataTransfer: " + request.VendorId  + ", " +
                                                            request.MessageId + ", " +
                                                            request.Data);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));
                    }
                    else
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);
                    }


                    var responseData = request.Data;

                    if (request.Data is not null)
                    {

                        if      (request.Data.Type == JTokenType.String)
                            responseData = request.Data.ToString().Reverse();

                        else if (request.Data.Type == JTokenType.Object) {

                            var responseObject = new JObject();

                            foreach (var property in (request.Data as JObject)!)
                            {
                                if (property.Value?.Type == JTokenType.String)
                                    responseObject.Add(property.Key,
                                                       property.Value.ToString().Reverse());
                            }

                            responseData = responseObject;

                        }

                        else if (request.Data.Type == JTokenType.Array) {

                            var responseArray = new JArray();

                            foreach (var element in (request.Data as JArray)!)
                            {
                                if (element?.Type == JTokenType.String)
                                    responseArray.Add(element.ToString().Reverse());
                            }

                            responseData = responseArray;

                        }

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomIncomingDataTransferRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.DataTransferResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : request.VendorId == Vendor_Id.GraphDefined

                                             ? new OCPPv2_1.CSMS.DataTransferResponse(
                                                   Request:      request,
                                                   Status:       DataTransferStatus.Accepted,
                                                   Data:         responseData,
                                                   StatusInfo:   null,
                                                   CustomData:   null
                                               )

                                             : new OCPPv2_1.CSMS.DataTransferResponse(
                                                   Request:      request,
                                                   Status:       DataTransferStatus.Rejected,
                                                   Data:         null,
                                                   StatusInfo:   null,
                                                   CustomData:   null
                                             );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomIncomingDataTransferResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnIncomingDataTransferResponse event

                    var responseLogger = OnIncomingDataTransferResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnIncomingDataTransferResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnIncomingDataTransferResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                #region OnSignCertificate

                CSMSChannel.OnSignCertificate += async (timestamp,
                                                        sender,
                                                        request,
                                                        cancellationToken) => {

                    #region Send OnSignCertificateRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnSignCertificateRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnSignCertificateRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSignCertificateRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // CSR
                    // CertificateType

                    DebugX.Log("OnSignCertificate: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomSignCertificateRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.SignCertificateResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.SignCertificateResponse(
                                             Request:      request,
                                             Status:       GenericStatus.Accepted,
                                             StatusInfo:   null,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomSignCertificateResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnSignCertificateResponse event

                    var responseLogger = OnSignCertificateResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnSignCertificateResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSignCertificateResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGet15118EVCertificate

                CSMSChannel.OnGet15118EVCertificate += async (timestamp,
                                                              sender,
                                                              request,
                                                              cancellationToken) => {

                    #region Send OnGet15118EVCertificateRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGet15118EVCertificateRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnGet15118EVCertificateRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGet15118EVCertificateRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // ISO15118SchemaVersion
                    // CertificateAction
                    // EXIRequest
                    // MaximumContractCertificateChains
                    // PrioritizedEMAIds

                    DebugX.Log("OnGet15118EVCertificate: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomGet15118EVCertificateRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.Get15118EVCertificateResponse(
                                             Request:              request,
                                             Result:               Result.SignatureError(
                                                                       $"Invalid signature(s): {errorResponse}"
                                                                   )
                                         )

                                       : new OCPPv2_1.CSMS.Get15118EVCertificateResponse(
                                             Request:              request,
                                             Status:               ISO15118EVCertificateStatus.Accepted,
                                             EXIResponse:          EXIData.Parse("0x1234"),
                                             RemainingContracts:   null,
                                             StatusInfo:           null,
                                             CustomData:           null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGet15118EVCertificateResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnGet15118EVCertificateResponse event

                    var responseLogger = OnGet15118EVCertificateResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnGet15118EVCertificateResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGet15118EVCertificateResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetCertificateStatus

                CSMSChannel.OnGetCertificateStatus += async (timestamp,
                                                             sender,
                                                             request,
                                                             cancellationToken) => {

                    #region Send OnGetCertificateStatusRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetCertificateStatusRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnGetCertificateStatusRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetCertificateStatusRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // OCSPRequestData

                    DebugX.Log("OnGetCertificateStatus: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomGetCertificateStatusRequestSerializer,
                                           CustomOCSPRequestDataSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.GetCertificateStatusResponse(
                                             Request:              request,
                                             Result:               Result.SignatureError(
                                                                       $"Invalid signature(s): {errorResponse}"
                                                                   )
                                         )

                                       : new OCPPv2_1.CSMS.GetCertificateStatusResponse(
                                             Request:      request,
                                             Status:       GetCertificateStatus.Accepted,
                                             OCSPResult:   OCSPResult.Parse("ok!"),
                                             StatusInfo:   null,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetCertificateStatusResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnGetCertificateStatusResponse event

                    var responseLogger = OnGetCertificateStatusResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnGetCertificateStatusResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetCertificateStatusResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnGetCRL

                CSMSChannel.OnGetCRL += async (timestamp,
                                               sender,
                                               request,
                                               cancellationToken) => {

                    #region Send OnGetCRLRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnGetCRLRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnGetCRLRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetCRLRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // GetCRLRequestId
                    // CertificateHashData

                    DebugX.Log("OnGetCRL: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomGetCRLRequestSerializer,
                                           CustomCertificateHashDataSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.GetCRLResponse(
                                             Request:           request,
                                             Result:            Result.SignatureError(
                                                                    $"Invalid signature(s): {errorResponse}"
                                                                )
                                         )

                                       : new OCPPv2_1.CSMS.GetCRLResponse(
                                             Request:           request,
                                             GetCRLRequestId:   request.GetCRLRequestId,
                                             Status:            GenericStatus.Accepted,
                                             StatusInfo:        null,
                                             CustomData:        null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomGetCRLResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnGetCRLResponse event

                    var responseLogger = OnGetCRLResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnGetCRLResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnGetCRLResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                #region OnReservationStatusUpdate

                CSMSChannel.OnReservationStatusUpdate += async (timestamp,
                                                                sender,
                                                                request,
                                                                cancellationToken) => {

                    #region Send OnReservationStatusUpdateRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnReservationStatusUpdateRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnReservationStatusUpdateRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnReservationStatusUpdateRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // ReservationId
                    // ReservationUpdateStatus

                    DebugX.Log("OnReservationStatusUpdate: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                        //if (Sender is CSMSSOAPServer centralSystemSOAPServer)

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                        //if (Sender is CSMSSOAPServer centralSystemSOAPServer)

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomReservationStatusUpdateRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.ReservationStatusUpdateResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.ReservationStatusUpdateResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomReservationStatusUpdateResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnReservationStatusUpdateResponse event

                    var responseLogger = OnReservationStatusUpdateResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnReservationStatusUpdateResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnReservationStatusUpdateResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnAuthorize

                CSMSChannel.OnAuthorize += async (timestamp,
                                                  sender,
                                                  request,
                                                  cancellationToken) => {

                    #region Send OnAuthorizeRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnAuthorizeRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnAuthorizeRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnAuthorizeRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // IdToken
                    // Certificate
                    // ISO15118CertificateHashData

                    DebugX.Log("OnAuthorize: " + request.NetworkPath.Origin + ", " +
                                                 request.IdToken);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                        //if (Sender is CSMSSOAPServer centralSystemSOAPServer)

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                        //if (Sender is CSMSSOAPServer centralSystemSOAPServer)

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomAuthorizeRequestSerializer,
                                           CustomIdTokenSerializer,
                                           CustomAdditionalInfoSerializer,
                                           CustomOCSPRequestDataSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.AuthorizeResponse(
                                             Request:             request,
                                             Result:              Result.SignatureError(
                                                                      $"Invalid signature(s): {errorResponse}"
                                                                  )
                                         )

                                       : new OCPPv2_1.CSMS.AuthorizeResponse(
                                             Request:             request,
                                             IdTokenInfo:         new IdTokenInfo(
                                                                      Status:                AuthorizationStatus.Accepted,
                                                                      CacheExpiryDateTime:   Timestamp.Now.AddDays(3)
                                                                  ),
                                             CertificateStatus:   AuthorizeCertificateStatus.Accepted,
                                             CustomData:          null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomAuthorizeResponseSerializer,
                            CustomIdTokenInfoSerializer,
                            CustomIdTokenSerializer,
                            CustomAdditionalInfoSerializer,
                            CustomMessageContentSerializer,
                            CustomTransactionLimitsSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnAuthorizeResponse event

                    var responseLogger = OnAuthorizeResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnAuthorizeResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnAuthorizeResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyEVChargingNeeds

                CSMSChannel.OnNotifyEVChargingNeeds += async (timestamp,
                                                              sender,
                                                              request,
                                                              cancellationToken) => {

                    #region Send OnNotifyEVChargingNeedsRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyEVChargingNeedsRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyEVChargingNeedsRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyEVChargingNeedsRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // EVSEId
                    // ChargingNeeds
                    // MaxScheduleTuples

                    DebugX.Log("OnNotifyEVChargingNeeds: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomNotifyEVChargingNeedsRequestSerializer,
                                           CustomChargingNeedsSerializer,
                                           CustomACChargingParametersSerializer,
                                           CustomDCChargingParametersSerializer,
                                           CustomV2XChargingParametersSerializer,
                                           CustomEVEnergyOfferSerializer,
                                           CustomEVPowerScheduleSerializer,
                                           CustomEVPowerScheduleEntrySerializer,
                                           CustomEVAbsolutePriceScheduleSerializer,
                                           CustomEVAbsolutePriceScheduleEntrySerializer,
                                           CustomEVPriceRuleSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyEVChargingNeedsResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyEVChargingNeedsResponse(
                                             Request:      request,
                                             Status:       NotifyEVChargingNeedsStatus.Accepted,
                                             StatusInfo:   null,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyEVChargingNeedsResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyEVChargingNeedsResponse event

                    var responseLogger = OnNotifyEVChargingNeedsResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyEVChargingNeedsResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyEVChargingNeedsResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnTransactionEvent

                CSMSChannel.OnTransactionEvent += async (timestamp,
                                                         sender,
                                                         request,
                                                         cancellationToken) => {

                    #region Send OnTransactionEventRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnTransactionEventRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnTransactionEventRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnTransactionEventRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // ChargeBoxId
                    // EventType
                    // Timestamp
                    // TriggerReason
                    // SequenceNumber
                    // TransactionInfo
                    // 
                    // Offline
                    // NumberOfPhasesUsed
                    // CableMaxCurrent
                    // ReservationId
                    // IdToken
                    // EVSE
                    // MeterValues
                    // PreconditioningStatus

                    DebugX.Log("OnTransactionEvent: " + request.NetworkPath.Origin + ", " +
                                                        request.IdToken);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                        //if (Sender is CSMSSOAPServer centralSystemSOAPServer)

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                        //if (Sender is CSMSSOAPServer centralSystemSOAPServer)

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomTransactionEventRequestSerializer,
                                           CustomTransactionSerializer,
                                           CustomIdTokenSerializer,
                                           CustomAdditionalInfoSerializer,
                                           CustomEVSESerializer,
                                           CustomMeterValueSerializer,
                                           CustomSampledValueSerializer,
                                           CustomSignedMeterValueSerializer,
                                           CustomUnitsOfMeasureSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.TransactionEventResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.TransactionEventResponse(
                                             Request:                  request,
                                             TotalCost:                null,
                                             ChargingPriority:         null,
                                             IdTokenInfo:              null,
                                             UpdatedPersonalMessage:   null,
                                             CustomData:               null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomTransactionEventResponseSerializer,
                            CustomIdTokenInfoSerializer,
                            CustomIdTokenSerializer,
                            CustomAdditionalInfoSerializer,
                            CustomMessageContentSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnTransactionEventResponse event

                    var responseLogger = OnTransactionEventResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnTransactionEventResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnTransactionEventResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnStatusNotification

                CSMSChannel.OnStatusNotification += async (timestamp,
                                                           sender,
                                                           request,
                                                           cancellationToken) => {

                    #region Send OnStatusNotificationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnStatusNotificationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnStatusNotificationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnStatusNotificationRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // Timestamp
                    // ConnectorStatus
                    // EVSEId
                    // ConnectorId

                    DebugX.Log($"OnStatusNotification: {request.EVSEId}/{request.ConnectorId} => {request.ConnectorStatus}");

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));
                    }
                    else
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);
                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomStatusNotificationRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.StatusNotificationResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.StatusNotificationResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomStatusNotificationResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnStatusNotificationResponse event

                    var responseLogger = OnStatusNotificationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnStatusNotificationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnStatusNotificationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnMeterValues

                CSMSChannel.OnMeterValues += async (timestamp,
                                                    sender,
                                                    request,
                                                    cancellationToken) => {

                    #region Send OnMeterValuesRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnMeterValuesRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnMeterValuesRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnMeterValuesRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // EVSEId
                    // MeterValues

                    DebugX.Log("OnMeterValues: " + request.EVSEId);

                    DebugX.Log(request.MeterValues.SafeSelect(meterValue => meterValue.Timestamp.ToIso8601() +
                                                                            meterValue.SampledValues.SafeSelect(sampledValue => sampledValue.Context + ", " + sampledValue.Value + ", " + sampledValue.Value).AggregateWith("; ")).AggregateWith(Environment.NewLine));

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));
                    }
                    else
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);
                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomMeterValuesRequestSerializer,
                                           CustomMeterValueSerializer,
                                           CustomSampledValueSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.MeterValuesResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.MeterValuesResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomMeterValuesResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnMeterValuesResponse event

                    var responseLogger = OnMeterValuesResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnMeterValuesResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnMeterValuesResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyChargingLimit

                CSMSChannel.OnNotifyChargingLimit += async (timestamp,
                                                            sender,
                                                            request,
                                                            cancellationToken) => {

                    #region Send OnNotifyChargingLimitRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyChargingLimitRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyChargingLimitRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyChargingLimitRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // ChargingLimit
                    // ChargingSchedules
                    // EVSEId

                    DebugX.Log("OnNotifyChargingLimit: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(

                                           CustomNotifyChargingLimitRequestSerializer,
                                           CustomChargingScheduleSerializer,
                                           CustomLimitBeyondSoCSerializer,
                                           CustomChargingSchedulePeriodSerializer,
                                           CustomV2XFreqWattEntrySerializer,
                                           CustomV2XSignalWattEntrySerializer,
                                           CustomSalesTariffSerializer,
                                           CustomSalesTariffEntrySerializer,
                                           CustomRelativeTimeIntervalSerializer,
                                           CustomConsumptionCostSerializer,
                                           CustomCostSerializer,

                                           CustomAbsolutePriceScheduleSerializer,
                                           CustomPriceRuleStackSerializer,
                                           CustomPriceRuleSerializer,
                                           CustomTaxRuleSerializer,
                                           CustomOverstayRuleListSerializer,
                                           CustomOverstayRuleSerializer,
                                           CustomAdditionalServiceSerializer,

                                           CustomPriceLevelScheduleSerializer,
                                           CustomPriceLevelScheduleEntrySerializer,

                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer

                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyChargingLimitResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyChargingLimitResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyChargingLimitResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyChargingLimitResponse event

                    var responseLogger = OnNotifyChargingLimitResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyChargingLimitResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyChargingLimitResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnClearedChargingLimit

                CSMSChannel.OnClearedChargingLimit += async (timestamp,
                                                             sender,
                                                             request,
                                                             cancellationToken) => {

                    #region Send OnClearedChargingLimitRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnClearedChargingLimitRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnClearedChargingLimitRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearedChargingLimitRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // ChargingLimitSource
                    // EVSEId

                    DebugX.Log("OnClearedChargingLimit: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomClearedChargingLimitRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.ClearedChargingLimitResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.ClearedChargingLimitResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomClearedChargingLimitResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnClearedChargingLimitResponse event

                    var responseLogger = OnClearedChargingLimitResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnClearedChargingLimitResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnClearedChargingLimitResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnReportChargingProfiles

                CSMSChannel.OnReportChargingProfiles += async (timestamp,
                                                               sender,
                                                               request,
                                                               cancellationToken) => {

                    #region Send OnReportChargingProfilesRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnReportChargingProfilesRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnReportChargingProfilesRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnReportChargingProfilesRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // ReportChargingProfilesRequestId
                    // ChargingLimitSource
                    // EVSEId
                    // ChargingProfiles
                    // ToBeContinued

                    DebugX.Log("OnReportChargingProfiles: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(

                                           CustomReportChargingProfilesRequestSerializer,
                                           CustomChargingProfileSerializer,
                                           CustomLimitBeyondSoCSerializer,
                                           CustomChargingScheduleSerializer,
                                           CustomChargingSchedulePeriodSerializer,
                                           CustomV2XFreqWattEntrySerializer,
                                           CustomV2XSignalWattEntrySerializer,
                                           CustomSalesTariffSerializer,
                                           CustomSalesTariffEntrySerializer,
                                           CustomRelativeTimeIntervalSerializer,
                                           CustomConsumptionCostSerializer,
                                           CustomCostSerializer,

                                           CustomAbsolutePriceScheduleSerializer,
                                           CustomPriceRuleStackSerializer,
                                           CustomPriceRuleSerializer,
                                           CustomTaxRuleSerializer,
                                           CustomOverstayRuleListSerializer,
                                           CustomOverstayRuleSerializer,
                                           CustomAdditionalServiceSerializer,

                                           CustomPriceLevelScheduleSerializer,
                                           CustomPriceLevelScheduleEntrySerializer,

                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer

                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.ReportChargingProfilesResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.ReportChargingProfilesResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomReportChargingProfilesResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnReportChargingProfilesResponse event

                    var responseLogger = OnReportChargingProfilesResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnReportChargingProfilesResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnReportChargingProfilesResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyEVChargingSchedule

                CSMSChannel.OnNotifyEVChargingSchedule += async (timestamp,
                                                                 sender,
                                                                 request,
                                                                 cancellationToken) => {

                    #region Send OnNotifyEVChargingScheduleRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyEVChargingScheduleRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyEVChargingScheduleRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyEVChargingScheduleRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // TimeBase
                    // EVSEId
                    // ChargingSchedule
                    // SelectedScheduleTupleId
                    // PowerToleranceAcceptance

                    DebugX.Log("OnNotifyEVChargingSchedule: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(

                                           CustomNotifyEVChargingScheduleRequestSerializer,
                                           CustomChargingScheduleSerializer,
                                           CustomLimitBeyondSoCSerializer,
                                           CustomChargingSchedulePeriodSerializer,
                                           CustomV2XFreqWattEntrySerializer,
                                           CustomV2XSignalWattEntrySerializer,
                                           CustomSalesTariffSerializer,
                                           CustomSalesTariffEntrySerializer,
                                           CustomRelativeTimeIntervalSerializer,
                                           CustomConsumptionCostSerializer,
                                           CustomCostSerializer,

                                           CustomAbsolutePriceScheduleSerializer,
                                           CustomPriceRuleStackSerializer,
                                           CustomPriceRuleSerializer,
                                           CustomTaxRuleSerializer,
                                           CustomOverstayRuleListSerializer,
                                           CustomOverstayRuleSerializer,
                                           CustomAdditionalServiceSerializer,

                                           CustomPriceLevelScheduleSerializer,
                                           CustomPriceLevelScheduleEntrySerializer,

                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer

                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyEVChargingScheduleResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyEVChargingScheduleResponse(
                                             Request:      request,
                                             Status:       GenericStatus.Accepted,
                                             StatusInfo:   null,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyEVChargingScheduleResponseSerializer,
                            CustomStatusInfoSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyEVChargingScheduleResponse event

                    var responseLogger = OnNotifyEVChargingScheduleResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyEVChargingScheduleResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyEVChargingScheduleResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyPriorityCharging

                CSMSChannel.OnNotifyPriorityCharging += async (timestamp,
                                                               sender,
                                                               request,
                                                               cancellationToken) => {

                    #region Send OnNotifyPriorityChargingRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyPriorityChargingRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyPriorityChargingRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyPriorityChargingRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // TransactionId
                    // Activated

                    DebugX.Log("OnNotifyPriorityCharging: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomNotifyPriorityChargingRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyPriorityChargingResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyPriorityChargingResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyPriorityChargingResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyPriorityChargingResponse event

                    var responseLogger = OnNotifyPriorityChargingResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyPriorityChargingResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyPriorityChargingResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnPullDynamicScheduleUpdate

                CSMSChannel.OnPullDynamicScheduleUpdate += async (timestamp,
                                                                  sender,
                                                                  request,
                                                                  cancellationToken) => {

                    #region Send OnPullDynamicScheduleUpdateRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnPullDynamicScheduleUpdateRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnPullDynamicScheduleUpdateRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnPullDynamicScheduleUpdateRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // ChargingProfileId

                    DebugX.Log("OnPullDynamicScheduleUpdate: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomPullDynamicScheduleUpdateRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.PullDynamicScheduleUpdateResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.PullDynamicScheduleUpdateResponse(

                                             Request:               request,

                                             Limit:                 ChargingRateValue.Parse( 1, ChargingRateUnits.Watts),
                                             Limit_L2:              ChargingRateValue.Parse( 2, ChargingRateUnits.Watts),
                                             Limit_L3:              ChargingRateValue.Parse( 3, ChargingRateUnits.Watts),

                                             DischargeLimit:        ChargingRateValue.Parse(-4, ChargingRateUnits.Watts),
                                             DischargeLimit_L2:     ChargingRateValue.Parse(-5, ChargingRateUnits.Watts),
                                             DischargeLimit_L3:     ChargingRateValue.Parse(-6, ChargingRateUnits.Watts),

                                             Setpoint:              ChargingRateValue.Parse( 7, ChargingRateUnits.Watts),
                                             Setpoint_L2:           ChargingRateValue.Parse( 8, ChargingRateUnits.Watts),
                                             Setpoint_L3:           ChargingRateValue.Parse( 9, ChargingRateUnits.Watts),

                                             SetpointReactive:      ChargingRateValue.Parse(10, ChargingRateUnits.Watts),
                                             SetpointReactive_L2:   ChargingRateValue.Parse(11, ChargingRateUnits.Watts),
                                             SetpointReactive_L3:   ChargingRateValue.Parse(12, ChargingRateUnits.Watts),

                                             CustomData:            null

                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomPullDynamicScheduleUpdateResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnPullDynamicScheduleUpdateResponse event

                    var responseLogger = OnPullDynamicScheduleUpdateResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnPullDynamicScheduleUpdateResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnPullDynamicScheduleUpdateResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                #region OnNotifyDisplayMessages

                CSMSChannel.OnNotifyDisplayMessages += async (timestamp,
                                                              sender,
                                                              request,
                                                              cancellationToken) => {

                    #region Send OnNotifyDisplayMessagesRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyDisplayMessagesRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyDisplayMessagesRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyDisplayMessagesRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // NotifyDisplayMessagesRequestId
                    // MessageInfos
                    // ToBeContinued

                    //DebugX.Log("OnNotifyDisplayMessages: " + Request.EVSEId);

                    //DebugX.Log(Request.NotifyDisplayMessages.SafeSelect(meterValue => meterValue.Timestamp.ToIso8601() +
                    //                          meterValue.SampledValues.SafeSelect(sampledValue => sampledValue.Context + ", " + sampledValue.Value + ", " + sampledValue.Value).AggregateWith("; ")).AggregateWith(Environment.NewLine));

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));
                    }
                    else
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);
                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomNotifyDisplayMessagesRequestSerializer,
                                           CustomMessageInfoSerializer,
                                           CustomMessageContentSerializer,
                                           CustomComponentSerializer,
                                           CustomEVSESerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyDisplayMessagesResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyDisplayMessagesResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyDisplayMessagesResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyDisplayMessagesResponse event

                    var responseLogger = OnNotifyDisplayMessagesResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyDisplayMessagesResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyDisplayMessagesResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #region OnNotifyCustomerInformation

                CSMSChannel.OnNotifyCustomerInformation += async (timestamp,
                                                                  sender,
                                                                  request,
                                                                  cancellationToken) => {

                    #region Send OnNotifyCustomerInformationRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnNotifyCustomerInformationRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnNotifyCustomerInformationRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyCustomerInformationRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // NotifyCustomerInformationRequestId
                    // Data
                    // SequenceNumber
                    // GeneratedAt
                    // ToBeContinued

                    DebugX.Log("OnNotifyCustomerInformation: " + request.NetworkPath.Origin);

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));

                    }
                    else
                    {

                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);

                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToJSON(
                                           CustomNotifyCustomerInformationRequestSerializer,
                                           CustomSignatureSerializer,
                                           CustomCustomDataSerializer
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.NotifyCustomerInformationResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : new OCPPv2_1.CSMS.NotifyCustomerInformationResponse(
                                             Request:      request,
                                             CustomData:   null
                                         );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToJSON(
                            CustomNotifyCustomerInformationResponseSerializer,
                            CustomSignatureSerializer,
                            CustomCustomDataSerializer
                        ),
                        out var errorResponse2);


                    #region Send OnNotifyCustomerInformationResponse event

                    var responseLogger = OnNotifyCustomerInformationResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnNotifyCustomerInformationResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnNotifyCustomerInformationResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion


                // Binary Data Streams Extensions

                #region OnIncomingBinaryDataTransfer

                CSMSChannel.OnIncomingBinaryDataTransfer += async (timestamp,
                                                                   sender,
                                                                   request,
                                                                   cancellationToken) => {

                    #region Send OnIncomingBinaryDataTransferRequest event

                    var startTime      = Timestamp.Now;

                    var requestLogger  = OnIncomingBinaryDataTransferRequest;
                    if (requestLogger is not null)
                    {

                        var requestLoggerTasks = requestLogger.GetInvocationList().
                                                               OfType <CSMS.OnIncomingBinaryDataTransferRequestDelegate>().
                                                               Select (loggingDelegate => loggingDelegate.Invoke(startTime,
                                                                                                                 this,
                                                                                                                 request)).
                                                               ToArray();

                        try
                        {
                            await Task.WhenAll(requestLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnSetDisplayMessageRequest),
                                      e
                                  );
                        }

                    }

                    #endregion

                    // VendorId
                    // MessageId
                    // BinaryData

                    DebugX.Log("OnIncomingBinaryDataTransfer: " + request.VendorId  + ", " +
                                                                  request.MessageId + ", " +
                                                                  request.Data?.ToUTF8String() ?? "-");

                    if (!reachableChargingStations.ContainsKey(request.NetworkPath.Origin))
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations.TryAdd(request.NetworkPath.Origin, new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now));
                    }
                    else
                    {
                        if (sender is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                            reachableChargingStations[request.NetworkPath.Origin] = new Tuple<CSMS.INetworkingNodeChannel, DateTime>(centralSystemWSServer, Timestamp.Now);
                    }


                    var responseBinaryData = new Byte[0];

                    if (request.Data is not null)
                    {
                        responseBinaryData = ((Byte[]) request.Data.Clone()).Reverse();
                    }


                    var response = !SignaturePolicy.VerifyRequestMessage(
                                       request,
                                       request.ToBinary(
                                           CustomIncomingBinaryDataTransferRequestSerializer,
                                           CustomBinarySignatureSerializer,
                                           IncludeSignatures: false
                                       ),
                                       out var errorResponse
                                   )

                                       ? new OCPPv2_1.CSMS.BinaryDataTransferResponse(
                                             Request:      request,
                                             Result:       Result.SignatureError(
                                                               $"Invalid signature(s): {errorResponse}"
                                                           )
                                         )

                                       : request.VendorId == Vendor_Id.GraphDefined

                                             ? new OCPPv2_1.CSMS.BinaryDataTransferResponse(
                                                   Request:                request,
                                                   Status:                 BinaryDataTransferStatus.Accepted,
                                                   AdditionalStatusInfo:   null,
                                                   Data:                   responseBinaryData
                                               )

                                             : new OCPPv2_1.CSMS.BinaryDataTransferResponse(
                                                   Request:                request,
                                                   Status:                 BinaryDataTransferStatus.Rejected,
                                                   AdditionalStatusInfo:   null,
                                                   Data:                   responseBinaryData
                                               );

                    SignaturePolicy.SignResponseMessage(
                        response,
                        response.ToBinary(
                            CustomIncomingBinaryDataTransferResponseSerializer,
                            null, //CustomStatusInfoSerializer,
                            CustomBinarySignatureSerializer,
                            IncludeSignatures: false
                        ),
                        out var errorResponse2);


                    #region Send OnIncomingBinaryDataTransferResponse event

                    var responseLogger = OnIncomingBinaryDataTransferResponse;
                    if (responseLogger is not null)
                    {

                        var responseTime         = Timestamp.Now;

                        var responseLoggerTasks  = responseLogger.GetInvocationList().
                                                                  OfType <CSMS.OnIncomingBinaryDataTransferResponseDelegate>().
                                                                  Select (loggingDelegate => loggingDelegate.Invoke(responseTime,
                                                                                                                    this,
                                                                                                                    request,
                                                                                                                    response,
                                                                                                                    responseTime - startTime)).
                                                                  ToArray();

                        try
                        {
                            await Task.WhenAll(responseLoggerTasks);
                        }
                        catch (Exception e)
                        {
                            await HandleErrors(
                                      nameof(TestNetworkingNode),
                                      nameof(OnIncomingBinaryDataTransferResponse),
                                      e
                                  );
                        }

                    }

                    #endregion

                    return response;

                };

                #endregion

                #endregion


                // Firmware API download messages
                // Logdata API upload messages
                // Diagnostics API upload messages

            }

            #endregion


            #region NetworkingNode -> Charging Station Messages

            #region NextRequestId

            public Request_Id NextRequestId
            {
                get
                {

                    Interlocked.Increment(ref internalRequestId);

                    return Request_Id.Parse(internalRequestId.ToString());

                }
            }

            #endregion


            #region Reset                       (Request)

            /// <summary>
            /// Reset the given charging station.
            /// </summary>
            /// <param name="Request">A Reset request.</param>
            public async Task<OCPPv2_1.CS.ResetResponse>
                Reset(OCPPv2_1.CSMS.ResetRequest Request)

            {

                #region Send OnResetRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnResetRequest?.Invoke(startTime,
                                           this,
                                           Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnResetRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomResetRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.Reset(Request)

                                          : new OCPPv2_1.CS.ResetResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.ResetResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomResetResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnResetResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnResetResponse?.Invoke(endTime,
                                            this,
                                            Request,
                                            response,
                                            endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnResetResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region UpdateFirmware              (Request)

            /// <summary>
            /// Initiate a firmware update of the given charging station.
            /// </summary>
            /// <param name="Request">An UpdateFirmware request.</param>
            public async Task<OCPPv2_1.CS.UpdateFirmwareResponse>
                UpdateFirmware(OCPPv2_1.CSMS.UpdateFirmwareRequest Request)

            {

                #region Send OnUpdateFirmwareRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnUpdateFirmwareRequest?.Invoke(startTime,
                                                    this,
                                                    Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUpdateFirmwareRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomUpdateFirmwareRequestSerializer,
                                              CustomFirmwareSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.UpdateFirmware(Request)

                                          : new OCPPv2_1.CS.UpdateFirmwareResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.UpdateFirmwareResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomUpdateFirmwareResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnUpdateFirmwareResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnUpdateFirmwareResponse?.Invoke(endTime,
                                                     this,
                                                     Request,
                                                     response,
                                                     endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUpdateFirmwareResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region PublishFirmware             (Request)

            /// <summary>
            /// Publish a firmware onto a local controller.
            /// </summary>
            /// <param name="Request">A PublishFirmware request.</param>
            public async Task<OCPPv2_1.CS.PublishFirmwareResponse>
                PublishFirmware(OCPPv2_1.CSMS.PublishFirmwareRequest Request)

            {

                #region Send OnPublishFirmwareRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnPublishFirmwareRequest?.Invoke(startTime,
                                                     this,
                                                     Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnPublishFirmwareRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomPublishFirmwareRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.PublishFirmware(Request)

                                          : new OCPPv2_1.CS.PublishFirmwareResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.PublishFirmwareResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomPublishFirmwareResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnPublishFirmwareResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnPublishFirmwareResponse?.Invoke(endTime,
                                                      this,
                                                      Request,
                                                      response,
                                                      endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnPublishFirmwareResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region UnpublishFirmware           (Request)

            /// <summary>
            /// Unpublish a firmware from a local controller.
            /// </summary>
            /// <param name="Request">An UnpublishFirmware request.</param>
            public async Task<OCPPv2_1.CS.UnpublishFirmwareResponse>
                UnpublishFirmware(OCPPv2_1.CSMS.UnpublishFirmwareRequest Request)

            {

                #region Send OnUnpublishFirmwareRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnUnpublishFirmwareRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUnpublishFirmwareRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomUnpublishFirmwareRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.UnpublishFirmware(Request)

                                          : new OCPPv2_1.CS.UnpublishFirmwareResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.UnpublishFirmwareResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomUnpublishFirmwareResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnUnpublishFirmwareResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnUnpublishFirmwareResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUnpublishFirmwareResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetBaseReport               (Request)

            /// <summary>
            /// Retrieve the base report from the charging station.
            /// </summary>
            /// <param name="Request">A GetBaseReport request.</param>
            public async Task<OCPPv2_1.CS.GetBaseReportResponse>
                GetBaseReport(OCPPv2_1.CSMS.GetBaseReportRequest Request)

            {

                #region Send OnGetBaseReportRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetBaseReportRequest?.Invoke(startTime,
                                                   this,
                                                   Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetBaseReportRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetBaseReportRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetBaseReport(Request)

                                          : new OCPPv2_1.CS.GetBaseReportResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetBaseReportResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetBaseReportResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetBaseReportResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetBaseReportResponse?.Invoke(endTime,
                                                    this,
                                                    Request,
                                                    response,
                                                    endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetBaseReportResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetReport                   (Request)

            /// <summary>
            /// Retrieve reports from the charging station.
            /// </summary>
            /// <param name="Request">A GetReport request.</param>
            public async Task<OCPPv2_1.CS.GetReportResponse>
                GetReport(OCPPv2_1.CSMS.GetReportRequest Request)

            {

                #region Send OnGetReportRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetReportRequest?.Invoke(startTime,
                                               this,
                                               Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetReportRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetReportRequestSerializer,
                                              CustomComponentVariableSerializer,
                                              CustomComponentSerializer,
                                              CustomEVSESerializer,
                                              CustomVariableSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetReport(Request)

                                          : new OCPPv2_1.CS.GetReportResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetReportResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetReportResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetReportResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetReportResponse?.Invoke(endTime,
                                                this,
                                                Request,
                                                response,
                                                endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetReportResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetLog                      (Request)

            /// <summary>
            /// Retrieve log files from the charging station.
            /// </summary>
            /// <param name="Request">A GetLog request.</param>
            public async Task<OCPPv2_1.CS.GetLogResponse>
                GetLog(OCPPv2_1.CSMS.GetLogRequest Request)

            {

                #region Send OnGetLogRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetLogRequest?.Invoke(startTime,
                                            this,
                                            Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetLogRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetLogRequestSerializer,
                                              CustomLogParametersSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetLog(Request)

                                          : new OCPPv2_1.CS.GetLogResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetLogResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetLogResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetLogResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetLogResponse?.Invoke(endTime,
                                             this,
                                             Request,
                                             response,
                                             endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetLogResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region SetVariables                (Request)

            /// <summary>
            /// Set variable data on a charging station.
            /// </summary>
            /// <param name="Request">A SetVariables request.</param>
            public async Task<OCPPv2_1.CS.SetVariablesResponse>
                SetVariables(OCPPv2_1.CSMS.SetVariablesRequest Request)

            {

                #region Send OnSetVariablesRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSetVariablesRequest?.Invoke(startTime,
                                                  this,
                                                  Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetVariablesRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSetVariablesRequestSerializer,
                                              CustomSetVariableDataSerializer,
                                              CustomComponentSerializer,
                                              CustomEVSESerializer,
                                              CustomVariableSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SetVariables(Request)

                                          : new OCPPv2_1.CS.SetVariablesResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SetVariablesResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSetVariablesResponseSerializer,
                        CustomSetVariableResultSerializer,
                        CustomComponentSerializer,
                        CustomEVSESerializer,
                        CustomVariableSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSetVariablesResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSetVariablesResponse?.Invoke(endTime,
                                                   this,
                                                   Request,
                                                   response,
                                                   endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetVariablesResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetVariables                (Request)

            /// <summary>
            /// Get variable data from a charging station.
            /// </summary>
            /// <param name="Request">A GetVariables request.</param>
            public async Task<OCPPv2_1.CS.GetVariablesResponse>
                GetVariables(OCPPv2_1.CSMS.GetVariablesRequest Request)

            {

                #region Send OnGetVariablesRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetVariablesRequest?.Invoke(startTime,
                                                  this,
                                                  Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetVariablesRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetVariablesRequestSerializer,
                                              CustomGetVariableDataSerializer,
                                              CustomComponentSerializer,
                                              CustomEVSESerializer,
                                              CustomVariableSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetVariables(Request)

                                          : new OCPPv2_1.CS.GetVariablesResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetVariablesResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetVariablesResponseSerializer,
                        CustomGetVariableResultSerializer,
                        CustomComponentSerializer,
                        CustomEVSESerializer,
                        CustomVariableSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetVariablesResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetVariablesResponse?.Invoke(endTime,
                                                   this,
                                                   Request,
                                                   response,
                                                   endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetVariablesResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SetMonitoringBase           (Request)

            /// <summary>
            /// Set the monitoring base of a charging station.
            /// </summary>
            /// <param name="Request">A SetMonitoringBase request.</param>
            public async Task<OCPPv2_1.CS.SetMonitoringBaseResponse>
                SetMonitoringBase(OCPPv2_1.CSMS.SetMonitoringBaseRequest Request)

            {

                #region Send OnSetMonitoringBaseRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSetMonitoringBaseRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetMonitoringBaseRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSetMonitoringBaseRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SetMonitoringBase(Request)

                                          : new OCPPv2_1.CS.SetMonitoringBaseResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SetMonitoringBaseResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSetMonitoringBaseResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSetMonitoringBaseResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSetMonitoringBaseResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetMonitoringBaseResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetMonitoringReport         (Request)

            /// <summary>
            /// Get monitoring report from a charging station.
            /// </summary>
            /// <param name="Request">A GetMonitoringReport request.</param>
            public async Task<OCPPv2_1.CS.GetMonitoringReportResponse>
                GetMonitoringReport(OCPPv2_1.CSMS.GetMonitoringReportRequest Request)

            {

                #region Send OnGetMonitoringReportRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetMonitoringReportRequest?.Invoke(startTime,
                                                         this,
                                                         Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetMonitoringReportRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetMonitoringReportRequestSerializer,
                                              CustomComponentVariableSerializer,
                                              CustomComponentSerializer,
                                              CustomEVSESerializer,
                                              CustomVariableSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetMonitoringReport(Request)

                                          : new OCPPv2_1.CS.GetMonitoringReportResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetMonitoringReportResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetMonitoringReportResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetMonitoringReportResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetMonitoringReportResponse?.Invoke(endTime,
                                                          this,
                                                          Request,
                                                          response,
                                                          endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetMonitoringReportResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SetMonitoringLevel          (Request)

            /// <summary>
            /// Set the monitoring level on a charging station.
            /// </summary>
            /// <param name="Request">A SetMonitoringLevel request.</param>
            public async Task<OCPPv2_1.CS.SetMonitoringLevelResponse>
                SetMonitoringLevel(OCPPv2_1.CSMS.SetMonitoringLevelRequest Request)

            {

                #region Send OnSetMonitoringLevelRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSetMonitoringLevelRequest?.Invoke(startTime,
                                                        this,
                                                        Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetMonitoringLevelRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSetMonitoringLevelRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SetMonitoringLevel(Request)

                                          : new OCPPv2_1.CS.SetMonitoringLevelResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SetMonitoringLevelResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSetMonitoringLevelResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSetMonitoringLevelResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSetMonitoringLevelResponse?.Invoke(endTime,
                                                         this,
                                                         Request,
                                                         response,
                                                         endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetMonitoringLevelResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SetVariableMonitoring       (Request)

            /// <summary>
            /// Set a variable monitoring on a charging station.
            /// </summary>
            /// <param name="Request">A SetVariableMonitoring request.</param>
            public async Task<OCPPv2_1.CS.SetVariableMonitoringResponse>
                SetVariableMonitoring(OCPPv2_1.CSMS.SetVariableMonitoringRequest Request)

            {

                #region Send OnSetVariableMonitoringRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSetVariableMonitoringRequest?.Invoke(startTime,
                                                           this,
                                                           Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetVariableMonitoringRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSetVariableMonitoringRequestSerializer,
                                              CustomSetMonitoringDataSerializer,
                                              CustomComponentSerializer,
                                              CustomEVSESerializer,
                                              CustomVariableSerializer,
                                              CustomPeriodicEventStreamParametersSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SetVariableMonitoring(Request)

                                          : new OCPPv2_1.CS.SetVariableMonitoringResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SetVariableMonitoringResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSetVariableMonitoringResponseSerializer,
                        CustomSetMonitoringResultSerializer,
                        CustomComponentSerializer,
                        CustomEVSESerializer,
                        CustomVariableSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSetVariableMonitoringResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSetVariableMonitoringResponse?.Invoke(endTime,
                                                            this,
                                                            Request,
                                                            response,
                                                            endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetVariableMonitoringResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region ClearVariableMonitoring     (Request)

            /// <summary>
            /// Delete a variable monitoring on a charging station.
            /// </summary>
            /// <param name="Request">A ClearVariableMonitoring request.</param>
            public async Task<OCPPv2_1.CS.ClearVariableMonitoringResponse>
                ClearVariableMonitoring(OCPPv2_1.CSMS.ClearVariableMonitoringRequest Request)

            {

                #region Send OnClearVariableMonitoringRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnClearVariableMonitoringRequest?.Invoke(startTime,
                                                             this,
                                                             Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearVariableMonitoringRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomClearVariableMonitoringRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.ClearVariableMonitoring(Request)

                                          : new OCPPv2_1.CS.ClearVariableMonitoringResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.ClearVariableMonitoringResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomClearVariableMonitoringResponseSerializer,
                        CustomClearMonitoringResultSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnClearVariableMonitoringResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnClearVariableMonitoringResponse?.Invoke(endTime,
                                                              this,
                                                              Request,
                                                              response,
                                                              endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearVariableMonitoringResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SetNetworkProfile           (Request)

            /// <summary>
            /// Set the network profile of a charging station.
            /// </summary>
            /// <param name="Request">A SetNetworkProfile request.</param>
            public async Task<OCPPv2_1.CS.SetNetworkProfileResponse>
                SetNetworkProfile(OCPPv2_1.CSMS.SetNetworkProfileRequest Request)

            {

                #region Send OnSetNetworkProfileRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSetNetworkProfileRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetNetworkProfileRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSetNetworkProfileRequestSerializer,
                                              CustomNetworkConnectionProfileSerializer,
                                              CustomVPNConfigurationSerializer,
                                              CustomAPNConfigurationSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SetNetworkProfile(Request)

                                          : new OCPPv2_1.CS.SetNetworkProfileResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SetNetworkProfileResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSetNetworkProfileResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSetNetworkProfileResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSetNetworkProfileResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetNetworkProfileResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region ChangeAvailability          (Request)

            /// <summary>
            /// Change the availability of the given charging station.
            /// </summary>
            /// <param name="Request">A ChangeAvailability request.</param>
            public async Task<OCPPv2_1.CS.ChangeAvailabilityResponse>
                ChangeAvailability(OCPPv2_1.CSMS.ChangeAvailabilityRequest Request)

            {

                #region Send OnChangeAvailabilityRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnChangeAvailabilityRequest?.Invoke(startTime,
                                                        this,
                                                        Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnChangeAvailabilityRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomChangeAvailabilityRequestSerializer,
                                              CustomEVSESerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.ChangeAvailability(Request)

                                          : new OCPPv2_1.CS.ChangeAvailabilityResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.ChangeAvailabilityResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomChangeAvailabilityResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnChangeAvailabilityResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnChangeAvailabilityResponse?.Invoke(endTime,
                                                         this,
                                                         Request,
                                                         response,
                                                         endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnChangeAvailabilityResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region TriggerMessage              (Request)

            /// <summary>
            /// Create a trigger for the given message at the given charging station connector.
            /// </summary>
            /// <param name="Request">A TriggerMessage request.</param>
            public async Task<OCPPv2_1.CS.TriggerMessageResponse>
                TriggerMessage(OCPPv2_1.CSMS.TriggerMessageRequest Request)

            {

                #region Send OnTriggerMessageRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnTriggerMessageRequest?.Invoke(startTime,
                                                    this,
                                                    Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnTriggerMessageRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomTriggerMessageRequestSerializer,
                                              CustomEVSESerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.TriggerMessage(Request)

                                          : new OCPPv2_1.CS.TriggerMessageResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.TriggerMessageResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomTriggerMessageResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnTriggerMessageResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnTriggerMessageResponse?.Invoke(endTime,
                                                     this,
                                                     Request,
                                                     response,
                                                     endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnTriggerMessageResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region TransferData                (Request)

            /// <summary>
            /// Transfer the given data to the given charging station.
            /// </summary>
            /// <param name="Request">A DataTransfer request.</param>
            public async Task<OCPPv2_1.CS.DataTransferResponse>
                TransferData(OCPPv2_1.CSMS.DataTransferRequest Request)

            {

                #region Send OnDataTransferRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnDataTransferRequest?.Invoke(startTime,
                                                  this,
                                                  Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDataTransferRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomDataTransferRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.TransferData(Request)

                                          : new OCPPv2_1.CS.DataTransferResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.DataTransferResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomDataTransferResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnDataTransferResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnDataTransferResponse?.Invoke(endTime,
                                                   this,
                                                   Request,
                                                   response,
                                                   endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDataTransferResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region SendSignedCertificate       (Request)

            /// <summary>
            /// Send the signed certificate to the given charging station.
            /// </summary>
            /// <param name="Request">A CertificateSigned request.</param>
            public async Task<OCPPv2_1.CS.CertificateSignedResponse>
                SendSignedCertificate(OCPPv2_1.CSMS.CertificateSignedRequest Request)

            {

                #region Send OnCertificateSignedRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnCertificateSignedRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnCertificateSignedRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomCertificateSignedRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SendSignedCertificate(Request)

                                          : new OCPPv2_1.CS.CertificateSignedResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.CertificateSignedResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomCertificateSignedResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnCertificateSignedResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnCertificateSignedResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnCertificateSignedResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region InstallCertificate          (Request)

            /// <summary>
            /// Install the given certificate within the charging station.
            /// </summary>
            /// <param name="Request">A InstallCertificate request.</param>
            public async Task<OCPPv2_1.CS.InstallCertificateResponse>
                InstallCertificate(OCPPv2_1.CSMS.InstallCertificateRequest Request)

            {

                #region Send OnInstallCertificateRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnInstallCertificateRequest?.Invoke(startTime,
                                                        this,
                                                        Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnInstallCertificateRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomInstallCertificateRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.InstallCertificate(Request)

                                          : new OCPPv2_1.CS.InstallCertificateResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.InstallCertificateResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomInstallCertificateResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnInstallCertificateResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnInstallCertificateResponse?.Invoke(endTime,
                                                         this,
                                                         Request,
                                                         response,
                                                         endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnInstallCertificateResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetInstalledCertificateIds  (Request)

            /// <summary>
            /// Retrieve a list of all installed certificates within the charging station.
            /// </summary>
            /// <param name="Request">A GetInstalledCertificateIds request.</param>
            public async Task<OCPPv2_1.CS.GetInstalledCertificateIdsResponse>
                GetInstalledCertificateIds(OCPPv2_1.CSMS.GetInstalledCertificateIdsRequest Request)

            {

                #region Send OnGetInstalledCertificateIdsRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetInstalledCertificateIdsRequest?.Invoke(startTime,
                                                                this,
                                                                Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetInstalledCertificateIdsRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetInstalledCertificateIdsRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetInstalledCertificateIds(Request)

                                          : new OCPPv2_1.CS.GetInstalledCertificateIdsResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetInstalledCertificateIdsResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetInstalledCertificateIdsResponseSerializer,
                        CustomCertificateHashDataSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetInstalledCertificateIdsResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetInstalledCertificateIdsResponse?.Invoke(endTime,
                                                                 this,
                                                                 Request,
                                                                 response,
                                                                 endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetInstalledCertificateIdsResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region DeleteCertificate           (Request)

            /// <summary>
            /// Delete the given certificate on the charging station.
            /// </summary>
            /// <param name="Request">A DeleteCertificate request.</param>
            public async Task<OCPPv2_1.CS.DeleteCertificateResponse>
                DeleteCertificate(OCPPv2_1.CSMS.DeleteCertificateRequest Request)

            {

                #region Send OnDeleteCertificateRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnDeleteCertificateRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDeleteCertificateRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomDeleteCertificateRequestSerializer,
                                              CustomCertificateHashDataSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.DeleteCertificate(Request)

                                          : new OCPPv2_1.CS.DeleteCertificateResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.DeleteCertificateResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomDeleteCertificateResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnDeleteCertificateResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnDeleteCertificateResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDeleteCertificateResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyCRLAvailability       (Request)

            /// <summary>
            /// Delete the given certificate on the charging station.
            /// </summary>
            /// <param name="Request">A NotifyCRLAvailability request.</param>
            public async Task<OCPPv2_1.CS.NotifyCRLResponse>
                NotifyCRLAvailability(OCPPv2_1.CSMS.NotifyCRLRequest Request)

            {

                #region Send OnNotifyCRLRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyCRLRequest?.Invoke(startTime,
                                               this,
                                               Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyCRLRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomNotifyCRLRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.NotifyCRLAvailability(Request)

                                          : new OCPPv2_1.CS.NotifyCRLResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.NotifyCRLResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyCRLResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyCRLResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyCRLResponse?.Invoke(endTime,
                                                this,
                                                Request,
                                                response,
                                                endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyCRLResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region GetLocalListVersion         (Request)

            /// <summary>
            /// Return the local white list of the given charging station.
            /// </summary>
            /// <param name="Request">A GetLocalListVersion request.</param>
            public async Task<OCPPv2_1.CS.GetLocalListVersionResponse>
                GetLocalListVersion(OCPPv2_1.CSMS.GetLocalListVersionRequest Request)

            {

                #region Send OnGetLocalListVersionRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetLocalListVersionRequest?.Invoke(startTime,
                                                         this,
                                                         Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetLocalListVersionRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetLocalListVersionRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetLocalListVersion(Request)

                                          : new OCPPv2_1.CS.GetLocalListVersionResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetLocalListVersionResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetLocalListVersionResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetLocalListVersionResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetLocalListVersionResponse?.Invoke(endTime,
                                                          this,
                                                          Request,
                                                          response,
                                                          endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetLocalListVersionResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendLocalList               (Request)

            /// <summary>
            /// Set the local white liste at the given charging station.
            /// </summary>
            /// <param name="Request">A SendLocalList request.</param>
            public async Task<OCPPv2_1.CS.SendLocalListResponse>
                SendLocalList(OCPPv2_1.CSMS.SendLocalListRequest Request)

            {

                #region Send OnSendLocalListRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSendLocalListRequest?.Invoke(startTime,
                                                   this,
                                                   Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSendLocalListRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSendLocalListRequestSerializer,
                                              CustomAuthorizationDataSerializer,
                                              CustomIdTokenSerializer,
                                              CustomAdditionalInfoSerializer,
                                              CustomIdTokenInfoSerializer,
                                              CustomMessageContentSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SendLocalList(Request)

                                          : new OCPPv2_1.CS.SendLocalListResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SendLocalListResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSendLocalListResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSendLocalListResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSendLocalListResponse?.Invoke(endTime,
                                                    this,
                                                    Request,
                                                    response,
                                                    endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSendLocalListResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region ClearCache                  (Request)

            /// <summary>
            /// Clear the local white liste cache of the given charging station.
            /// </summary>
            /// <param name="Request">A ClearCache request.</param>
            public async Task<OCPPv2_1.CS.ClearCacheResponse>
                ClearCache(OCPPv2_1.CSMS.ClearCacheRequest Request)

            {

                #region Send OnClearCacheRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnClearCacheRequest?.Invoke(startTime,
                                                this,
                                                Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearCacheRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomClearCacheRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.ClearCache(Request)

                                          : new OCPPv2_1.CS.ClearCacheResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.ClearCacheResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomClearCacheResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnClearCacheResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnClearCacheResponse?.Invoke(endTime,
                                                 this,
                                                 Request,
                                                 response,
                                                 endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearCacheResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region ReserveNow                  (Request)

            /// <summary>
            /// Create a charging reservation of the given charging station connector.
            /// </summary>
            /// <param name="Request">A ReserveNow request.</param>
            public async Task<OCPPv2_1.CS.ReserveNowResponse>
                ReserveNow(OCPPv2_1.CSMS.ReserveNowRequest Request)

            {

                #region Send OnReserveNowRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnReserveNowRequest?.Invoke(startTime,
                                                this,
                                                Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnReserveNowRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomReserveNowRequestSerializer,
                                              CustomIdTokenSerializer,
                                              CustomAdditionalInfoSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.ReserveNow(Request)

                                          : new OCPPv2_1.CS.ReserveNowResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.ReserveNowResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomReserveNowResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnReserveNowResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnReserveNowResponse?.Invoke(endTime,
                                                 this,
                                                 Request,
                                                 response,
                                                 endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnReserveNowResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region CancelReservation           (Request)

            /// <summary>
            /// Cancel the given charging reservation at the given charging station.
            /// </summary>
            /// <param name="Request">A CancelReservation request.</param>
            public async Task<OCPPv2_1.CS.CancelReservationResponse>
                CancelReservation(OCPPv2_1.CSMS.CancelReservationRequest Request)

            {

                #region Send OnCancelReservationRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnCancelReservationRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnCancelReservationRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomCancelReservationRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.CancelReservation(Request)

                                          : new OCPPv2_1.CS.CancelReservationResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.CancelReservationResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomCancelReservationResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnCancelReservationResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnCancelReservationResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnCancelReservationResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region StartCharging               (Request)

            /// <summary>
            /// Set the charging profile of the given charging station connector.
            /// </summary>
            /// <param name="Request">A StartCharging request.</param>
            public async Task<OCPPv2_1.CS.RequestStartTransactionResponse>
                StartCharging(OCPPv2_1.CSMS.RequestStartTransactionRequest Request)

            {

                #region Send OnRequestStartTransactionRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnRequestStartTransactionRequest?.Invoke(startTime,
                                                             this,
                                                             Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnRequestStartTransactionRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomRequestStartTransactionRequestSerializer,
                                              CustomIdTokenSerializer,
                                              CustomAdditionalInfoSerializer,
                                              CustomChargingProfileSerializer,
                                              CustomLimitBeyondSoCSerializer,
                                              CustomChargingScheduleSerializer,
                                              CustomChargingSchedulePeriodSerializer,
                                              CustomV2XFreqWattEntrySerializer,
                                              CustomV2XSignalWattEntrySerializer,
                                              CustomSalesTariffSerializer,
                                              CustomSalesTariffEntrySerializer,
                                              CustomRelativeTimeIntervalSerializer,
                                              CustomConsumptionCostSerializer,
                                              CustomCostSerializer,

                                              CustomAbsolutePriceScheduleSerializer,
                                              CustomPriceRuleStackSerializer,
                                              CustomPriceRuleSerializer,
                                              CustomTaxRuleSerializer,
                                              CustomOverstayRuleListSerializer,
                                              CustomOverstayRuleSerializer,
                                              CustomAdditionalServiceSerializer,

                                              CustomPriceLevelScheduleSerializer,
                                              CustomPriceLevelScheduleEntrySerializer,

                                              CustomTransactionLimitsSerializer,

                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.StartCharging(Request)

                                          : new OCPPv2_1.CS.RequestStartTransactionResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.RequestStartTransactionResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomRequestStartTransactionResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnRequestStartTransactionResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnRequestStartTransactionResponse?.Invoke(endTime,
                                                              this,
                                                              Request,
                                                              response,
                                                              endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnRequestStartTransactionResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region StopCharging                (Request)

            /// <summary>
            /// Set the charging profile of the given charging station connector.
            /// </summary>
            /// <param name="Request">A StopCharging request.</param>
            public async Task<OCPPv2_1.CS.RequestStopTransactionResponse>
                StopCharging(OCPPv2_1.CSMS.RequestStopTransactionRequest Request)

            {

                #region Send OnRequestStopTransactionRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnRequestStopTransactionRequest?.Invoke(startTime,
                                                            this,
                                                            Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnRequestStopTransactionRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomRequestStopTransactionRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.StopCharging(Request)

                                          : new OCPPv2_1.CS.RequestStopTransactionResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.RequestStopTransactionResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomRequestStopTransactionResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnRequestStopTransactionResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnRequestStopTransactionResponse?.Invoke(endTime,
                                                             this,
                                                             Request,
                                                             response,
                                                             endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnRequestStopTransactionResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetTransactionStatus        (Request)

            /// <summary>
            /// Set the charging profile of the given charging station connector.
            /// </summary>
            /// <param name="Request">A GetTransactionStatus request.</param>
            public async Task<OCPPv2_1.CS.GetTransactionStatusResponse>
                GetTransactionStatus(OCPPv2_1.CSMS.GetTransactionStatusRequest Request)

            {

                #region Send OnGetTransactionStatusRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetTransactionStatusRequest?.Invoke(startTime,
                                                          this,
                                                          Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetTransactionStatusRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetTransactionStatusRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetTransactionStatus(Request)

                                          : new OCPPv2_1.CS.GetTransactionStatusResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetTransactionStatusResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetTransactionStatusResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetTransactionStatusResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetTransactionStatusResponse?.Invoke(endTime,
                                                           this,
                                                           Request,
                                                           response,
                                                           endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetTransactionStatusResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SetChargingProfile          (Request)

            /// <summary>
            /// Set the charging profile of the given charging station connector.
            /// </summary>
            /// <param name="Request">A SetChargingProfile request.</param>
            public async Task<OCPPv2_1.CS.SetChargingProfileResponse>
                SetChargingProfile(OCPPv2_1.CSMS.SetChargingProfileRequest Request)

            {

                #region Send OnSetChargingProfileRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSetChargingProfileRequest?.Invoke(startTime,
                                                        this,
                                                        Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetChargingProfileRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSetChargingProfileRequestSerializer,
                                              CustomChargingProfileSerializer,
                                              CustomLimitBeyondSoCSerializer,
                                              CustomChargingScheduleSerializer,
                                              CustomChargingSchedulePeriodSerializer,
                                              CustomV2XFreqWattEntrySerializer,
                                              CustomV2XSignalWattEntrySerializer,
                                              CustomSalesTariffSerializer,
                                              CustomSalesTariffEntrySerializer,
                                              CustomRelativeTimeIntervalSerializer,
                                              CustomConsumptionCostSerializer,
                                              CustomCostSerializer,

                                              CustomAbsolutePriceScheduleSerializer,
                                              CustomPriceRuleStackSerializer,
                                              CustomPriceRuleSerializer,
                                              CustomTaxRuleSerializer,
                                              CustomOverstayRuleListSerializer,
                                              CustomOverstayRuleSerializer,
                                              CustomAdditionalServiceSerializer,

                                              CustomPriceLevelScheduleSerializer,
                                              CustomPriceLevelScheduleEntrySerializer,

                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SetChargingProfile(Request)

                                          : new OCPPv2_1.CS.SetChargingProfileResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SetChargingProfileResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSetChargingProfileResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSetChargingProfileResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSetChargingProfileResponse?.Invoke(endTime,
                                                         this,
                                                         Request,
                                                         response,
                                                         endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetChargingProfileResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetChargingProfiles         (Request)

            /// <summary>
            /// Set the charging profile of the given charging station connector.
            /// </summary>
            /// <param name="Request">A GetChargingProfiles request.</param>
            public async Task<OCPPv2_1.CS.GetChargingProfilesResponse>
                GetChargingProfiles(OCPPv2_1.CSMS.GetChargingProfilesRequest Request)

            {

                #region Send OnGetChargingProfilesRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetChargingProfilesRequest?.Invoke(startTime,
                                                         this,
                                                         Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetChargingProfilesRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetChargingProfilesRequestSerializer,
                                              CustomChargingProfileCriterionSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetChargingProfiles(Request)

                                          : new OCPPv2_1.CS.GetChargingProfilesResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetChargingProfilesResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetChargingProfilesResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetChargingProfilesResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetChargingProfilesResponse?.Invoke(endTime,
                                                          this,
                                                          Request,
                                                          response,
                                                          endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetChargingProfilesResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region ClearChargingProfile        (Request)

            /// <summary>
            /// Remove the charging profile at the given charging station connector.
            /// </summary>
            /// <param name="Request">A ClearChargingProfile request.</param>
            public async Task<OCPPv2_1.CS.ClearChargingProfileResponse>
                ClearChargingProfile(OCPPv2_1.CSMS.ClearChargingProfileRequest Request)

            {

                #region Send OnClearChargingProfileRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnClearChargingProfileRequest?.Invoke(startTime,
                                                          this,
                                                          Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearChargingProfileRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomClearChargingProfileRequestSerializer,
                                              CustomClearChargingProfileSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.ClearChargingProfile(Request)

                                          : new OCPPv2_1.CS.ClearChargingProfileResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.ClearChargingProfileResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomClearChargingProfileResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnClearChargingProfileResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnClearChargingProfileResponse?.Invoke(endTime,
                                                           this,
                                                           Request,
                                                           response,
                                                           endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearChargingProfileResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetCompositeSchedule        (Request)

            /// <summary>
            /// Return the charging schedule of the given charging station connector.
            /// </summary>
            /// <param name="Request">A GetCompositeSchedule request.</param>
            public async Task<OCPPv2_1.CS.GetCompositeScheduleResponse>
                GetCompositeSchedule(OCPPv2_1.CSMS.GetCompositeScheduleRequest Request)

            {

                #region Send OnGetCompositeScheduleRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetCompositeScheduleRequest?.Invoke(startTime,
                                                          this,
                                                          Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetCompositeScheduleRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetCompositeScheduleRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetCompositeSchedule(Request)

                                          : new OCPPv2_1.CS.GetCompositeScheduleResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetCompositeScheduleResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetCompositeScheduleResponseSerializer,
                        CustomCompositeScheduleSerializer,
                        CustomChargingSchedulePeriodSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetCompositeScheduleResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetCompositeScheduleResponse?.Invoke(endTime,
                                                           this,
                                                           Request,
                                                           response,
                                                           endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetCompositeScheduleResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region UpdateDynamicSchedule       (Request)

            /// <summary>
            /// Update the dynamic charging schedule for the given charging profile.
            /// </summary>
            /// <param name="Request">A UpdateDynamicSchedule request.</param>
            public async Task<OCPPv2_1.CS.UpdateDynamicScheduleResponse>
                UpdateDynamicSchedule(OCPPv2_1.CSMS.UpdateDynamicScheduleRequest Request)

            {

                #region Send OnUpdateDynamicScheduleRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnUpdateDynamicScheduleRequest?.Invoke(startTime,
                                                           this,
                                                           Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUpdateDynamicScheduleRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomUpdateDynamicScheduleRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.UpdateDynamicSchedule(Request)

                                          : new OCPPv2_1.CS.UpdateDynamicScheduleResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.UpdateDynamicScheduleResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomUpdateDynamicScheduleResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnUpdateDynamicScheduleResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnUpdateDynamicScheduleResponse?.Invoke(endTime,
                                                            this,
                                                            Request,
                                                            response,
                                                            endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUpdateDynamicScheduleResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region NotifyAllowedEnergyTransfer (Request)

            /// <summary>
            /// Unlock the given charging station connector.
            /// </summary>
            /// <param name="Request">A NotifyAllowedEnergyTransfer request.</param>
            public async Task<OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse>
                NotifyAllowedEnergyTransfer(OCPPv2_1.CSMS.NotifyAllowedEnergyTransferRequest Request)

            {

                #region Send OnNotifyAllowedEnergyTransferRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnNotifyAllowedEnergyTransferRequest?.Invoke(startTime,
                                                                 this,
                                                                 Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyAllowedEnergyTransferRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomNotifyAllowedEnergyTransferRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.NotifyAllowedEnergyTransfer(Request)

                                          : new OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.NotifyAllowedEnergyTransferResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomNotifyAllowedEnergyTransferResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnNotifyAllowedEnergyTransferResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnNotifyAllowedEnergyTransferResponse?.Invoke(endTime,
                                                                  this,
                                                                  Request,
                                                                  response,
                                                                  endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnNotifyAllowedEnergyTransferResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region UsePriorityCharging         (Request)

            /// <summary>
            /// Switch to the priority charging profile.
            /// </summary>
            /// <param name="Request">A UsePriorityCharging request.</param>
            public async Task<OCPPv2_1.CS.UsePriorityChargingResponse>
                UsePriorityCharging(OCPPv2_1.CSMS.UsePriorityChargingRequest Request)

            {

                #region Send OnUsePriorityChargingRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnUsePriorityChargingRequest?.Invoke(startTime,
                                                         this,
                                                         Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUsePriorityChargingRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomUsePriorityChargingRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.UsePriorityCharging(Request)

                                          : new OCPPv2_1.CS.UsePriorityChargingResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.UsePriorityChargingResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomUsePriorityChargingResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnUsePriorityChargingResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnUsePriorityChargingResponse?.Invoke(endTime,
                                                          this,
                                                          Request,
                                                          response,
                                                          endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUsePriorityChargingResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region UnlockConnector             (Request)

            /// <summary>
            /// Unlock the given charging station connector.
            /// </summary>
            /// <param name="Request">A UnlockConnector request.</param>
            public async Task<OCPPv2_1.CS.UnlockConnectorResponse>
                UnlockConnector(OCPPv2_1.CSMS.UnlockConnectorRequest Request)

            {

                #region Send OnUnlockConnectorRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnUnlockConnectorRequest?.Invoke(startTime,
                                                     this,
                                                     Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUnlockConnectorRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomUnlockConnectorRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.UnlockConnector(Request)

                                          : new OCPPv2_1.CS.UnlockConnectorResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.UnlockConnectorResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomUnlockConnectorResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnUnlockConnectorResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnUnlockConnectorResponse?.Invoke(endTime,
                                                      this,
                                                      Request,
                                                      response,
                                                      endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUnlockConnectorResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region SendAFRRSignal              (Request)

            /// <summary>
            /// Send an aFRR signal to the charging station.
            /// The charging station uses the value of signal to select a matching power value
            /// from the v2xSignalWattCurve in the charging schedule period.
            /// </summary>
            /// <param name="Request">A AFRRSignal request.</param>
            public async Task<OCPPv2_1.CS.AFRRSignalResponse>
                SendAFRRSignal(OCPPv2_1.CSMS.AFRRSignalRequest Request)

            {

                #region Send OnAFRRSignalRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnAFRRSignalRequest?.Invoke(startTime,
                                                this,
                                                Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnAFRRSignalRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomAFRRSignalRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SendAFRRSignal(Request)

                                          : new OCPPv2_1.CS.AFRRSignalResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.AFRRSignalResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomAFRRSignalResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnAFRRSignalResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnAFRRSignalResponse?.Invoke(endTime,
                                                 this,
                                                 Request,
                                                 response,
                                                 endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnAFRRSignalResponse));
                }

                #endregion

                return response;

            }

            #endregion


            #region SetDisplayMessage           (Request)

            /// <summary>
            /// Set a display message.
            /// </summary>
            /// <param name="Request">A SetDisplayMessage request.</param>
            public async Task<OCPPv2_1.CS.SetDisplayMessageResponse>
                SetDisplayMessage(OCPPv2_1.CSMS.SetDisplayMessageRequest Request)

            {

                #region Send OnSetDisplayMessageRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSetDisplayMessageRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetDisplayMessageRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSetDisplayMessageRequestSerializer,
                                              CustomMessageInfoSerializer,
                                              CustomMessageContentSerializer,
                                              CustomComponentSerializer,
                                              CustomEVSESerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SetDisplayMessage(Request)

                                          : new OCPPv2_1.CS.SetDisplayMessageResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SetDisplayMessageResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSetDisplayMessageResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSetDisplayMessageResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSetDisplayMessageResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetDisplayMessageResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetDisplayMessages          (Request)

            /// <summary>
            /// Get all display messages.
            /// </summary>
            /// <param name="Request">A GetDisplayMessages request.</param>
            public async Task<OCPPv2_1.CS.GetDisplayMessagesResponse>
                GetDisplayMessages(OCPPv2_1.CSMS.GetDisplayMessagesRequest Request)

            {

                #region Send OnGetDisplayMessagesRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetDisplayMessagesRequest?.Invoke(startTime,
                                                        this,
                                                        Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetDisplayMessagesRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetDisplayMessagesRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetDisplayMessages(Request)

                                          : new OCPPv2_1.CS.GetDisplayMessagesResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetDisplayMessagesResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetDisplayMessagesResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetDisplayMessagesResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetDisplayMessagesResponse?.Invoke(endTime,
                                                         this,
                                                         Request,
                                                         response,
                                                         endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetDisplayMessagesResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region ClearDisplayMessage         (Request)

            /// <summary>
            /// Remove a display message.
            /// </summary>
            /// <param name="Request">A ClearDisplayMessage request.</param>
            public async Task<OCPPv2_1.CS.ClearDisplayMessageResponse>
                ClearDisplayMessage(OCPPv2_1.CSMS.ClearDisplayMessageRequest Request)

            {

                #region Send OnClearDisplayMessageRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnClearDisplayMessageRequest?.Invoke(startTime,
                                                         this,
                                                         Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearDisplayMessageRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomClearDisplayMessageRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.ClearDisplayMessage(Request)

                                          : new OCPPv2_1.CS.ClearDisplayMessageResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.ClearDisplayMessageResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomClearDisplayMessageResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnClearDisplayMessageResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnClearDisplayMessageResponse?.Invoke(endTime,
                                                          this,
                                                          Request,
                                                          response,
                                                          endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnClearDisplayMessageResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendCostUpdated             (Request)

            /// <summary>
            /// Send updated total costs.
            /// </summary>
            /// <param name="Request">A CostUpdated request.</param>
            public async Task<OCPPv2_1.CS.CostUpdatedResponse>
                SendCostUpdated(OCPPv2_1.CSMS.CostUpdatedRequest Request)

            {

                #region Send OnCostUpdatedRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnCostUpdatedRequest?.Invoke(startTime,
                                                 this,
                                                 Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnCostUpdatedRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomCostUpdatedRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SendCostUpdated(Request)

                                          : new OCPPv2_1.CS.CostUpdatedResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.CostUpdatedResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomCostUpdatedResponseSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnCostUpdatedResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnCostUpdatedResponse?.Invoke(endTime,
                                                  this,
                                                  Request,
                                                  response,
                                                  endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnCostUpdatedResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region RequestCustomerInformation  (Request)

            /// <summary>
            /// Request customer information.
            /// </summary>
            /// <param name="Request">A CostUpdated request.</param>
            public async Task<OCPPv2_1.CS.CustomerInformationResponse>
                RequestCustomerInformation(OCPPv2_1.CSMS.CustomerInformationRequest Request)

            {

                #region Send OnCustomerInformationRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnCustomerInformationRequest?.Invoke(startTime,
                                                         this,
                                                         Request);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnCustomerInformationRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomCustomerInformationRequestSerializer,
                                              CustomIdTokenSerializer,
                                              CustomAdditionalInfoSerializer,
                                              CustomCertificateHashDataSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.RequestCustomerInformation(Request)

                                          : new OCPPv2_1.CS.CustomerInformationResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.CustomerInformationResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomCustomerInformationResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnCustomerInformationResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnCustomerInformationResponse?.Invoke(endTime,
                                                          this,
                                                          Request,
                                                          response,
                                                          endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnCustomerInformationResponse));
                }

                #endregion

                return response;

            }

            #endregion


            // Binary Data Streams Extensions

            #region TransferBinaryData          (Request)

            /// <summary>
            /// Transfer the given data to the given charging station.
            /// </summary>
            /// <param name="Request">A BinaryDataTransfer request.</param>
            public async Task<OCPPv2_1.CS.BinaryDataTransferResponse>
                TransferBinaryData(OCPPv2_1.CSMS.BinaryDataTransferRequest Request)

            {

                #region Send OnBinaryDataTransferRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnBinaryDataTransferRequest?.Invoke(startTime,
                                                        this,
                                                        Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnBinaryDataTransferRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToBinary(
                                              CustomBinaryDataTransferRequestSerializer,
                                              CustomBinarySignatureSerializer,
                                              IncludeSignatures: false
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.TransferBinaryData(Request)

                                          : new OCPPv2_1.CS.BinaryDataTransferResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.BinaryDataTransferResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToBinary(
                        CustomBinaryDataTransferResponseSerializer,
                        null, // CustomStatusInfoSerializer
                        CustomBinarySignatureSerializer,
                        IncludeSignatures: false
                    ),
                    out errorResponse
                );


                #region Send OnBinaryDataTransferResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnBinaryDataTransferResponse?.Invoke(endTime,
                                                   this,
                                                   Request,
                                                   response,
                                                   endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnBinaryDataTransferResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetFile                     (Request)

            /// <summary>
            /// Request the given file from the charging station.
            /// </summary>
            /// <param name="Request">A GetFile request.</param>
            public async Task<OCPPv2_1.CS.GetFileResponse>
                GetFile(OCPPv2_1.CSMS.GetFileRequest Request)

            {

                #region Send OnGetFileRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetFileRequest?.Invoke(startTime,
                                             this,
                                             Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetFileRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetFileRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetFile(Request)

                                          : new OCPPv2_1.CS.GetFileResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetFileResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToBinary(
                        CustomGetFileResponseSerializer,
                        null, // CustomStatusInfoSerializer
                        CustomBinarySignatureSerializer,
                        IncludeSignatures: false
                    ),
                    out errorResponse
                );


                #region Send OnGetFileResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetFileResponse?.Invoke(endTime,
                                              this,
                                              Request,
                                              response,
                                              endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetFileResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region SendFile                    (Request)

            /// <summary>
            /// Request the given file from the charging station.
            /// </summary>
            /// <param name="Request">A SendFile request.</param>
            public async Task<OCPPv2_1.CS.SendFileResponse>
                SendFile(OCPPv2_1.CSMS.SendFileRequest Request)

            {

                #region Send OnSendFileRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSendFileRequest?.Invoke(startTime,
                                              this,
                                              Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSendFileRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToBinary(
                                              CustomSendFileRequestSerializer,
                                              CustomBinarySignatureSerializer,
                                              IncludeSignatures: false
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SendFile(Request)

                                          : new OCPPv2_1.CS.SendFileResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SendFileResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSendFileResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSendFileResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSendFileResponse?.Invoke(endTime,
                                               this,
                                               Request,
                                               response,
                                               endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSendFileResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region DeleteFile                  (Request)

            /// <summary>
            /// Delete the given file from the charging station.
            /// </summary>
            /// <param name="Request">A DeleteFile request.</param>
            public async Task<OCPPv2_1.CS.DeleteFileResponse>
                DeleteFile(OCPPv2_1.CSMS.DeleteFileRequest Request)

            {

                #region Send OnDeleteFileRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnDeleteFileRequest?.Invoke(startTime,
                                                this,
                                                Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDeleteFileRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomDeleteFileRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.DeleteFile(Request)

                                          : new OCPPv2_1.CS.DeleteFileResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.DeleteFileResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomDeleteFileResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomSignatureSerializer
                    ),
                    out errorResponse
                );


                #region Send OnDeleteFileResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnDeleteFileResponse?.Invoke(endTime,
                                                 this,
                                                 Request,
                                                 response,
                                                 endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDeleteFileResponse));
                }

                #endregion

                return response;

            }

            #endregion


            // E2E Security Extensions

            #region AddSignaturePolicy          (Request)

            /// <summary>
            /// Add a signature policy.
            /// </summary>
            /// <param name="Request">An AddSignaturePolicy request.</param>
            public async Task<OCPPv2_1.CS.AddSignaturePolicyResponse>
                AddSignaturePolicy(OCPPv2_1.CSMS.AddSignaturePolicyRequest Request)

            {

                #region Send OnAddSignaturePolicyRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnAddSignaturePolicyRequest?.Invoke(startTime,
                                                        this,
                                                        Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnAddSignaturePolicyRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              //CustomAddSignaturePolicyRequestSerializer,
                                              //CustomMessageInfoSerializer,
                                              //CustomMessageContentSerializer,
                                              //CustomComponentSerializer,
                                              //CustomEVSESerializer,
                                              //CustomSignatureSerializer,
                                              //CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.AddSignaturePolicy(Request)

                                          : new OCPPv2_1.CS.AddSignaturePolicyResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.AddSignaturePolicyResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        //CustomAddSignaturePolicyResponseSerializer,
                        //CustomStatusInfoSerializer,
                        //CustomSignatureSerializer,
                        //CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnAddSignaturePolicyResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnAddSignaturePolicyResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnAddSignaturePolicyResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region UpdateSignaturePolicy       (Request)

            /// <summary>
            /// Set a display message.
            /// </summary>
            /// <param name="Request">A UpdateSignaturePolicy request.</param>
            public async Task<OCPPv2_1.CS.UpdateSignaturePolicyResponse>
                UpdateSignaturePolicy(OCPPv2_1.CSMS.UpdateSignaturePolicyRequest Request)

            {

                #region Send OnUpdateSignaturePolicyRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnUpdateSignaturePolicyRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUpdateSignaturePolicyRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              //CustomUpdateSignaturePolicyRequestSerializer,
                                              //CustomMessageInfoSerializer,
                                              //CustomMessageContentSerializer,
                                              //CustomComponentSerializer,
                                              //CustomEVSESerializer,
                                              //CustomSignatureSerializer,
                                              //CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.UpdateSignaturePolicy(Request)

                                          : new OCPPv2_1.CS.UpdateSignaturePolicyResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.UpdateSignaturePolicyResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        //CustomUpdateSignaturePolicyResponseSerializer,
                        //CustomStatusInfoSerializer,
                        //CustomSignatureSerializer,
                        //CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnUpdateSignaturePolicyResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnUpdateSignaturePolicyResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUpdateSignaturePolicyResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region DeleteSignaturePolicy       (Request)

            /// <summary>
            /// Set a display message.
            /// </summary>
            /// <param name="Request">A DeleteSignaturePolicy request.</param>
            public async Task<OCPPv2_1.CS.DeleteSignaturePolicyResponse>
                DeleteSignaturePolicy(OCPPv2_1.CSMS.DeleteSignaturePolicyRequest Request)

            {

                #region Send OnDeleteSignaturePolicyRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnDeleteSignaturePolicyRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDeleteSignaturePolicyRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              //CustomDeleteSignaturePolicyRequestSerializer,
                                              //CustomMessageInfoSerializer,
                                              //CustomMessageContentSerializer,
                                              //CustomComponentSerializer,
                                              //CustomEVSESerializer,
                                              //CustomSignatureSerializer,
                                              //CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.DeleteSignaturePolicy(Request)

                                          : new OCPPv2_1.CS.DeleteSignaturePolicyResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.DeleteSignaturePolicyResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        //CustomDeleteSignaturePolicyResponseSerializer,
                        //CustomStatusInfoSerializer,
                        //CustomSignatureSerializer,
                        //CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnDeleteSignaturePolicyResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnDeleteSignaturePolicyResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDeleteSignaturePolicyResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region AddUserRole                 (Request)

            /// <summary>
            /// Set a display message.
            /// </summary>
            /// <param name="Request">A AddUserRole request.</param>
            public async Task<OCPPv2_1.CS.AddUserRoleResponse>
                AddUserRole(OCPPv2_1.CSMS.AddUserRoleRequest Request)

            {

                #region Send OnAddUserRoleRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnAddUserRoleRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnAddUserRoleRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              //CustomAddUserRoleRequestSerializer,
                                              //CustomMessageInfoSerializer,
                                              //CustomMessageContentSerializer,
                                              //CustomComponentSerializer,
                                              //CustomEVSESerializer,
                                              //CustomSignatureSerializer,
                                              //CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.AddUserRole(Request)

                                          : new OCPPv2_1.CS.AddUserRoleResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.AddUserRoleResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        //CustomAddUserRoleResponseSerializer,
                        //CustomStatusInfoSerializer,
                        //CustomSignatureSerializer,
                        //CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnAddUserRoleResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnAddUserRoleResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnAddUserRoleResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region UpdateUserRole              (Request)

            /// <summary>
            /// Set a display message.
            /// </summary>
            /// <param name="Request">A UpdateUserRole request.</param>
            public async Task<OCPPv2_1.CS.UpdateUserRoleResponse>
                UpdateUserRole(OCPPv2_1.CSMS.UpdateUserRoleRequest Request)

            {

                #region Send OnUpdateUserRoleRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnUpdateUserRoleRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUpdateUserRoleRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              //CustomUpdateUserRoleRequestSerializer,
                                              //CustomMessageInfoSerializer,
                                              //CustomMessageContentSerializer,
                                              //CustomComponentSerializer,
                                              //CustomEVSESerializer,
                                              //CustomSignatureSerializer,
                                              //CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.UpdateUserRole(Request)

                                          : new OCPPv2_1.CS.UpdateUserRoleResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.UpdateUserRoleResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        //CustomUpdateUserRoleResponseSerializer,
                        //CustomStatusInfoSerializer,
                        //CustomSignatureSerializer,
                        //CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnUpdateUserRoleResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnUpdateUserRoleResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnUpdateUserRoleResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region DeleteUserRole              (Request)

            /// <summary>
            /// Set a display message.
            /// </summary>
            /// <param name="Request">A DeleteUserRole request.</param>
            public async Task<OCPPv2_1.CS.DeleteUserRoleResponse>
                DeleteUserRole(OCPPv2_1.CSMS.DeleteUserRoleRequest Request)

            {

                #region Send OnDeleteUserRoleRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnDeleteUserRoleRequest?.Invoke(startTime,
                                                       this,
                                                       Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDeleteUserRoleRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              //CustomDeleteUserRoleRequestSerializer,
                                              //CustomMessageInfoSerializer,
                                              //CustomMessageContentSerializer,
                                              //CustomComponentSerializer,
                                              //CustomEVSESerializer,
                                              //CustomSignatureSerializer,
                                              //CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.DeleteUserRole(Request)

                                          : new OCPPv2_1.CS.DeleteUserRoleResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.DeleteUserRoleResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        //CustomDeleteUserRoleResponseSerializer,
                        //CustomStatusInfoSerializer,
                        //CustomSignatureSerializer,
                        //CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnDeleteUserRoleResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnDeleteUserRoleResponse?.Invoke(endTime,
                                                        this,
                                                        Request,
                                                        response,
                                                        endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnDeleteUserRoleResponse));
                }

                #endregion

                return response;

            }

            #endregion


            // E2E Charging Tariffs Extensions

            #region SetDefaultChargingTariff    (Request)

            /// <summary>
            /// Set a default charging tariff for the charging station,
            /// or for a subset of EVSEs of the charging station.
            /// </summary>
            /// <param name="Request">An SetDefaultChargingTariff request.</param>
            public async Task<OCPPv2_1.CS.SetDefaultChargingTariffResponse>
                SetDefaultChargingTariff(OCPPv2_1.CSMS.SetDefaultChargingTariffRequest Request)

            {

                #region Send OnSetDefaultChargingTariffRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnSetDefaultChargingTariffRequest?.Invoke(startTime,
                                                              this,
                                                              Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetDefaultChargingTariffRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomSetDefaultChargingTariffRequestSerializer,
                                              CustomChargingTariffSerializer,
                                              CustomPriceSerializer,
                                              CustomTariffElementSerializer,
                                              CustomPriceComponentSerializer,
                                              CustomTaxRateSerializer,
                                              CustomTariffRestrictionsSerializer,
                                              CustomEnergyMixSerializer,
                                              CustomEnergySourceSerializer,
                                              CustomEnvironmentalImpactSerializer,
                                              CustomIdTokenSerializer,
                                              CustomAdditionalInfoSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.SetDefaultChargingTariff(Request)

                                          : new OCPPv2_1.CS.SetDefaultChargingTariffResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.SetDefaultChargingTariffResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomSetDefaultChargingTariffResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomEVSEStatusInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnSetDefaultChargingTariffResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnSetDefaultChargingTariffResponse?.Invoke(endTime,
                                                               this,
                                                               Request,
                                                               response,
                                                               endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnSetDefaultChargingTariffResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region GetDefaultChargingTariff    (Request)

            /// <summary>
            /// Get the default charging tariff(s) for the charging station and its EVSEs.
            /// </summary>
            /// <param name="Request">An GetDefaultChargingTariff request.</param>
            public async Task<OCPPv2_1.CS.GetDefaultChargingTariffResponse>
                GetDefaultChargingTariff(OCPPv2_1.CSMS.GetDefaultChargingTariffRequest Request)

            {

                #region Send OnGetDefaultChargingTariffRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnGetDefaultChargingTariffRequest?.Invoke(startTime,
                                                              this,
                                                              Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetDefaultChargingTariffRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomGetDefaultChargingTariffRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.GetDefaultChargingTariff(Request)

                                          : new OCPPv2_1.CS.GetDefaultChargingTariffResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.GetDefaultChargingTariffResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomGetDefaultChargingTariffResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomChargingTariffSerializer,
                        CustomPriceSerializer,
                        CustomTariffElementSerializer,
                        CustomPriceComponentSerializer,
                        CustomTaxRateSerializer,
                        CustomTariffRestrictionsSerializer,
                        CustomEnergyMixSerializer,
                        CustomEnergySourceSerializer,
                        CustomEnvironmentalImpactSerializer,
                        CustomIdTokenSerializer,
                        CustomAdditionalInfoSerializer,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnGetDefaultChargingTariffResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnGetDefaultChargingTariffResponse?.Invoke(endTime,
                                                               this,
                                                               Request,
                                                               response,
                                                               endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnGetDefaultChargingTariffResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #region RemoveDefaultChargingTariff (Request)

            /// <summary>
            /// Remove the default charging tariff of the charging station,
            /// or of a subset of EVSEs of the charging station.
            /// </summary>
            /// <param name="Request">An RemoveDefaultChargingTariff request.</param>
            public async Task<OCPPv2_1.CS.RemoveDefaultChargingTariffResponse>
                RemoveDefaultChargingTariff(OCPPv2_1.CSMS.RemoveDefaultChargingTariffRequest Request)

            {

                #region Send OnRemoveDefaultChargingTariffRequest event

                var startTime = Timestamp.Now;

                try
                {

                    OnRemoveDefaultChargingTariffRequest?.Invoke(startTime,
                                                                 this,
                                                                 Request);
                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnRemoveDefaultChargingTariffRequest));
                }

                #endregion


                var response  = reachableChargingStations.TryGetValue(Request.NetworkPath.Sender, out var centralSystem) &&
                                    centralSystem is not null

                                    ? SignaturePolicy.SignRequestMessage(
                                          Request,
                                          Request.ToJSON(
                                              CustomRemoveDefaultChargingTariffRequestSerializer,
                                              CustomSignatureSerializer,
                                              CustomCustomDataSerializer
                                          ),
                                          out var errorResponse
                                      )

                                          ? await centralSystem.Item1.RemoveDefaultChargingTariff(Request)

                                          : new OCPPv2_1.CS.RemoveDefaultChargingTariffResponse(
                                                Request,
                                                Result.SignatureError(errorResponse)
                                            )

                                    : new OCPPv2_1.CS.RemoveDefaultChargingTariffResponse(
                                          Request,
                                          Result.Server("Unknown or unreachable charging station!")
                                      );


                SignaturePolicy.VerifyResponseMessage(
                    response,
                    response.ToJSON(
                        CustomRemoveDefaultChargingTariffResponseSerializer,
                        CustomStatusInfoSerializer,
                        CustomEVSEStatusInfoSerializer2,
                        CustomSignatureSerializer,
                        CustomCustomDataSerializer
                    ),
                    out errorResponse
                );


                #region Send OnRemoveDefaultChargingTariffResponse event

                var endTime = Timestamp.Now;

                try
                {

                    OnRemoveDefaultChargingTariffResponse?.Invoke(endTime,
                                                                  this,
                                                                  Request,
                                                                  response,
                                                                  endTime - startTime);

                }
                catch (Exception e)
                {
                    DebugX.Log(e, nameof(TestNetworkingNode) + "." + nameof(OnRemoveDefaultChargingTariffResponse));
                }

                #endregion

                return response;

            }

            #endregion

            #endregion


            #region AddOrUpdateHTTPBasicAuth(NetworkingNodeId, Password)

            /// <summary>
            /// Add the given HTTP Basic Authentication password for the given networking node.
            /// </summary>
            /// <param name="NetworkingNodeId">The unique identification of the networking node.</param>
            /// <param name="Password">The password of the networking node.</param>
            public void AddOrUpdateHTTPBasicAuth(NetworkingNode_Id  NetworkingNodeId,
                                                 String             Password)
            {

                foreach (var centralSystemServer in centralSystemServers)
                {
                    if (centralSystemServer is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                    {
                        centralSystemWSServer.AddOrUpdateHTTPBasicAuth(NetworkingNodeId, Password);
                    }
                }

            }

            #endregion

            #region RemoveHTTPBasicAuth(NetworkingNodeId)

            /// <summary>
            /// Remove the given HTTP Basic Authentication for the given networking node.
            /// </summary>
            /// <param name="NetworkingNodeId">The unique identification of the networking node.</param>
            public void RemoveHTTPBasicAuth(NetworkingNode_Id NetworkingNodeId)
            {

                foreach (var centralSystemServer in centralSystemServers)
                {
                    if (centralSystemServer is CSMS.NetworkingNodeWSServer centralSystemWSServer)
                    {
                        centralSystemWSServer.RemoveHTTPBasicAuth(NetworkingNodeId);
                    }
                }

            }

            #endregion

            #region ChargeBoxes

            #region Data

            /// <summary>
            /// An enumeration of all charging stationes.
            /// </summary>
            protected internal readonly ConcurrentDictionary<ChargingStation_Id, ChargeBox> chargeBoxes = new();

            /// <summary>
            /// An enumeration of all charging stationes.
            /// </summary>
            public IEnumerable<ChargeBox> ChargeBoxes
                => chargeBoxes.Values;

            #endregion


            #region (protected internal) WriteToDatabaseFileAndNotify(ChargeBox,                      MessageType,    OldChargeBox = null, ...)

            ///// <summary>
            ///// Write the given chargeBox to the database and send out notifications.
            ///// </summary>
            ///// <param name="ChargeBox">The charging station.</param>
            ///// <param name="MessageType">The chargeBox notification.</param>
            ///// <param name="OldChargeBox">The old/updated charging station.</param>
            ///// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            ///// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
            //protected internal async Task WriteToDatabaseFileAndNotify(ChargeBox             ChargeBox,
            //                                                           NotificationMessageType  MessageType,
            //                                                           ChargeBox             OldChargeBox   = null,
            //                                                           EventTracking_Id         EventTrackingId   = null,
            //                                                           User_Id?                 CurrentUserId     = null)
            //{

            //    if (ChargeBox is null)
            //        throw new ArgumentNullException(nameof(ChargeBox),  "The given chargeBox must not be null or empty!");

            //    if (MessageType.IsNullOrEmpty)
            //        throw new ArgumentNullException(nameof(MessageType),   "The given message type must not be null or empty!");


            //    var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            //    await WriteToDatabaseFile(MessageType,
            //                              ChargeBox.ToJSON(false, true),
            //                              eventTrackingId,
            //                              CurrentUserId);

            //    await SendNotifications(ChargeBox,
            //                            MessageType,
            //                            OldChargeBox,
            //                            eventTrackingId,
            //                            CurrentUserId);

            //}

            #endregion

            #region (protected internal) SendNotifications           (ChargeBox,                      MessageType(s), OldChargeBox = null, ...)

            //protected virtual String ChargeBoxHTMLInfo(ChargeBox ChargeBox)

            //    => String.Concat(ChargeBox.Name.IsNeitherNullNorEmpty()
            //                         ? String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/chargeBoxs/", ChargeBox.Id, "\">", ChargeBox.Name.FirstText(), "</a> ",
            //                                        "(<a href=\"https://", ExternalDNSName, BasePath, "/chargeBoxs/", ChargeBox.Id, "\">", ChargeBox.Id, "</a>)")
            //                         : String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/chargeBoxs/", ChargeBox.Id, "\">", ChargeBox.Id, "</a>"));

            //protected virtual String ChargeBoxTextInfo(ChargeBox ChargeBox)

            //    => String.Concat(ChargeBox.Name.IsNeitherNullNorEmpty()
            //                         ? String.Concat("'", ChargeBox.Name.FirstText(), "' (", ChargeBox.Id, ")")
            //                         : String.Concat("'", ChargeBox.Id.ToString(), "'"));


            ///// <summary>
            ///// Send chargeBox notifications.
            ///// </summary>
            ///// <param name="ChargeBox">The charging station.</param>
            ///// <param name="MessageType">The chargeBox notification.</param>
            ///// <param name="OldChargeBox">The old/updated charging station.</param>
            ///// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            ///// <param name="CurrentUserId">The invoking chargeBox identification</param>
            //protected internal virtual Task SendNotifications(ChargeBox             ChargeBox,
            //                                                  NotificationMessageType  MessageType,
            //                                                  ChargeBox             OldChargeBox   = null,
            //                                                  EventTracking_Id         EventTrackingId   = null,
            //                                                  User_Id?                 CurrentUserId     = null)

            //    => SendNotifications(ChargeBox,
            //                         new NotificationMessageType[] { MessageType },
            //                         OldChargeBox,
            //                         EventTrackingId,
            //                         CurrentUserId);


            ///// <summary>
            ///// Send chargeBox notifications.
            ///// </summary>
            ///// <param name="ChargeBox">The charging station.</param>
            ///// <param name="MessageTypes">The chargeBox notifications.</param>
            ///// <param name="OldChargeBox">The old/updated charging station.</param>
            ///// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            ///// <param name="CurrentUserId">The invoking chargeBox identification</param>
            //protected internal async virtual Task SendNotifications(ChargeBox                          ChargeBox,
            //                                                        IEnumerable<NotificationMessageType>  MessageTypes,
            //                                                        ChargeBox                          OldChargeBox   = null,
            //                                                        EventTracking_Id                      EventTrackingId   = null,
            //                                                        User_Id?                              CurrentUserId     = null)
            //{

            //    if (ChargeBox is null)
            //        throw new ArgumentNullException(nameof(ChargeBox),  "The given chargeBox must not be null or empty!");

            //    var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            //    if (messageTypesHash.IsNullOrEmpty())
            //        throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            //    if (messageTypesHash.Contains(addChargeBoxIfNotExists_MessageType))
            //        messageTypesHash.Add(addChargeBox_MessageType);

            //    if (messageTypesHash.Contains(addOrUpdateChargeBox_MessageType))
            //        messageTypesHash.Add(OldChargeBox == null
            //                               ? addChargeBox_MessageType
            //                               : updateChargeBox_MessageType);

            //    var messageTypes = messageTypesHash.ToArray();


            //    ComparizionResult? comparizionResult = null;

            //    if (messageTypes.Contains(updateChargeBox_MessageType))
            //        comparizionResult = ChargeBox.CompareWith(OldChargeBox);


            //    if (!DisableNotifications)
            //    {

            //        #region Telegram Notifications

            //        if (TelegramClient != null)
            //        {
            //            try
            //            {

            //                var AllTelegramNotifications  = ChargeBox.GetNotificationsOf<TelegramNotification>(messageTypes).
            //                                                     ToSafeHashSet();

            //                if (AllTelegramNotifications.SafeAny())
            //                {

            //                    if (messageTypes.Contains(addChargeBox_MessageType))
            //                        await TelegramClient.SendTelegrams(ChargeBoxHTMLInfo(ChargeBox) + " was successfully created.",
            //                                                           AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
            //                                                           Telegram.Bot.Types.Enums.ParseMode.Html);

            //                    if (messageTypes.Contains(updateChargeBox_MessageType))
            //                        await TelegramClient.SendTelegrams(ChargeBoxHTMLInfo(ChargeBox) + " information had been successfully updated.\n" + comparizionResult?.ToTelegram(),
            //                                                           AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
            //                                                           Telegram.Bot.Types.Enums.ParseMode.Html);

            //                }

            //            }
            //            catch (Exception e)
            //            {
            //                DebugX.LogException(e);
            //            }
            //        }

            //        #endregion

            //        #region SMS Notifications

            //        try
            //        {

            //            var AllSMSNotifications  = ChargeBox.GetNotificationsOf<SMSNotification>(messageTypes).
            //                                                    ToSafeHashSet();

            //            if (AllSMSNotifications.SafeAny())
            //            {

            //                if (messageTypes.Contains(addChargeBox_MessageType))
            //                    SendSMS(String.Concat("ChargeBox '", ChargeBox.Name.FirstText(), "' was successfully created. ",
            //                                          "https://", ExternalDNSName, BasePath, "/chargeBoxs/", ChargeBox.Id),
            //                            AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
            //                            SMSSenderName);

            //                if (messageTypes.Contains(updateChargeBox_MessageType))
            //                    SendSMS(String.Concat("ChargeBox '", ChargeBox.Name.FirstText(), "' information had been successfully updated. ",
            //                                          "https://", ExternalDNSName, BasePath, "/chargeBoxs/", ChargeBox.Id),
            //                                          // + {Updated information}
            //                            AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
            //                            SMSSenderName);

            //            }

            //        }
            //        catch (Exception e)
            //        {
            //            DebugX.LogException(e);
            //        }

            //        #endregion

            //        #region HTTPS Notifications

            //        try
            //        {

            //            var AllHTTPSNotifications  = ChargeBox.GetNotificationsOf<HTTPSNotification>(messageTypes).
            //                                                      ToSafeHashSet();

            //            if (AllHTTPSNotifications.SafeAny())
            //            {

            //                if (messageTypes.Contains(addChargeBox_MessageType))
            //                    await SendHTTPSNotifications(AllHTTPSNotifications,
            //                                                 new JObject(
            //                                                     new JProperty("chargeBoxCreated",
            //                                                         ChargeBox.ToJSON()
            //                                                     ),
            //                                                     new JProperty("timestamp", Timestamp.Now.ToIso8601())
            //                                                 ));

            //                if (messageTypes.Contains(updateChargeBox_MessageType))
            //                    await SendHTTPSNotifications(AllHTTPSNotifications,
            //                                                 new JObject(
            //                                                     new JProperty("chargeBoxUpdated",
            //                                                         ChargeBox.ToJSON()
            //                                                     ),
            //                                                     new JProperty("timestamp", Timestamp.Now.ToIso8601())
            //                                                 ));

            //            }

            //        }
            //        catch (Exception e)
            //        {
            //            DebugX.LogException(e);
            //        }

            //        #endregion

            //        #region EMailNotifications

            //        if (SMTPClient != null)
            //        {
            //            try
            //            {

            //                var AllEMailNotifications  = ChargeBox.GetNotificationsOf<EMailNotification>(messageTypes).
            //                                                          ToSafeHashSet();

            //                if (AllEMailNotifications.SafeAny())
            //                {

            //                    if (messageTypes.Contains(addChargeBox_MessageType))
            //                        await SMTPClient.Send(
            //                                 new HTMLEMailBuilder() {

            //                                     From           = Robot.EMail,
            //                                     To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
            //                                     Passphrase     = APIPassphrase,
            //                                     Subject        = ChargeBoxTextInfo(ChargeBox) + " was successfully created",

            //                                     HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
            //                                                                    ChargeBoxHTMLInfo(ChargeBox) + " was successfully created.",
            //                                                                    HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

            //                                     PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
            //                                                                    ChargeBoxTextInfo(ChargeBox) + " was successfully created.\r\n",
            //                                                                    "https://", ExternalDNSName, BasePath, "/chargeBoxs/", ChargeBox.Id, "\r\r\r\r",
            //                                                                    TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

            //                                     SecurityLevel  = EMailSecurity.autosign

            //                                 });

            //                    if (messageTypes.Contains(updateChargeBox_MessageType))
            //                        await SMTPClient.Send(
            //                                 new HTMLEMailBuilder() {

            //                                     From           = Robot.EMail,
            //                                     To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
            //                                     Passphrase     = APIPassphrase,
            //                                     Subject        = ChargeBoxTextInfo(ChargeBox) + " information had been successfully updated",

            //                                     HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
            //                                                                    ChargeBoxHTMLInfo(ChargeBox) + " information had been successfully updated.<br /><br />",
            //                                                                    comparizionResult?.ToHTML() ?? "",
            //                                                                    HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

            //                                     PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
            //                                                                    ChargeBoxTextInfo(ChargeBox) + " information had been successfully updated.\r\r\r\r",
            //                                                                    comparizionResult?.ToText() ?? "",
            //                                                                    "\r\r\r\r",
            //                                                                    "https://", ExternalDNSName, BasePath, "/chargeBoxs/", ChargeBox.Id, "\r\r\r\r",
            //                                                                    TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

            //                                     SecurityLevel  = EMailSecurity.autosign

            //                                 });

            //                }

            //            }
            //            catch (Exception e)
            //            {
            //                DebugX.LogException(e);
            //            }
            //        }

            //        #endregion

            //    }

            //}

            #endregion

            #region (protected internal) SendNotifications           (ChargeBox, ParentChargeBoxes, MessageType(s), ...)

            ///// <summary>
            ///// Send chargeBox notifications.
            ///// </summary>
            ///// <param name="ChargeBox">The charging station.</param>
            ///// <param name="ParentChargeBoxes">The enumeration of parent charging stationes.</param>
            ///// <param name="MessageType">The chargeBox notification.</param>
            ///// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            ///// <param name="CurrentUserId">The invoking chargeBox identification</param>
            //protected internal virtual Task SendNotifications(ChargeBox               ChargeBox,
            //                                                  IEnumerable<ChargeBox>  ParentChargeBoxes,
            //                                                  NotificationMessageType    MessageType,
            //                                                  EventTracking_Id           EventTrackingId   = null,
            //                                                  User_Id?                   CurrentUserId     = null)

            //    => SendNotifications(ChargeBox,
            //                         ParentChargeBoxes,
            //                         new NotificationMessageType[] { MessageType },
            //                         EventTrackingId,
            //                         CurrentUserId);


            ///// <summary>
            ///// Send chargeBox notifications.
            ///// </summary>
            ///// <param name="ChargeBox">The charging station.</param>
            ///// <param name="ParentChargeBoxes">The enumeration of parent charging stationes.</param>
            ///// <param name="MessageTypes">The user notifications.</param>
            ///// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            ///// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
            //protected internal async virtual Task SendNotifications(ChargeBox                          ChargeBox,
            //                                                        IEnumerable<ChargeBox>             ParentChargeBoxes,
            //                                                        IEnumerable<NotificationMessageType>  MessageTypes,
            //                                                        EventTracking_Id                      EventTrackingId   = null,
            //                                                        User_Id?                              CurrentUserId     = null)
            //{

            //    if (ChargeBox is null)
            //        throw new ArgumentNullException(nameof(ChargeBox),         "The given chargeBox must not be null or empty!");

            //    if (ParentChargeBoxes is null)
            //        ParentChargeBoxes = new ChargeBox[0];

            //    var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            //    if (messageTypesHash.IsNullOrEmpty())
            //        throw new ArgumentNullException(nameof(MessageTypes),         "The given enumeration of message types must not be null or empty!");

            //    //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    //    messageTypesHash.Add(addUser_MessageType);

            //    //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    //    messageTypesHash.Add(OldChargeBox == null
            //    //                           ? addUser_MessageType
            //    //                           : updateUser_MessageType);

            //    var messageTypes = messageTypesHash.ToArray();


            //    if (!DisableNotifications)
            //    {

            //        #region Telegram Notifications

            //        if (TelegramClient != null)
            //        {
            //            try
            //            {

            //                var AllTelegramNotifications  = ParentChargeBoxes.
            //                                                    SelectMany(parent => parent.User2ChargeBoxEdges).
            //                                                    SelectMany(edge   => edge.Source.GetNotificationsOf<TelegramNotification>(deleteChargeBox_MessageType)).
            //                                                    ToSafeHashSet();

            //                if (AllTelegramNotifications.SafeAny())
            //                {

            //                    if (messageTypes.Contains(deleteChargeBox_MessageType))
            //                        await TelegramClient.SendTelegrams(ChargeBoxHTMLInfo(ChargeBox) + " has been deleted.",
            //                                                           AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
            //                                                           Telegram.Bot.Types.Enums.ParseMode.Html);

            //                }

            //            }
            //            catch (Exception e)
            //            {
            //                DebugX.LogException(e);
            //            }
            //        }

            //        #endregion

            //        #region SMS Notifications

            //        try
            //        {

            //            var AllSMSNotifications = ParentChargeBoxes.
            //                                          SelectMany(parent => parent.User2ChargeBoxEdges).
            //                                          SelectMany(edge   => edge.Source.GetNotificationsOf<SMSNotification>(deleteChargeBox_MessageType)).
            //                                          ToSafeHashSet();

            //            if (AllSMSNotifications.SafeAny())
            //            {

            //                if (messageTypes.Contains(deleteChargeBox_MessageType))
            //                    SendSMS(String.Concat("ChargeBox '", ChargeBox.Name.FirstText(), "' has been deleted."),
            //                            AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
            //                            SMSSenderName);

            //            }

            //        }
            //        catch (Exception e)
            //        {
            //            DebugX.LogException(e);
            //        }

            //        #endregion

            //        #region HTTPS Notifications

            //        try
            //        {

            //            var AllHTTPSNotifications = ParentChargeBoxes.
            //                                            SelectMany(parent => parent.User2ChargeBoxEdges).
            //                                            SelectMany(edge   => edge.Source.GetNotificationsOf<HTTPSNotification>(deleteChargeBox_MessageType)).
            //                                            ToSafeHashSet();

            //            if (AllHTTPSNotifications.SafeAny())
            //            {

            //                if (messageTypes.Contains(deleteChargeBox_MessageType))
            //                    await SendHTTPSNotifications(AllHTTPSNotifications,
            //                                                 new JObject(
            //                                                     new JProperty("chargeBoxDeleted",
            //                                                         ChargeBox.ToJSON()
            //                                                     ),
            //                                                     new JProperty("timestamp", Timestamp.Now.ToIso8601())
            //                                                 ));

            //            }

            //        }
            //        catch (Exception e)
            //        {
            //            DebugX.LogException(e);
            //        }

            //        #endregion

            //        #region EMailNotifications

            //        if (SMTPClient != null)
            //        {
            //            try
            //            {

            //                var AllEMailNotifications = ParentChargeBoxes.
            //                                                SelectMany(parent => parent.User2ChargeBoxEdges).
            //                                                SelectMany(edge   => edge.Source.GetNotificationsOf<EMailNotification>(deleteChargeBox_MessageType)).
            //                                                ToSafeHashSet();

            //                if (AllEMailNotifications.SafeAny())
            //                {

            //                    if (messageTypes.Contains(deleteChargeBox_MessageType))
            //                        await SMTPClient.Send(
            //                             new HTMLEMailBuilder() {

            //                                 From           = Robot.EMail,
            //                                 To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
            //                                 Passphrase     = APIPassphrase,
            //                                 Subject        = ChargeBoxTextInfo(ChargeBox) + " has been deleted",

            //                                 HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
            //                                                                ChargeBoxHTMLInfo(ChargeBox) + " has been deleted.<br />",
            //                                                                HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

            //                                 PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
            //                                                                ChargeBoxTextInfo(ChargeBox) + " has been deleted.\r\n",
            //                                                                TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

            //                                 SecurityLevel  = EMailSecurity.autosign

            //                             });

            //                }

            //            }
            //            catch (Exception e)
            //            {
            //                DebugX.LogException(e);
            //            }
            //        }

            //        #endregion

            //    }

            //}

            #endregion

            #region (protected internal) GetChargeBoxSerializator (Request, ChargeBox)

            protected internal ChargeBoxToJSONDelegate GetChargeBoxSerializator(HTTPRequest  Request,
                                                                                User         User)
            {

                switch (User?.Id.ToString())
                {

                    default:
                        return (chargeBox,
                                embedded,
                                expandTags,
                                includeCryptoHash)

                                => chargeBox.ToJSON(embedded,
                                                    expandTags,
                                                    includeCryptoHash);

                }

            }

            #endregion


            #region AddChargeBox           (ChargeBox, OnAdded = null, ...)

            /// <summary>
            /// A delegate called whenever a charging station was added.
            /// </summary>
            /// <param name="Timestamp">The timestamp when the chargeBox was added.</param>
            /// <param name="ChargeBox">The added charging station.</param>
            /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            public delegate Task OnChargeBoxAddedDelegate(DateTime           Timestamp,
                                                          ChargeBox          ChargeBox,
                                                          EventTracking_Id?  EventTrackingId   = null,
                                                          User_Id?           CurrentUserId     = null);

            /// <summary>
            /// An event fired whenever a charging station was added.
            /// </summary>
            public event OnChargeBoxAddedDelegate? OnChargeBoxAdded;


            #region (protected internal) _AddChargeBox(ChargeBox, OnAdded = null, ...)

            /// <summary>
            /// Add the given chargeBox to the API.
            /// </summary>
            /// <param name="ChargeBox">A new chargeBox to be added to this API.</param>
            /// <param name="OnAdded">A delegate run whenever the chargeBox has been added successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            protected internal async Task<AddChargeBoxResult>

                _AddChargeBox(ChargeBox                             ChargeBox,
                              Action<ChargeBox, EventTracking_Id>?  OnAdded           = null,
                              EventTracking_Id?                     EventTrackingId   = null,
                              User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (ChargeBox.API is not null && ChargeBox.API != this)
                    return AddChargeBoxResult.ArgumentError(
                               ChargeBox,
                               "The given chargeBox is already attached to another API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                if (chargeBoxes.ContainsKey(ChargeBox.Id))
                    return AddChargeBoxResult.ArgumentError(
                               ChargeBox,
                               $"ChargeBox identification '{ChargeBox.Id}' already exists!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                //if (ChargeBox.Id.Length < MinChargeBoxIdLength)
                //    return AddChargeBoxResult.ArgumentError(ChargeBox,
                //                                               eventTrackingId,
                //                                               nameof(ChargeBox),
                //                                               "ChargeBox identification '" + ChargeBox.Id + "' is too short!");

                //if (ChargeBox.Name.IsNullOrEmpty() || ChargeBox.Name.IsNullOrEmpty())
                //    return AddChargeBoxResult.ArgumentError(ChargeBox,
                //                                               eventTrackingId,
                //                                               nameof(ChargeBox),
                //                                               "The given chargeBox name must not be null!");

                //if (ChargeBox.Name.Length < MinChargeBoxNameLength)
                //    return AddChargeBoxResult.ArgumentError(ChargeBox,
                //                                       nameof(ChargeBox),
                //                                       "ChargeBox name '" + ChargeBox.Name + "' is too short!");

                ChargeBox.API = this;


                //await WriteToDatabaseFile(addChargeBox_MessageType,
                //                          ChargeBox.ToJSON(false, true),
                //                          eventTrackingId,
                //                          CurrentUserId);

                chargeBoxes.TryAdd(ChargeBox.Id, ChargeBox);

                OnAdded?.Invoke(ChargeBox,
                                eventTrackingId);

                var OnChargeBoxAddedLocal = OnChargeBoxAdded;
                if (OnChargeBoxAddedLocal is not null)
                    await OnChargeBoxAddedLocal.Invoke(Timestamp.Now,
                                                       ChargeBox,
                                                       eventTrackingId,
                                                       CurrentUserId);

                //await SendNotifications(ChargeBox,
                //                        addChargeBox_MessageType,
                //                        null,
                //                        eventTrackingId,
                //                        CurrentUserId);

                return AddChargeBoxResult.Success(
                           ChargeBox,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #region AddChargeBox                      (ChargeBox, OnAdded = null, ...)

            /// <summary>
            /// Add the given chargeBox and add him/her to the given charging station.
            /// </summary>
            /// <param name="ChargeBox">A new charging station.</param>
            /// <param name="OnAdded">A delegate run whenever the chargeBox has been added successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            public async Task<AddChargeBoxResult>

                AddChargeBox(ChargeBox                             ChargeBox,
                             Action<ChargeBox, EventTracking_Id>?  OnAdded           = null,
                             EventTracking_Id?                     EventTrackingId   = null,
                             User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (await ChargingStationSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _AddChargeBox(ChargeBox,
                                                   OnAdded,
                                                   eventTrackingId,
                                                   CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        return AddChargeBoxResult.Error(
                                   ChargeBox,
                                   e,
                                   eventTrackingId,
                                   Id,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }

                }

                return AddChargeBoxResult.LockTimeout(
                           ChargeBox,
                           SemaphoreSlimTimeout,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #endregion

            #region AddChargeBoxIfNotExists(ChargeBox, OnAdded = null, ...)

            #region (protected internal) _AddChargeBoxIfNotExists(ChargeBox, OnAdded = null, ...)

            /// <summary>
            /// When it has not been created before, add the given chargeBox to the API.
            /// </summary>
            /// <param name="ChargeBox">A new chargeBox to be added to this API.</param>
            /// <param name="OnAdded">A delegate run whenever the chargeBox has been added successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            protected internal async Task<AddChargeBoxResult>

                _AddChargeBoxIfNotExists(ChargeBox                             ChargeBox,
                                         Action<ChargeBox, EventTracking_Id>?  OnAdded           = null,
                                         EventTracking_Id?                     EventTrackingId   = null,
                                         User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (ChargeBox.API != null && ChargeBox.API != this)
                    return AddChargeBoxResult.ArgumentError(
                               ChargeBox,
                               "The given chargeBox is already attached to another API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                if (chargeBoxes.ContainsKey(ChargeBox.Id))
                    return AddChargeBoxResult.NoOperation(
                               chargeBoxes[ChargeBox.Id],
                               eventTrackingId,
                               Id,
                               this
                           );

                //if (ChargeBox.Id.Length < MinChargeBoxIdLength)
                //    return AddChargeBoxResult.ArgumentError(ChargeBox,
                //                                                          eventTrackingId,
                //                                                          nameof(ChargeBox),
                //                                                          "ChargeBox identification '" + ChargeBox.Id + "' is too short!");

                //if (ChargeBox.Name.IsNullOrEmpty() || ChargeBox.Name.IsNullOrEmpty())
                //    return AddChargeBoxResult.ArgumentError(ChargeBox,
                //                                                          eventTrackingId,
                //                                                          nameof(ChargeBox),
                //                                                          "The given chargeBox name must not be null!");

                //if (ChargeBox.Name.Length < MinChargeBoxNameLength)
                //    return AddChargeBoxResult.ArgumentError(ChargeBox,
                //                                                  nameof(ChargeBox),
                //                                                  "ChargeBox name '" + ChargeBox.Name + "' is too short!");

                ChargeBox.API = this;


                //await WriteToDatabaseFile(addChargeBoxIfNotExists_MessageType,
                //                          ChargeBox.ToJSON(false, true),
                //                          eventTrackingId,
                //                          CurrentUserId);

                chargeBoxes.TryAdd(ChargeBox.Id, ChargeBox);

                OnAdded?.Invoke(ChargeBox,
                                eventTrackingId);

                var OnChargeBoxAddedLocal = OnChargeBoxAdded;
                if (OnChargeBoxAddedLocal != null)
                    await OnChargeBoxAddedLocal.Invoke(Timestamp.Now,
                                                       ChargeBox,
                                                       eventTrackingId,
                                                       CurrentUserId);

                //await SendNotifications(ChargeBox,
                //                        addChargeBoxIfNotExists_MessageType,
                //                        null,
                //                        eventTrackingId,
                //                        CurrentUserId);

                return AddChargeBoxResult.Success(
                           ChargeBox,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #region AddChargeBoxIfNotExists                      (ChargeBox, OnAdded = null, ...)

            /// <summary>
            /// Add the given chargeBox and add him/her to the given charging station.
            /// </summary>
            /// <param name="ChargeBox">A new charging station.</param>
            /// <param name="OnAdded">A delegate run whenever the chargeBox has been added successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            public async Task<AddChargeBoxResult>

                AddChargeBoxIfNotExists(ChargeBox                             ChargeBox,
                                        Action<ChargeBox, EventTracking_Id>?  OnAdded           = null,
                                        EventTracking_Id?                     EventTrackingId   = null,
                                        User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (await ChargingStationSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _AddChargeBoxIfNotExists(ChargeBox,
                                                              OnAdded,
                                                              eventTrackingId,
                                                              CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        return AddChargeBoxResult.Error(
                                   ChargeBox,
                                   e,
                                   eventTrackingId,
                                   Id,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }

                }

                return AddChargeBoxResult.LockTimeout(
                           ChargeBox,
                           SemaphoreSlimTimeout,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #endregion

            #region AddOrUpdateChargeBox   (ChargeBox, OnAdded = null, OnUpdated = null, ...)

            #region (protected internal) _AddOrUpdateChargeBox(ChargeBox, OnAdded = null, OnUpdated = null, ...)

            /// <summary>
            /// Add or update the given chargeBox to/within the API.
            /// </summary>
            /// <param name="ChargeBox">A charging station.</param>
            /// <param name="OnAdded">A delegate run whenever the chargeBox has been added successfully.</param>
            /// <param name="OnUpdated">A delegate run whenever the chargeBox has been updated successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            protected internal async Task<AddOrUpdateChargeBoxResult>

                _AddOrUpdateChargeBox(ChargeBox                             ChargeBox,
                                      Action<ChargeBox, EventTracking_Id>?  OnAdded           = null,
                                      Action<ChargeBox, EventTracking_Id>?  OnUpdated         = null,
                                      EventTracking_Id?                     EventTrackingId   = null,
                                      User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (ChargeBox.API != null && ChargeBox.API != this)
                    return AddOrUpdateChargeBoxResult.ArgumentError(
                               ChargeBox,
                               "The given chargeBox is already attached to another API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                //if (ChargeBox.Id.Length < MinChargeBoxIdLength)
                //    return AddOrUpdateChargeBoxResult.ArgumentError(ChargeBox,
                //                                                       eventTrackingId,
                //                                                       nameof(ChargeBox),
                //                                                       "The given chargeBox identification '" + ChargeBox.Id + "' is too short!");

                //if (ChargeBox.Name.IsNullOrEmpty() || ChargeBox.Name.IsNullOrEmpty())
                //    return AddOrUpdateChargeBoxResult.ArgumentError(ChargeBox,
                //                                                       eventTrackingId,
                //                                                       nameof(ChargeBox),
                //                                                       "The given chargeBox name must not be null!");

                //if (ChargeBox.Name.Length < MinChargeBoxNameLength)
                //    return AddOrUpdateChargeBoxResult.ArgumentError(ChargeBox,
                //                                               eventTrackingId,
                //                                               nameof(ChargeBox),
                //                                               "ChargeBox name '" + ChargeBox.Name + "' is too short!");

                ChargeBox.API = this;


                //await WriteToDatabaseFile(addOrUpdateChargeBox_MessageType,
                //                          ChargeBox.ToJSON(false, true),
                //                          eventTrackingId,
                //                          CurrentUserId);

                if (chargeBoxes.TryGetValue(ChargeBox.Id, out var OldChargeBox))
                {
                    chargeBoxes.TryRemove(OldChargeBox.Id, out _);
                    ChargeBox.CopyAllLinkedDataFromBase(OldChargeBox);
                }

                chargeBoxes.TryAdd(ChargeBox.Id, ChargeBox);

                if (OldChargeBox is null)
                {

                    OnAdded?.Invoke(ChargeBox,
                                    eventTrackingId);

                    var OnChargeBoxAddedLocal = OnChargeBoxAdded;
                    if (OnChargeBoxAddedLocal != null)
                        await OnChargeBoxAddedLocal.Invoke(Timestamp.Now,
                                                           ChargeBox,
                                                           eventTrackingId,
                                                           CurrentUserId);

                    //await SendNotifications(ChargeBox,
                    //                        addChargeBox_MessageType,
                    //                        null,
                    //                        eventTrackingId,
                    //                        CurrentUserId);

                    return AddOrUpdateChargeBoxResult.Added(
                               ChargeBox,
                               eventTrackingId,
                               Id,
                               this
                           );

                }

                OnUpdated?.Invoke(ChargeBox,
                                  eventTrackingId);

                var OnChargeBoxUpdatedLocal = OnChargeBoxUpdated;
                if (OnChargeBoxUpdatedLocal != null)
                    await OnChargeBoxUpdatedLocal.Invoke(Timestamp.Now,
                                                            ChargeBox,
                                                            OldChargeBox,
                                                            eventTrackingId,
                                                            CurrentUserId);

                //await SendNotifications(ChargeBox,
                //                        updateChargeBox_MessageType,
                //                        OldChargeBox,
                //                        eventTrackingId,
                //                        CurrentUserId);

                return AddOrUpdateChargeBoxResult.Updated(
                           ChargeBox,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #region AddOrUpdateChargeBox                      (ChargeBox, OnAdded = null, OnUpdated = null, ...)

            /// <summary>
            /// Add or update the given chargeBox to/within the API.
            /// </summary>
            /// <param name="ChargeBox">A charging station.</param>
            /// <param name="OnAdded">A delegate run whenever the chargeBox has been added successfully.</param>
            /// <param name="OnUpdated">A delegate run whenever the chargeBox has been updated successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            public async Task<AddOrUpdateChargeBoxResult>

                AddOrUpdateChargeBox(ChargeBox                             ChargeBox,
                                     Action<ChargeBox, EventTracking_Id>?  OnAdded           = null,
                                     Action<ChargeBox, EventTracking_Id>?  OnUpdated         = null,
                                     EventTracking_Id?                     EventTrackingId   = null,
                                     User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (await ChargingStationSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _AddOrUpdateChargeBox(ChargeBox,
                                                           OnAdded,
                                                           OnUpdated,
                                                           eventTrackingId,
                                                           CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        return AddOrUpdateChargeBoxResult.Error(
                                   ChargeBox,
                                   e,
                                   eventTrackingId,
                                   Id,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return AddOrUpdateChargeBoxResult.LockTimeout(
                           ChargeBox,
                           SemaphoreSlimTimeout,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #endregion

            #region UpdateChargeBox        (ChargeBox,                 OnUpdated = null, ...)

            /// <summary>
            /// A delegate called whenever a charging station was updated.
            /// </summary>
            /// <param name="Timestamp">The timestamp when the chargeBox was updated.</param>
            /// <param name="ChargeBox">The updated charging station.</param>
            /// <param name="OldChargeBox">The old charging station.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            public delegate Task OnChargeBoxUpdatedDelegate(DateTime           Timestamp,
                                                            ChargeBox          ChargeBox,
                                                            ChargeBox          OldChargeBox,
                                                            EventTracking_Id?  EventTrackingId   = null,
                                                            User_Id?           CurrentUserId     = null);

            /// <summary>
            /// An event fired whenever a charging station was updated.
            /// </summary>
            public event OnChargeBoxUpdatedDelegate? OnChargeBoxUpdated;


            #region (protected internal) _UpdateChargeBox(ChargeBox,                 OnUpdated = null, ...)

            /// <summary>
            /// Update the given chargeBox to/within the API.
            /// </summary>
            /// <param name="ChargeBox">A charging station.</param>
            /// <param name="OnUpdated">A delegate run whenever the chargeBox has been updated successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            protected internal async Task<UpdateChargeBoxResult>

                _UpdateChargeBox(ChargeBox                             ChargeBox,
                                 Action<ChargeBox, EventTracking_Id>?  OnUpdated         = null,
                                 EventTracking_Id?                     EventTrackingId   = null,
                                 User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (!_TryGetChargeBox(ChargeBox.Id, out var OldChargeBox))
                    return UpdateChargeBoxResult.ArgumentError(
                               ChargeBox,
                               $"The given chargeBox '{ChargeBox.Id}' does not exists in this API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                if (ChargeBox.API != null && ChargeBox.API != this)
                    return UpdateChargeBoxResult.ArgumentError(
                               ChargeBox,
                               "The given chargeBox is already attached to another API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                ChargeBox.API = this;


                //await WriteToDatabaseFile(updateChargeBox_MessageType,
                //                          ChargeBox.ToJSON(),
                //                          eventTrackingId,
                //                          CurrentUserId);

                chargeBoxes.TryRemove(OldChargeBox.Id, out _);
                ChargeBox.CopyAllLinkedDataFromBase(OldChargeBox);
                chargeBoxes.TryAdd(ChargeBox.Id, ChargeBox);

                OnUpdated?.Invoke(ChargeBox,
                                  eventTrackingId);

                var OnChargeBoxUpdatedLocal = OnChargeBoxUpdated;
                if (OnChargeBoxUpdatedLocal is not null)
                    await OnChargeBoxUpdatedLocal.Invoke(Timestamp.Now,
                                                         ChargeBox,
                                                         OldChargeBox,
                                                         eventTrackingId,
                                                         CurrentUserId);

                //await SendNotifications(ChargeBox,
                //                        updateChargeBox_MessageType,
                //                        OldChargeBox,
                //                        eventTrackingId,
                //                        CurrentUserId);

                return UpdateChargeBoxResult.Success(
                           ChargeBox,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #region UpdateChargeBox                      (ChargeBox,                 OnUpdated = null, ...)

            /// <summary>
            /// Update the given chargeBox to/within the API.
            /// </summary>
            /// <param name="ChargeBox">A charging station.</param>
            /// <param name="OnUpdated">A delegate run whenever the chargeBox has been updated successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            public async Task<UpdateChargeBoxResult>

                UpdateChargeBox(ChargeBox                             ChargeBox,
                                Action<ChargeBox, EventTracking_Id>?  OnUpdated         = null,
                                EventTracking_Id?                     EventTrackingId   = null,
                                User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (await ChargingStationSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _UpdateChargeBox(ChargeBox,
                                                      OnUpdated,
                                                      eventTrackingId,
                                                      CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        return UpdateChargeBoxResult.Error(
                                   ChargeBox,
                                   e,
                                   eventTrackingId,
                                   Id,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return UpdateChargeBoxResult.LockTimeout(
                           ChargeBox,
                           SemaphoreSlimTimeout,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion


            #region (protected internal) _UpdateChargeBox(ChargeBox, UpdateDelegate, OnUpdated = null, ...)

            /// <summary>
            /// Update the given charging station.
            /// </summary>
            /// <param name="ChargeBox">An charging station.</param>
            /// <param name="UpdateDelegate">A delegate to update the given charging station.</param>
            /// <param name="OnUpdated">A delegate run whenever the chargeBox has been updated successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            protected internal async Task<UpdateChargeBoxResult>

                _UpdateChargeBox(ChargeBox                             ChargeBox,
                                 Action<ChargeBox.Builder>             UpdateDelegate,
                                 Action<ChargeBox, EventTracking_Id>?  OnUpdated         = null,
                                 EventTracking_Id?                     EventTrackingId   = null,
                                 User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (!_ChargeBoxExists(ChargeBox.Id))
                    return UpdateChargeBoxResult.ArgumentError(
                               ChargeBox,
                               $"The given chargeBox '{ChargeBox.Id}' does not exists in this API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                if (ChargeBox.API != this)
                    return UpdateChargeBoxResult.ArgumentError(
                               ChargeBox,
                               "The given chargeBox is not attached to this API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                if (UpdateDelegate is null)
                    return UpdateChargeBoxResult.ArgumentError(
                               ChargeBox,
                               "The given update delegate must not be null!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );


                var builder = ChargeBox.ToBuilder();
                UpdateDelegate(builder);
                var updatedChargeBox = builder.ToImmutable;

                //await WriteToDatabaseFile(updateChargeBox_MessageType,
                //                          updatedChargeBox.ToJSON(),
                //                          eventTrackingId,
                //                          CurrentUserId);

                chargeBoxes.TryRemove(ChargeBox.Id, out _);
                updatedChargeBox.CopyAllLinkedDataFromBase(ChargeBox);
                chargeBoxes.TryAdd(updatedChargeBox.Id, updatedChargeBox);

                OnUpdated?.Invoke(updatedChargeBox,
                                  eventTrackingId);

                var OnChargeBoxUpdatedLocal = OnChargeBoxUpdated;
                if (OnChargeBoxUpdatedLocal is not null)
                    await OnChargeBoxUpdatedLocal.Invoke(Timestamp.Now,
                                                         updatedChargeBox,
                                                         ChargeBox,
                                                         eventTrackingId,
                                                         CurrentUserId);

                //await SendNotifications(updatedChargeBox,
                //                        updateChargeBox_MessageType,
                //                        ChargeBox,
                //                        eventTrackingId,
                //                        CurrentUserId);

                return UpdateChargeBoxResult.Success(
                           ChargeBox,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #region UpdateChargeBox                      (ChargeBox, UpdateDelegate, OnUpdated = null, ...)

            /// <summary>
            /// Update the given charging station.
            /// </summary>
            /// <param name="ChargeBox">An charging station.</param>
            /// <param name="UpdateDelegate">A delegate to update the given charging station.</param>
            /// <param name="OnUpdated">A delegate run whenever the chargeBox has been updated successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional chargeBox identification initiating this command/request.</param>
            public async Task<UpdateChargeBoxResult>

                UpdateChargeBox(ChargeBox                             ChargeBox,
                                Action<ChargeBox.Builder>             UpdateDelegate,
                                Action<ChargeBox, EventTracking_Id>?  OnUpdated         = null,
                                EventTracking_Id?                     EventTrackingId   = null,
                                User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (await ChargingStationSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _UpdateChargeBox(ChargeBox,
                                                      UpdateDelegate,
                                                      OnUpdated,
                                                      eventTrackingId,
                                                      CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        return UpdateChargeBoxResult.Error(
                                   ChargeBox,
                                   e,
                                   eventTrackingId,
                                   Id,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return UpdateChargeBoxResult.LockTimeout(
                           ChargeBox,
                           SemaphoreSlimTimeout,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #endregion

            #region DeleteChargeBox        (ChargeBox, OnDeleted = null, ...)

            /// <summary>
            /// A delegate called whenever a charging station was deleted.
            /// </summary>
            /// <param name="Timestamp">The timestamp when the chargeBox was deleted.</param>
            /// <param name="ChargeBox">The chargeBox to be deleted.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
            public delegate Task OnChargeBoxDeletedDelegate(DateTime           Timestamp,
                                                            ChargeBox          ChargeBox,
                                                            EventTracking_Id?  EventTrackingId   = null,
                                                            User_Id?           CurrentUserId     = null);

            /// <summary>
            /// An event fired whenever a charging station was deleted.
            /// </summary>
            public event OnChargeBoxDeletedDelegate? OnChargeBoxDeleted;


            #region (protected internal virtual) _CanDeleteChargeBox(ChargeBox)

            /// <summary>
            /// Determines whether the chargeBox can safely be deleted from the API.
            /// </summary>
            /// <param name="ChargeBox">The chargeBox to be deleted.</param>
            protected internal virtual I18NString? _CanDeleteChargeBox(ChargeBox ChargeBox)
            {

                //if (ChargeBox.Users.Any())
                //    return new I18NString(Languages.en, "The chargeBox still has members!");

                //if (ChargeBox.SubChargeBoxes.Any())
                //    return new I18NString(Languages.en, "The chargeBox still has sub chargeBoxs!");

                return null;

            }

            #endregion

            #region (protected internal) _DeleteChargeBox(ChargeBox, OnDeleted = null, ...)

            /// <summary>
            /// Delete the given charging station.
            /// </summary>
            /// <param name="ChargeBox">The chargeBox to be deleted.</param>
            /// <param name="OnDeleted">A delegate run whenever the chargeBox has been deleted successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
            protected internal async Task<DeleteChargeBoxResult>

                _DeleteChargeBox(ChargeBox                             ChargeBox,
                                 Action<ChargeBox, EventTracking_Id>?  OnDeleted         = null,
                                 EventTracking_Id?                     EventTrackingId   = null,
                                 User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (ChargeBox.API != this)
                    return DeleteChargeBoxResult.ArgumentError(
                               ChargeBox,
                               "The given chargeBox is not attached to this API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );

                if (!chargeBoxes.TryGetValue(ChargeBox.Id, out var ChargeBoxToBeDeleted))
                    return DeleteChargeBoxResult.ArgumentError(
                               ChargeBox,
                               "The given chargeBox does not exists in this API!".ToI18NString(),
                               eventTrackingId,
                               Id,
                               this
                           );


                var veto = _CanDeleteChargeBox(ChargeBox);

                if (veto is not null)
                    return DeleteChargeBoxResult.CanNotBeRemoved(
                               ChargeBox,
                               eventTrackingId,
                               Id,
                               this,
                               veto
                           );


                //// Get all parent chargeBoxs now, because later
                //// the --isChildOf--> edge will no longer be available!
                //var parentChargeBoxes = ChargeBox.GetAllParents(parent => parent != NoOwner).
                //                                       ToArray();


                //// Remove all: this --edge--> other_chargeBox
                //foreach (var edge in ChargeBox.ChargeBox2ChargeBoxOutEdges.ToArray())
                //    await _UnlinkChargeBoxes(edge.Source,
                //                               edge.EdgeLabel,
                //                               edge.Target,
                //                               EventTrackingId,
                //                               SuppressNotifications:  false,
                //                               CurrentUserId:          CurrentUserId);

                //// Remove all: this <--edge-- other_chargeBox
                //foreach (var edge in ChargeBox.ChargeBox2ChargeBoxInEdges.ToArray())
                //    await _UnlinkChargeBoxes(edge.Target,
                //                               edge.EdgeLabel,
                //                               edge.Source,
                //                               EventTrackingId,
                //                               SuppressNotifications:  false,
                //                               CurrentUserId:          CurrentUserId);


                //await WriteToDatabaseFile(deleteChargeBox_MessageType,
                //                          ChargeBox.ToJSON(false, true),
                //                          eventTrackingId,
                //                          CurrentUserId);

                chargeBoxes.TryRemove(ChargeBox.Id, out _);

                OnDeleted?.Invoke(ChargeBox,
                                  eventTrackingId);

                var OnChargeBoxDeletedLocal = OnChargeBoxDeleted;
                if (OnChargeBoxDeletedLocal is not null)
                    await OnChargeBoxDeletedLocal.Invoke(Timestamp.Now,
                                                         ChargeBox,
                                                         eventTrackingId,
                                                         CurrentUserId);

                //await SendNotifications(ChargeBox,
                //                        parentChargeBoxes,
                //                        deleteChargeBox_MessageType,
                //                        eventTrackingId,
                //                        CurrentUserId);


                return DeleteChargeBoxResult.Success(
                           ChargeBox,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #region DeleteChargeBox                      (ChargeBox, OnDeleted = null, ...)

            /// <summary>
            /// Delete the given charging station.
            /// </summary>
            /// <param name="ChargeBox">The chargeBox to be deleted.</param>
            /// <param name="OnDeleted">A delegate run whenever the chargeBox has been deleted successfully.</param>
            /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
            /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
            public async Task<DeleteChargeBoxResult>

                DeleteChargeBox(ChargeBox                             ChargeBox,
                                Action<ChargeBox, EventTracking_Id>?  OnDeleted         = null,
                                EventTracking_Id?                     EventTrackingId   = null,
                                User_Id?                              CurrentUserId     = null)

            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                if (await ChargingStationSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _DeleteChargeBox(ChargeBox,
                                                      OnDeleted,
                                                      eventTrackingId,
                                                      CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        return DeleteChargeBoxResult.Error(
                                   ChargeBox,
                                   e,
                                   eventTrackingId,
                                   Id,
                                   this
                               );

                    }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }

                }

                return DeleteChargeBoxResult.LockTimeout(
                           ChargeBox,
                           SemaphoreSlimTimeout,
                           eventTrackingId,
                           Id,
                           this
                       );

            }

            #endregion

            #endregion


            #region ChargeBoxExists(ChargeBoxId)

            /// <summary>
            /// Determines whether the given chargeBox identification exists within this API.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            protected internal Boolean _ChargeBoxExists(ChargingStation_Id ChargeBoxId)

                => ChargeBoxId.IsNotNullOrEmpty && chargeBoxes.ContainsKey(ChargeBoxId);

            /// <summary>
            /// Determines whether the given chargeBox identification exists within this API.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            protected internal Boolean _ChargeBoxExists(ChargingStation_Id? ChargeBoxId)

                => ChargeBoxId.IsNotNullOrEmpty() && chargeBoxes.ContainsKey(ChargeBoxId.Value);


            /// <summary>
            /// Determines whether the given chargeBox identification exists within this API.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            public Boolean ChargeBoxExists(ChargingStation_Id ChargeBoxId)
            {

                if (ChargingStationSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _ChargeBoxExists(ChargeBoxId);

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return false;

            }

            /// <summary>
            /// Determines whether the given chargeBox identification exists within this API.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            public Boolean ChargeBoxExists(ChargingStation_Id? ChargeBoxId)
            {

                if (ChargingStationSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _ChargeBoxExists(ChargeBoxId);

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return false;

            }

            #endregion

            #region GetChargeBox   (ChargeBoxId)

            /// <summary>
            /// Get the chargeBox having the given unique identification.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            protected internal ChargeBox? _GetChargeBox(ChargingStation_Id ChargeBoxId)
            {

                if (ChargeBoxId.IsNotNullOrEmpty && chargeBoxes.TryGetValue(ChargeBoxId, out var chargeBox))
                    return chargeBox;

                return default;

            }

            /// <summary>
            /// Get the chargeBox having the given unique identification.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            protected internal ChargeBox? _GetChargeBox(ChargingStation_Id? ChargeBoxId)
            {

                if (ChargeBoxId is not null && chargeBoxes.TryGetValue(ChargeBoxId.Value, out var chargeBox))
                    return chargeBox;

                return default;

            }


            /// <summary>
            /// Get the chargeBox having the given unique identification.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            public ChargeBox? GetChargeBox(ChargingStation_Id ChargeBoxId)
            {

                if (ChargingStationSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _GetChargeBox(ChargeBoxId);

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return null;

            }

            /// <summary>
            /// Get the chargeBox having the given unique identification.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            public ChargeBox? GetChargeBox(ChargingStation_Id? ChargeBoxId)
            {

                if (ChargingStationSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _GetChargeBox(ChargeBoxId);

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return null;

            }

            #endregion

            #region TryGetChargeBox(ChargeBoxId, out ChargeBox)

            /// <summary>
            /// Try to get the chargeBox having the given unique identification.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            /// <param name="ChargeBox">The charging station.</param>
            protected internal Boolean _TryGetChargeBox(ChargingStation_Id    ChargeBoxId,
                                                        out ChargeBox?  ChargeBox)
            {

                if (ChargeBoxId.IsNotNullOrEmpty && chargeBoxes.TryGetValue(ChargeBoxId, out var chargeBox))
                {
                    ChargeBox = chargeBox;
                    return true;
                }

                ChargeBox = null;
                return false;

            }

            /// <summary>
            /// Try to get the chargeBox having the given unique identification.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            /// <param name="ChargeBox">The charging station.</param>
            protected internal Boolean _TryGetChargeBox(ChargingStation_Id?   ChargeBoxId,
                                                        out ChargeBox?  ChargeBox)
            {

                if (ChargeBoxId is not null && chargeBoxes.TryGetValue(ChargeBoxId.Value, out var chargeBox))
                {
                    ChargeBox = chargeBox;
                    return true;
                }

                ChargeBox = null;
                return false;

            }


            /// <summary>
            /// Try to get the chargeBox having the given unique identification.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            /// <param name="ChargeBox">The charging station.</param>
            public Boolean TryGetChargeBox(ChargingStation_Id    ChargeBoxId,
                                           out ChargeBox?  ChargeBox)
            {

                if (ChargingStationSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _TryGetChargeBox(ChargeBoxId, out ChargeBox);

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                ChargeBox = null;
                return false;

            }

            /// <summary>
            /// Try to get the chargeBox having the given unique identification.
            /// </summary>
            /// <param name="ChargeBoxId">The unique identification of an charging station.</param>
            /// <param name="ChargeBox">The charging station.</param>
            public Boolean TryGetChargeBox(ChargingStation_Id?   ChargeBoxId,
                                           out ChargeBox?  ChargeBox)
            {

                if (ChargingStationSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _TryGetChargeBox(ChargeBoxId, out ChargeBox);

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            ChargingStationSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                ChargeBox = null;
                return false;

            }

            #endregion

            #endregion


            private Task HandleErrors(String     Module,
                                      String     Caller,
                                      Exception  ExceptionOccured)
            {

                DebugX.LogException(ExceptionOccured, $"{Module}.{Caller}");

                return Task.CompletedTask;

            }


        }


        #region Data

        private          readonly  HashSet<SignaturePolicy>                                                                 signaturePolicies           = new();

        #endregion

        #region Properties

        /// <summary>
        /// The unique identification of this networking node.
        /// </summary>
        public NetworkingNode_Id        Id                          { get; }

        /// <summary>
        /// The networking node vendor identification.
        /// </summary>
        [Mandatory]
        public String                   VendorName                  { get; }

        /// <summary>
        ///  The networking node model identification.
        /// </summary>
        [Mandatory]
        public String                   Model                       { get; }


        /// <summary>
        /// The optional multi-language networking node description.
        /// </summary>
        [Optional]
        public I18NString?              Description                 { get; }

        /// <summary>
        /// The optional serial number of the networking node.
        /// </summary>
        [Optional]
        public String?                  SerialNumber                { get; }

        /// <summary>
        /// The optional firmware version of the networking node.
        /// </summary>
        [Optional]
        public String?                  FirmwareVersion             { get; }

        /// <summary>
        /// The modem of the networking node.
        /// </summary>
        [Optional]
        public Modem?                   Modem                       { get; }


        public CustomData?              CustomData                  { get; set; }


        /// <summary>
        /// The time span between heartbeat requests.
        /// </summary>
        public TimeSpan                 SendHeartbeatEvery          { get; set; }

        /// <summary>
        /// The time at the CSMS.
        /// </summary>
        public DateTime?                CSMSTime                    { get; private set; }

        /// <summary>
        /// The default request timeout for all requests.
        /// </summary>
        public TimeSpan                 DefaultRequestTimeout       { get; }




        /// <summary>
        /// The maintenance interval.
        /// </summary>
        public TimeSpan                 MaintenanceEvery            { get; }

        /// <summary>
        /// Disable all maintenance tasks.
        /// </summary>
        public Boolean                  DisableMaintenanceTasks     { get; set; }

        /// <summary>
        /// Disable all heartbeats.
        /// </summary>
        public Boolean                  DisableSendHeartbeats       { get; set; }


        #region ToDo's

        public URL RemoteURL => throw new NotImplementedException();

        public HTTPHostname? VirtualHostname => throw new NotImplementedException();

        public RemoteCertificateValidationHandler? RemoteCertificateValidator => throw new NotImplementedException();

        public X509Certificate? ClientCert => throw new NotImplementedException();

        public SslProtocols TLSProtocol => throw new NotImplementedException();

        public bool PreferIPv4 => throw new NotImplementedException();

        public string HTTPUserAgent => throw new NotImplementedException();

        public TimeSpan RequestTimeout { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public TransmissionRetryDelayDelegate TransmissionRetryDelay => throw new NotImplementedException();

        public ushort MaxNumberOfRetries => throw new NotImplementedException();

        public bool UseHTTPPipelining => throw new NotImplementedException();

        public HTTPClientLogger? HTTPLogger => throw new NotImplementedException();

        #endregion


        /// <summary>
        /// The enumeration of all signature policies.
        /// </summary>
        public IEnumerable<SignaturePolicy>  SignaturePolicies
            => signaturePolicies;

        /// <summary>
        /// The currently active signature policy.
        /// </summary>
        public SignaturePolicy               SignaturePolicy
            => SignaturePolicies.First();


        public  ActingAsCS               AsCS                        { get; }

        public  ActingAsCSMS             AsCSMS                      { get; }


        public CS.INetworkingNodeClient? CSClient
            => AsCS.CSClient;


        /// <summary>
        /// The sender identification.
        /// </summary>
        String IEventSender.Id
            => this.Id.ToString();

        public DNSClient  DNSClient                 { get; }

        #endregion

        #region Events


        #endregion

        #region Custom JSON serializer delegates


        #endregion

        #region Constructor(s)

        /// <summary>
        /// Create a new networking node for testing.
        /// </summary>
        /// <param name="Id">The unique identification of this networking node.</param>
        public TestNetworkingNode(NetworkingNode_Id     Id,
                                  String                VendorName,
                                  String                Model,

                                  I18NString?           Description               = null,
                                  String?               SerialNumber              = null,
                                  String?               FirmwareVersion           = null,
                                  Modem?                Modem                     = null,

                                  Boolean               DisableSendHeartbeats     = false,
                                  TimeSpan?             SendHeartbeatEvery        = null,

                                  Boolean               DisableMaintenanceTasks   = false,
                                  TimeSpan?             MaintenanceEvery          = null,

                                  TimeSpan?             DefaultRequestTimeout     = null,
                                  IHTTPAuthentication?  HTTPAuthentication        = null,
                                  DNSClient?            DNSClient                 = null,

                                  SignaturePolicy?      SignaturePolicy           = null)

        {

            if (Id.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(Id),          "The given networking node identification must not be null or empty!");

            if (VendorName.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(VendorName),  "The given networking node vendor must not be null or empty!");

            if (Model.     IsNullOrEmpty())
                throw new ArgumentNullException(nameof(Model),       "The given networking node model must not be null or empty!");

            this.Id                       = Id;
            this.VendorName               = VendorName;
            this.Model                    = Model;
            this.Description              = Description;
            this.SerialNumber             = SerialNumber;
            this.FirmwareVersion          = FirmwareVersion;


            Directory.CreateDirectory(Path.Combine(AppContext.BaseDirectory, "HTTPSSEs"));

            this.DNSClient                = DNSClient ?? new DNSClient(SearchForIPv6DNSServers: false);

         //   this.EnqueuedRequests         = [];


            this.AsCSMS                   = new ActingAsCSMS(

                                                NetworkingNode:            this,
                                                RequireAuthentication:     false,
                                                DefaultRequestTimeout:     this.DefaultRequestTimeout,
                                                HTTPUploadPort:            null,
                                                DNSClient:                 this.DNSClient

                                                //SignaturePolicy:           this.SignaturePolicy

                                            );

            this.AsCS                     = new ActingAsCS(

                                                NetworkingNode:            this,
                                                VendorName:                this.VendorName,
                                                Model:                     this.Model,

                                                Description:               this.Description,
                                                SerialNumber:              this.SerialNumber,
                                                FirmwareVersion:           this.FirmwareVersion,
                                                Modem:                     this.Modem,

                                                DisableSendHeartbeats:     this.DisableSendHeartbeats,
                                                SendHeartbeatEvery:        this.SendHeartbeatEvery,

                                                DisableMaintenanceTasks:   this.DisableMaintenanceTasks,
                                                MaintenanceEvery:          this.MaintenanceEvery,

                                                DefaultRequestTimeout:     this.DefaultRequestTimeout,
                                                HTTPAuthentication:        null,
                                                DNSClient:                 this.DNSClient

                                                //SignaturePolicy:           this.SignaturePolicy

                                            );

        }

        #endregion


        #region ConnectWebSocket(...)

        public Task<HTTPResponse?> ConnectWebSocket(String                               From,
                                                    String                               To,

                                                    URL                                  RemoteURL,
                                                    HTTPHostname?                        VirtualHostname              = null,
                                                    String?                              Description                  = null,
                                                    RemoteCertificateValidationHandler?  RemoteCertificateValidator   = null,
                                                    LocalCertificateSelectionHandler?    ClientCertificateSelector    = null,
                                                    X509Certificate?                     ClientCert                   = null,
                                                    SslProtocols?                        TLSProtocol                  = null,
                                                    Boolean?                             PreferIPv4                   = null,
                                                    String?                              HTTPUserAgent                = null,
                                                    IHTTPAuthentication?                 HTTPAuthentication           = null,
                                                    TimeSpan?                            RequestTimeout               = null,
                                                    TransmissionRetryDelayDelegate?      TransmissionRetryDelay       = null,
                                                    UInt16?                              MaxNumberOfRetries           = null,
                                                    UInt32?                              InternalBufferSize           = null,

                                                    IEnumerable<String>?                 SecWebSocketProtocols        = null,

                                                    Boolean                              DisableMaintenanceTasks      = false,
                                                    TimeSpan?                            MaintenanceEvery             = null,
                                                    Boolean                              DisableWebSocketPings        = false,
                                                    TimeSpan?                            WebSocketPingEvery           = null,
                                                    TimeSpan?                            SlowNetworkSimulationDelay   = null,

                                                    String?                              LoggingPath                  = null,
                                                    String?                              LoggingContext               = null,
                                                    LogfileCreatorDelegate?              LogfileCreator               = null,
                                                    HTTPClientLogger?                    HTTPLogger                   = null,
                                                    DNSClient?                           DNSClient                    = null)

            => AsCS.ConnectWebSocket(From,
                                     To,

                                     RemoteURL,
                                     VirtualHostname,
                                     Description,
                                     RemoteCertificateValidator,
                                     ClientCertificateSelector,
                                     ClientCert,
                                     TLSProtocol,
                                     PreferIPv4,
                                     HTTPUserAgent,
                                     HTTPAuthentication,
                                     RequestTimeout,
                                     TransmissionRetryDelay,
                                     MaxNumberOfRetries,
                                     InternalBufferSize,

                                     SecWebSocketProtocols,

                                     DisableMaintenanceTasks,
                                     MaintenanceEvery,
                                     DisableWebSocketPings,
                                     WebSocketPingEvery,
                                     SlowNetworkSimulationDelay,

                                     LoggingPath,
                                     LoggingContext,
                                     LogfileCreator,
                                     HTTPLogger,
                                     DNSClient);

        #endregion



        private Task HandleErrors(String     Module,
                                  String     Caller,
                                  Exception  ExceptionOccured)
        {

            DebugX.LogException(ExceptionOccured, $"{Module}.{Caller}");

            return Task.CompletedTask;

        }


    }

}
